// <auto-generated />
using System;
using ExaminaWebApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExaminaWebApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250827205107_Migration_20250828_045054")]
    partial class Migration_20250828_045054
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ExaminaWebApplication.Models.Admin.SystemConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("General");

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ConfigKey")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SystemConfigurations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ComprehensiveTrainingCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BenchSuiteScoringResult")
                        .HasColumnType("json");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CompletionPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("TrainingId");

                    b.ToTable("ComprehensiveTrainingCompletions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ExamCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BenchSuiteScoringResult")
                        .HasColumnType("json");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExamId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Status");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("StudentUserId", "ExamId")
                        .IsUnique();

                    b.ToTable("ExamCompletions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ExamSchoolAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExamId");

                    b.HasIndex("IsActive");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ExamId", "SchoolId")
                        .IsUnique();

                    b.ToTable("ExamSchoolAssociations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.ComprehensiveTrainingFileAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComprehensiveTrainingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FileId");

                    b.HasIndex("FileType");

                    b.HasIndex("ComprehensiveTrainingId", "FileId")
                        .IsUnique();

                    b.ToTable("ComprehensiveTrainingFileAssociations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.ExamFileAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FileId");

                    b.HasIndex("FileType");

                    b.HasIndex("ExamId", "FileId")
                        .IsUnique();

                    b.ToTable("ExamFileAssociations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.SpecializedTrainingFileAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("SpecializedTrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FileId");

                    b.HasIndex("FileType");

                    b.HasIndex("SpecializedTrainingId", "FileId")
                        .IsUnique();

                    b.ToTable("SpecializedTrainingFileAssociations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FileHash")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("UploadProgress")
                        .HasColumnType("int");

                    b.Property<string>("UploadStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FileHash");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StoredFileName")
                        .IsUnique();

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UploadedBy");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowRetake")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ComprehensiveTrainingType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("UnifiedTraining");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120);

                    b.Property<bool>("EnableTrial")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtendedConfig")
                        .HasColumnType("json");

                    b.Property<string>("ImportErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ImportFileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("ImportFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImportStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Success");

                    b.Property<string>("ImportVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("1.0");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ImportedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxRetakeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OriginalComprehensiveTrainingId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("OriginalCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OriginalCreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OriginalPublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OriginalPublishedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OriginalUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PassingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(6,2)")
                        .HasDefaultValue(60.0m);

                    b.Property<bool>("RandomizeQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("TotalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(6,2)")
                        .HasDefaultValue(100.0m);

                    b.HasKey("Id");

                    b.HasIndex("ComprehensiveTrainingType");

                    b.HasIndex("ImportStatus");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("ImportedBy");

                    b.HasIndex("Name");

                    b.HasIndex("OriginalComprehensiveTrainingId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("ImportedComprehensiveTrainings");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComprehensiveTrainingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("OriginalModuleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ComprehensiveTrainingId");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("Order");

                    b.HasIndex("OriginalModuleId");

                    b.HasIndex("Type");

                    b.ToTable("ImportedComprehensiveTrainingModules");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingOperationPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("OriginalOperationPointId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("ModuleType");

                    b.HasIndex("Order");

                    b.HasIndex("OriginalOperationPointId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ImportedComprehensiveTrainingOperationPoints");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EnumOptions")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<double?>("MaxValue")
                        .HasColumnType("double");

                    b.Property<double?>("MinValue")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OperationPointId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValidationErrorMessage")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ValidationRule")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("Name");

                    b.HasIndex("OperationPointId");

                    b.HasIndex("Order");

                    b.HasIndex("Type");

                    b.ToTable("ImportedComprehensiveTrainingParameters");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerValidationRules")
                        .HasColumnType("json");

                    b.Property<decimal?>("CSharpDirectScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("CodeFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ComprehensiveTrainingId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("DifficultyLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("DocumentFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EstimatedMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<string>("ExpectedOutput")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OriginalCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OriginalQuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("OriginalUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProgramInput")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("QuestionConfig")
                        .HasColumnType("json");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(10.0m);

                    b.Property<string>("ScoringRules")
                        .HasColumnType("json");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("StandardAnswer")
                        .HasColumnType("json");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ComprehensiveTrainingId");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("ModuleId");

                    b.HasIndex("OriginalQuestionId");

                    b.HasIndex("QuestionType");

                    b.HasIndex("SortOrder");

                    b.HasIndex("SubjectId");

                    b.ToTable("ImportedComprehensiveTrainingQuestions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComprehensiveTrainingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MinScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("OriginalSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(20.0m);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("SubjectConfig")
                        .HasColumnType("json");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.HasKey("Id");

                    b.HasIndex("ComprehensiveTrainingId");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("OriginalSubjectId");

                    b.HasIndex("SortOrder");

                    b.HasIndex("SubjectType");

                    b.ToTable("ImportedComprehensiveTrainingSubjects");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowPractice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRetake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExamCategory")
                        .HasColumnType("int");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("UnifiedExam");

                    b.Property<string>("ExtendedConfig")
                        .HasColumnType("json");

                    b.Property<string>("ImportErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ImportFileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("ImportFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImportStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Success");

                    b.Property<string>("ImportVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("1.0");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ImportedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxRetakeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("OriginalCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OriginalCreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("OriginalExamId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("OriginalPublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OriginalPublishedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OriginalUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PassingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(6,2)")
                        .HasDefaultValue(60.0m);

                    b.Property<bool>("RandomizeQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("TotalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(6,2)")
                        .HasDefaultValue(100.0m);

                    b.HasKey("Id");

                    b.HasIndex("ExamType");

                    b.HasIndex("ImportStatus");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("ImportedBy");

                    b.HasIndex("Name");

                    b.HasIndex("OriginalExamId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("ImportedExams");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("OriginalModuleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("Order");

                    b.HasIndex("OriginalModuleId");

                    b.HasIndex("Type");

                    b.ToTable("ImportedModules");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedOperationPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("OriginalOperationPointId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.0m);

                    b.HasKey("Id");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("ModuleType");

                    b.HasIndex("Order");

                    b.HasIndex("OriginalOperationPointId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ImportedOperationPoints");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EnumOptions")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<double?>("MaxValue")
                        .HasColumnType("double");

                    b.Property<double?>("MinValue")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OperationPointId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValidationErrorMessage")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ValidationRule")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("Name");

                    b.HasIndex("OperationPointId");

                    b.HasIndex("Order");

                    b.HasIndex("Type");

                    b.ToTable("ImportedParameters");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerValidationRules")
                        .HasColumnType("json");

                    b.Property<decimal?>("CSharpDirectScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("CSharpQuestionType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodeBlanks")
                        .HasColumnType("json");

                    b.Property<string>("CodeFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("DifficultyLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("DocumentFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EstimatedMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedOutput")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OriginalCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OriginalQuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("OriginalUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProgramInput")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("QuestionConfig")
                        .HasColumnType("json");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(10.0m);

                    b.Property<string>("ScoringRules")
                        .HasColumnType("json");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("StandardAnswer")
                        .HasColumnType("json");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("ModuleId");

                    b.HasIndex("OriginalQuestionId");

                    b.HasIndex("QuestionType");

                    b.HasIndex("SortOrder");

                    b.HasIndex("SubjectId");

                    b.ToTable("ImportedQuestions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MinScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("OriginalSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(20.0m);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("SubjectConfig")
                        .HasColumnType("json");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("ImportedAt");

                    b.HasIndex("OriginalSubjectId");

                    b.HasIndex("SortOrder");

                    b.HasIndex("SubjectType");

                    b.ToTable("ImportedSubjects");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("EnableTrial")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImportErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ImportFileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("ImportFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImportStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImportVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ImportedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("OriginalCreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OriginalLastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OriginalSpecializedTrainingId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("RandomizeQuestions")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<double>("TotalScore")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ImportedBy");

                    b.ToTable("ImportedSpecializedTrainings");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OriginalModuleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Score")
                        .HasColumnType("double");

                    b.Property<int>("SpecializedTrainingId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializedTrainingId");

                    b.ToTable("ImportedSpecializedTrainingModules");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingOperationPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OriginalOperationPointId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ImportedSpecializedTrainingOperationPoints");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EnumOptions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("double");

                    b.Property<double?>("MinValue")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OperationPointId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValidationErrorMessage")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ValidationRule")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("OperationPointId");

                    b.ToTable("ImportedSpecializedTrainingParameters");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CSharpDirectScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("CodeFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("DocumentFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EstimatedMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedOutput")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OriginalQuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProgramInput")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("SpecializedTrainingId")
                        .HasColumnType("int");

                    b.Property<string>("StandardAnswer")
                        .HasColumnType("json");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SpecializedTrainingId");

                    b.ToTable("ImportedSpecializedTrainingQuestions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.MockExam.MockExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtractedQuestions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("RandomizeQuestions")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Created");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<double>("TotalScore")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.ToTable("MockExams");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.MockExam.MockExamConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("DurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120);

                    b.Property<string>("ExtractionRules")
                        .HasColumnType("json");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PassingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(60);

                    b.Property<bool>("RandomizeQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<double>("TotalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(100.0);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsEnabled");

                    b.ToTable("MockExamConfigurations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.MockExamCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BenchSuiteScoringResult")
                        .HasColumnType("json");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("MockExamId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("MockExamId");

                    b.HasIndex("Status");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("StudentUserId", "MockExamId")
                        .IsUnique();

                    b.ToTable("MockExamCompletions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.InvitationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MaxUsage")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("InvitationCodes");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.NonOrganizationStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("RealName");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("NonOrganizationStudents");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.NonOrganizationStudentOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NonOrganizationStudentId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive");

                    b.HasIndex("NonOrganizationStudentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("NonOrganizationStudentId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("NonOrganizationStudentOrganizations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Name");

                    b.HasIndex("ParentOrganizationId");

                    b.HasIndex("Type");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.OrganizationMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RealName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("Username", "OrganizationId")
                        .IsUnique();

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.StudentOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvitationCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvitationCodeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentOrganizations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.TeacherOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TeacherId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("TeacherOrganizations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.PreConfiguredUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AppliedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("AppliedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RealName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppliedToUserId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsApplied");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("Username", "OrganizationId")
                        .IsUnique();

                    b.ToTable("PreConfiguredUsers");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.SpecialPracticeCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CompletionPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PracticeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StudentUserId");

                    b.ToTable("SpecialPracticeCompletions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowMultipleDevices")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFirstLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxDeviceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RealName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WeChatOpenId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("WeChatOpenId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceFingerprint")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTrusted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeviceFingerprint")
                        .IsUnique();

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsTrusted");

                    b.HasIndex("LastUsedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "DeviceFingerprint")
                        .IsUnique();

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LogoutAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("SessionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastActivityAt");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.HasIndex("SessionType");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Admin.SystemConfiguration", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExaminaWebApplication.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ComprehensiveTrainingCompletion", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ExamCompletion", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ExamSchoolAssociation", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Exam");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.ComprehensiveTrainingFileAssociation", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", "ComprehensiveTraining")
                        .WithMany("FileAssociations")
                        .HasForeignKey("ComprehensiveTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.FileUpload.UploadedFile", "File")
                        .WithMany("ComprehensiveTrainingAssociations")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComprehensiveTraining");

                    b.Navigation("Creator");

                    b.Navigation("File");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.ExamFileAssociation", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedExam", "Exam")
                        .WithMany("FileAssociations")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.FileUpload.UploadedFile", "File")
                        .WithMany("ExamAssociations")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Exam");

                    b.Navigation("File");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.SpecializedTrainingFileAssociation", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.FileUpload.UploadedFile", "File")
                        .WithMany("SpecializedTrainingAssociations")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTraining", "SpecializedTraining")
                        .WithMany("FileAssociations")
                        .HasForeignKey("SpecializedTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("File");

                    b.Navigation("SpecializedTraining");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.UploadedFile", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExaminaWebApplication.Models.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deleter");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Importer")
                        .WithMany()
                        .HasForeignKey("ImportedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Importer");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingModule", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", "ComprehensiveTraining")
                        .WithMany("Modules")
                        .HasForeignKey("ComprehensiveTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComprehensiveTraining");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingOperationPoint", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingQuestion", "Question")
                        .WithMany("OperationPoints")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingParameter", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingOperationPoint", "OperationPoint")
                        .WithMany("Parameters")
                        .HasForeignKey("OperationPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationPoint");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingQuestion", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", "ComprehensiveTraining")
                        .WithMany("Questions")
                        .HasForeignKey("ComprehensiveTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingModule", "Module")
                        .WithMany("Questions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ImportedComprehensiveTrainingQuestions_ImportedComprehensiv~1");

                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingSubject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ImportedComprehensiveTrainingQuestions_ImportedComprehensiv~2");

                    b.Navigation("ComprehensiveTraining");

                    b.Navigation("Module");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingSubject", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", "ComprehensiveTraining")
                        .WithMany("Subjects")
                        .HasForeignKey("ComprehensiveTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComprehensiveTraining");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedExam", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Importer")
                        .WithMany()
                        .HasForeignKey("ImportedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Importer");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedModule", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedExam", "Exam")
                        .WithMany("Modules")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedOperationPoint", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedQuestion", "Question")
                        .WithMany("OperationPoints")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedParameter", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedOperationPoint", "OperationPoint")
                        .WithMany("Parameters")
                        .HasForeignKey("OperationPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationPoint");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedQuestion", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedModule", "Module")
                        .WithMany("Questions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedSubject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Exam");

                    b.Navigation("Module");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedSubject", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedExam.ImportedExam", "Exam")
                        .WithMany("Subjects")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTraining", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Importer")
                        .WithMany()
                        .HasForeignKey("ImportedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Importer");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingModule", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTraining", "SpecializedTraining")
                        .WithMany("Modules")
                        .HasForeignKey("SpecializedTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecializedTraining");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingOperationPoint", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingQuestion", "Question")
                        .WithMany("OperationPoints")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingParameter", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingOperationPoint", "OperationPoint")
                        .WithMany("Parameters")
                        .HasForeignKey("OperationPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationPoint");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingQuestion", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingModule", "Module")
                        .WithMany("Questions")
                        .HasForeignKey("ModuleId");

                    b.HasOne("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTraining", "SpecializedTraining")
                        .WithMany("Questions")
                        .HasForeignKey("SpecializedTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ImportedSpecializedTrainingQuestions_ImportedSpecializedTra~1");

                    b.Navigation("Module");

                    b.Navigation("SpecializedTraining");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.MockExam.MockExam", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.MockExam.MockExamConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.MockExam.MockExamConfiguration", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.MockExamCompletion", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.MockExam.MockExam", "MockExam")
                        .WithMany()
                        .HasForeignKey("MockExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MockExam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.InvitationCode", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "Organization")
                        .WithMany("InvitationCodes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.NonOrganizationStudent", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");

                    b.Navigation("Updater");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.NonOrganizationStudentOrganization", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.NonOrganizationStudent", "NonOrganizationStudent")
                        .WithMany()
                        .HasForeignKey("NonOrganizationStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("NonOrganizationStudent");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.Organization", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "ParentOrganization")
                        .WithMany("ChildOrganizations")
                        .HasForeignKey("ParentOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.OrganizationMember", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ExaminaWebApplication.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");

                    b.Navigation("Organization");

                    b.Navigation("Updater");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.StudentOrganization", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.Organization.InvitationCode", "InvitationCode")
                        .WithMany("StudentOrganizations")
                        .HasForeignKey("InvitationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "Organization")
                        .WithMany("StudentOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitationCode");

                    b.Navigation("Organization");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.TeacherOrganization", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "Organization")
                        .WithMany("TeacherOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Organization");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.PreConfiguredUser", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "AppliedToUser")
                        .WithMany()
                        .HasForeignKey("AppliedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ExaminaWebApplication.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExaminaWebApplication.Models.Organization.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppliedToUser");

                    b.Navigation("Creator");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.SpecialPracticeCompletion", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.UserDevice", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.UserSession", b =>
                {
                    b.HasOne("ExaminaWebApplication.Models.UserDevice", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ExaminaWebApplication.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.FileUpload.UploadedFile", b =>
                {
                    b.Navigation("ComprehensiveTrainingAssociations");

                    b.Navigation("ExamAssociations");

                    b.Navigation("SpecializedTrainingAssociations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining", b =>
                {
                    b.Navigation("FileAssociations");

                    b.Navigation("Modules");

                    b.Navigation("Questions");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingModule", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingOperationPoint", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingQuestion", b =>
                {
                    b.Navigation("OperationPoints");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTrainingSubject", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedExam", b =>
                {
                    b.Navigation("FileAssociations");

                    b.Navigation("Modules");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedModule", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedOperationPoint", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedQuestion", b =>
                {
                    b.Navigation("OperationPoints");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedExam.ImportedSubject", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTraining", b =>
                {
                    b.Navigation("FileAssociations");

                    b.Navigation("Modules");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingModule", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingOperationPoint", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTrainingQuestion", b =>
                {
                    b.Navigation("OperationPoints");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.InvitationCode", b =>
                {
                    b.Navigation("StudentOrganizations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.Organization.Organization", b =>
                {
                    b.Navigation("ChildOrganizations");

                    b.Navigation("InvitationCodes");

                    b.Navigation("StudentOrganizations");

                    b.Navigation("TeacherOrganizations");
                });

            modelBuilder.Entity("ExaminaWebApplication.Models.User", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
