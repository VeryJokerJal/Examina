@using ExaminaWebApplication.Models.Organization.ViewModels
@model MemberManagementViewModel
@{
    ViewData["Title"] = "学生成员管理";
}

<div class="container-fluid">
    <!-- 页面标题 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">
                        <i class="bi bi-people me-2"></i>学生成员管理
                    </h2>
                    <p class="text-muted mb-0">管理系统中的学生成员信息</p>
                </div>
                <div>
                    <button type="button" class="glass-btn glass-btn-primary" onclick="showBatchAddMemberModal()">
                        <i class="bi bi-person-plus me-2"></i>批量添加成员
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 统计信息 -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-people text-primary" style="font-size: 2rem;"></i>
                    <h4 class="mt-2 mb-1">@Model.Members.Count</h4>
                    <p class="text-muted mb-0">总成员数</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-person-check text-success" style="font-size: 2rem;"></i>
                    <h4 class="mt-2 mb-1">@Model.Members.Count(m => m.IsActive)</h4>
                    <p class="text-muted mb-0">活跃成员</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-telephone text-info" style="font-size: 2rem;"></i>
                    <h4 class="mt-2 mb-1">@Model.Members.Count(m => !string.IsNullOrEmpty(m.PhoneNumber))</h4>
                    <p class="text-muted mb-0">已设置手机号</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-clock text-warning" style="font-size: 2rem;"></i>
                    <h4 class="mt-2 mb-1">@Model.Members.Count(m => m.JoinedAt >= DateTime.Today.AddDays(-7))</h4>
                    <p class="text-muted mb-0">本周新增</p>
                </div>
            </div>
        </div>
    </div>

    <!-- 成员列表 -->
    <div class="glass-card">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-list-ul me-2"></i>成员列表
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Members.Any())
            {
                <div>
                    <table class="table glass-table">
                        <thead>
                            <tr>
                                <th>真实姓名</th>
                                <th>手机号</th>
                                <th>加入时间</th>
                                <th>状态</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var member in Model.Members.OrderByDescending(m => m.JoinedAt))
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-person me-2"></i>
                                            <span>@(member.RealName ?? "未设置")</span>
                                        </div>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(member.PhoneNumber))
                                        {
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-telephone me-1"></i>
                                                <span>@member.PhoneNumber</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">未设置</span>
                                        }
                                    </td>
                                    <td>
                                        <small>@member.JoinedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                    </td>
                                    <td>
                                        @if (member.IsActive)
                                        {
                                            <span class="badge bg-success">
                                                <i class="bi bi-check-circle me-1"></i>激活
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">
                                                <i class="bi bi-x-circle me-1"></i>已停用
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        @if (member.IsActive)
                                        {
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm btn-outline-primary"
                                                        onclick="showEditMemberModal(@member.Id, '@(member.RealName ?? "")', '@(member.PhoneNumber ?? "")')"
                                                        title="编辑成员信息">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-danger"
                                                        onclick="deleteMember(@member.Id, '@(member.RealName ?? "")')"
                                                        title="删除成员">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                    <h5 class="text-muted mt-3">暂无成员</h5>
                    <p class="text-muted">点击上方按钮开始添加成员</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- 编辑成员模态框 -->
<div class="modal fade" id="editMemberModal" tabindex="-1" aria-labelledby="editMemberModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content glass-modal">
            <div class="modal-header">
                <h5 class="modal-title" id="editMemberModalLabel">
                    <i class="bi bi-pencil me-2"></i>编辑成员信息
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editMemberForm">
                    <input type="hidden" id="editMemberId" />
                    <div class="mb-3">
                        <label for="editRealName" class="form-label">真实姓名</label>
                        <input type="text" class="form-control" id="editRealName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editPhoneNumber" class="form-label">手机号</label>
                        <input type="tel" class="form-control" id="editPhoneNumber">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" onclick="updateMember()">保存更改</button>
            </div>
        </div>
    </div>
</div>

<!-- 批量添加成员模态框 -->
<div class="modal fade" id="batchAddMemberModal" tabindex="-1" aria-labelledby="batchAddMemberModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-modal">
            <div class="modal-header">
                <h5 class="modal-title" id="batchAddMemberModalLabel">
                    <i class="bi bi-person-plus me-2"></i>批量添加成员
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="memberData" class="form-label">成员信息</label>
                    <textarea class="form-control" id="memberData" rows="10" 
                              placeholder="请输入成员信息，每行一个成员，格式：真实姓名,手机号&#10;例如：&#10;张三,13800138000&#10;李四,13900139000"></textarea>
                    <div class="form-text">
                        每行一个成员，格式：真实姓名,手机号（手机号可选）
                    </div>
                </div>
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="overwriteExisting">
                        <label class="form-check-label" for="overwriteExisting">
                            覆盖已存在的成员信息
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" onclick="batchAddMembers()">添加成员</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // 显示编辑成员模态框
        function showEditMemberModal(id, realName, phoneNumber) {
            document.getElementById('editMemberId').value = id;
            document.getElementById('editRealName').value = realName || '';
            document.getElementById('editPhoneNumber').value = phoneNumber || '';
            
            const modal = new bootstrap.Modal(document.getElementById('editMemberModal'));
            modal.show();
        }

        // 显示批量添加成员模态框
        function showBatchAddMemberModal() {
            const modal = new bootstrap.Modal(document.getElementById('batchAddMemberModal'));
            modal.show();
        }

        // 更新成员信息
        async function updateMember() {
            const memberId = document.getElementById('editMemberId').value;
            const realName = document.getElementById('editRealName').value.trim();
            const phoneNumber = document.getElementById('editPhoneNumber').value.trim();

            if (!realName) {
                showToast('请输入真实姓名', 'error');
                return;
            }

            try {
                const response = await fetch('/StudentMemberManagement/UpdateMember', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        memberId: parseInt(memberId),
                        realName: realName,
                        phoneNumber: phoneNumber || null
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editMemberModal')).hide();
                    location.reload();
                } else {
                    showToast(result.message || '更新失败', 'error');
                }
            } catch (error) {
                console.error('更新成员信息失败:', error);
                showToast('网络错误，请稍后重试', 'error');
            }
        }

        // 删除成员
        async function deleteMember(id, realName) {
            if (!confirm(`确定要删除成员 "${realName}" 吗？此操作不可撤销。`)) {
                return;
            }

            try {
                const response = await fetch(`/StudentMemberManagement/DeleteMember/${id}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message, 'success');
                    location.reload();
                } else {
                    showToast(result.message || '删除失败', 'error');
                }
            } catch (error) {
                console.error('删除成员失败:', error);
                showToast('网络错误，请稍后重试', 'error');
            }
        }

        // 批量添加成员
        async function batchAddMembers() {
            const memberData = document.getElementById('memberData').value.trim();
            const overwriteExisting = document.getElementById('overwriteExisting').checked;

            if (!memberData) {
                showToast('请输入成员信息', 'error');
                return;
            }

            // 解析成员数据
            const lines = memberData.split('\n').filter(line => line.trim());
            const memberEntries = [];

            for (const line of lines) {
                const parts = line.split(',').map(part => part.trim());
                if (parts.length >= 1) {
                    memberEntries.push({
                        realName: parts[0],
                        phoneNumber: parts[1] || null
                    });
                }
            }

            if (memberEntries.length === 0) {
                showToast('没有有效的成员信息', 'error');
                return;
            }

            try {
                const response = await fetch('/StudentMemberManagement/BatchAddMembers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        memberEntries: memberEntries,
                        overwriteExisting: overwriteExisting
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message, 'success');

                    // 关闭模态框
                    const modal = bootstrap.Modal.getInstance(document.getElementById('batchAddMemberModal'));
                    modal.hide();

                    // 清空表单
                    document.getElementById('memberData').value = '';
                    document.getElementById('overwriteExisting').checked = false;

                    // 刷新页面
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || '批量添加失败，请稍后重试', 'error');
                }
            } catch (error) {
                console.error('批量添加成员失败:', error);
                showToast('批量添加失败，请稍后重试', 'error');
            }
        }

        // 通知函数
        function showToast(message, type) {
            // 简单的通知实现，可以替换为更复杂的Toast组件
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed"
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', alertHtml);

            // 自动移除通知
            setTimeout(() => {
                const alerts = document.querySelectorAll('.alert');
                if (alerts.length > 0) {
                    alerts[alerts.length - 1].remove();
                }
            }, 5000);
        }
    </script>
}
