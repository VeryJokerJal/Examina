@model ExaminaWebApplication.Controllers.StatisticsViewModel
@{
    ViewData["Title"] = "统计分析";
}

<!-- 页面标题 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-graph-up me-2 text-primary"></i>统计分析
        </h1>
        <p class="text-muted mb-0">系统数据概览和分析</p>
    </div>
    <div>
        <button class="glass-btn glass-btn-primary" onclick="refreshData()">
            <i class="bi bi-arrow-clockwise"></i> 刷新数据
        </button>
    </div>
</div>

<!-- 系统概览卡片 -->
<div class="row g-4 mb-4">
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-clipboard-check text-primary mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-primary">@Model.SystemStatistics.TotalExams</h4>
                <p class="text-muted mb-0">试卷总数</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-question-circle text-success mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-success">@Model.SystemStatistics.TotalQuestions</h4>
                <p class="text-muted mb-0">题目总数</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-people text-info mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-info">@Model.UserStatistics.TotalUsers</h4>
                <p class="text-muted mb-0">用户总数</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-folder text-warning mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-warning">@Model.SystemStatistics.TotalSubjects</h4>
                <p class="text-muted mb-0">科目总数</p>
            </div>
        </div>
    </div>
</div>

<!-- 图表区域 -->
<div class="row g-4">
    <!-- 试卷状态分布 -->
    <div class="col-md-6">
        <div class="glass-card">
            <div class="card-header glass-card-header">
                <h5 class="mb-0">
                    <i class="bi bi-pie-chart me-2"></i>试卷状态分布
                </h5>
            </div>
            <div class="card-body">
                <canvas id="examStatusChart" width="400" height="300"></canvas>
            </div>
        </div>
    </div>

    <!-- 题目类型分布 -->
    <div class="col-md-6">
        <div class="glass-card">
            <div class="card-header glass-card-header">
                <h5 class="mb-0">
                    <i class="bi bi-bar-chart me-2"></i>题目类型分布
                </h5>
            </div>
            <div class="card-body">
                <canvas id="questionTypeChart" width="400" height="300"></canvas>
            </div>
        </div>
    </div>

    <!-- 试卷类型分布 -->
    <div class="col-md-6">
        <div class="glass-card">
            <div class="card-header glass-card-header">
                <h5 class="mb-0">
                    <i class="bi bi-graph-up me-2"></i>试卷类型分布
                </h5>
            </div>
            <div class="card-body">
                <canvas id="examTypeChart" width="400" height="300"></canvas>
            </div>
        </div>
    </div>

    <!-- 月度试卷创建趋势 -->
    <div class="col-md-6">
        <div class="glass-card">
            <div class="card-header glass-card-header">
                <h5 class="mb-0">
                    <i class="bi bi-graph-up-arrow me-2"></i>月度试卷创建趋势
                </h5>
            </div>
            <div class="card-body">
                <canvas id="monthlyExamChart" width="400" height="300"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- 详细统计链接 -->
<div class="row g-4 mt-4">
    <div class="col-md-6">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-clipboard-data text-primary mb-3" style="font-size: 3rem;"></i>
                <h5 class="fw-bold">试卷详细统计</h5>
                <p class="text-muted">查看试卷相关的详细统计信息</p>
                <a href="@Url.Action("ExamStatistics")" class="glass-btn glass-btn-primary">
                    <i class="bi bi-arrow-right"></i> 查看详情
                </a>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-gear text-success mb-3" style="font-size: 3rem;"></i>
                <h5 class="fw-bold">系统详细统计</h5>
                <p class="text-muted">查看系统运行的详细统计信息</p>
                <a href="@Url.Action("SystemStatistics")" class="glass-btn glass-btn-success">
                    <i class="bi bi-arrow-right"></i> 查看详情
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // 页面加载完成后初始化图表
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
        });

        // 初始化所有图表
        function initializeCharts() {
            initExamStatusChart();
            initQuestionTypeChart();
            initExamTypeChart();
            initMonthlyExamChart();
        }

        // 试卷状态分布饼图
        function initExamStatusChart() {
            const ctx = document.getElementById('examStatusChart').getContext('2d');
            const examsByStatus = @Html.Raw(Json.Serialize(Model.SystemStatistics.ExamsByStatus));
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(examsByStatus),
                    datasets: [{
                        data: Object.values(examsByStatus),
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.8)',
                            'rgba(255, 99, 132, 0.8)',
                            'rgba(255, 205, 86, 0.8)',
                            'rgba(75, 192, 192, 0.8)'
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 205, 86, 1)',
                            'rgba(75, 192, 192, 1)'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // 题目类型分布柱状图
        function initQuestionTypeChart() {
            const ctx = document.getElementById('questionTypeChart').getContext('2d');
            const questionsByType = @Html.Raw(Json.Serialize(Model.SystemStatistics.QuestionsByType));
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(questionsByType),
                    datasets: [{
                        label: '题目数量',
                        data: Object.values(questionsByType),
                        backgroundColor: 'rgba(75, 192, 192, 0.8)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // 试卷类型分布饼图
        function initExamTypeChart() {
            const ctx = document.getElementById('examTypeChart').getContext('2d');
            const examsByType = @Html.Raw(Json.Serialize(Model.ExamStatistics.ExamsByType));
            
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: Object.keys(examsByType),
                    datasets: [{
                        data: Object.values(examsByType),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.8)',
                            'rgba(54, 162, 235, 0.8)',
                            'rgba(255, 205, 86, 0.8)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 205, 86, 1)'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // 月度试卷创建趋势线图
        function initMonthlyExamChart() {
            const ctx = document.getElementById('monthlyExamChart').getContext('2d');
            const examsByMonth = @Html.Raw(Json.Serialize(Model.ExamStatistics.ExamsByMonth));
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: Object.keys(examsByMonth),
                    datasets: [{
                        label: '试卷数量',
                        data: Object.values(examsByMonth),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // 刷新数据
        async function refreshData() {
            try {
                showNotification('正在刷新数据...', 'info');
                
                const response = await fetch('@Url.Action("GetStatisticsData")');
                if (response.ok) {
                    showNotification('数据刷新成功！', 'success');
                    // 重新加载页面以更新数据
                    location.reload();
                } else {
                    showNotification('数据刷新失败！', 'error');
                }
            } catch (error) {
                console.error('刷新数据失败:', error);
                showNotification('数据刷新失败！', 'error');
            }
        }
    </script>
}
