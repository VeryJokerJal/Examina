@model ExaminaWebApplication.Models.ImportedSpecializedTraining.ImportedSpecializedTraining
@{
    ViewData["Title"] = $"专项训练详情 - {Model.Name}";
}

<style>
    /* 试用功能按钮样式 */
    .trial-toggle-btn {
        transition: all 0.3s ease;
        border-radius: 20px;
        padding: 0.375rem 0.75rem;
    }

    .trial-toggle-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    /* 文件项样式优化 */
    .file-item {
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
    }

    .file-item:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    /* 训练名称编辑样式 */
    .specialized-training-name-container {
        min-height: 38px;
    }

    .training-name-text {
        cursor: pointer;
        padding: 0.375rem 0;
        border-radius: 0.375rem;
        transition: all 0.3s ease;
    }

    .training-name-text:hover {
        background: rgba(255, 255, 255, 0.05);
        padding-left: 0.5rem;
        padding-right: 0.5rem;
    }

    .edit-name-btn {
        opacity: 0;
        transition: all 0.3s ease;
        transform: scale(0.8);
    }

    .name-display-mode:hover .edit-name-btn {
        opacity: 1;
        transform: scale(1);
    }

    .name-edit-mode .glass-input {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: inherit;
    }

    .name-edit-mode .glass-input:focus {
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(102, 126, 234, 0.5);
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    /* 响应式设计 */
    @@media (max-width: 768px) {
        .file-item {
            flex-direction: column;
            align-items: flex-start !important;
        }

        .file-actions {
            margin-top: 0.5rem;
            width: 100%;
        }

        .file-actions .glass-btn {
            margin-bottom: 0.25rem;
        }

        .trial-toggle-btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        /* 名称编辑响应式 */
        .specialized-training-name-container .input-group {
            flex-wrap: wrap;
        }

        .specialized-training-name-container .input-group .form-control {
            min-width: 200px;
            margin-bottom: 0.5rem;
        }

        .specialized-training-name-container .input-group .btn {
            flex: 1;
            min-width: 80px;
        }
    }

    @@media (max-width: 576px) {
        .file-actions {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .file-actions .glass-btn {
            width: 100%;
            margin: 0;
        }

        /* 小屏幕名称编辑优化 */
        .specialized-training-name-container .input-group {
            flex-direction: column;
        }

        .specialized-training-name-container .input-group .form-control {
            width: 100%;
            margin-bottom: 0.5rem;
        }

        .specialized-training-name-container .input-group .btn {
            width: 100%;
            margin-bottom: 0.25rem;
        }

        .edit-name-btn {
            opacity: 1 !important;
            transform: scale(1) !important;
        }

        .training-name-text {
            display: block;
            width: 100%;
            word-break: break-word;
        }
    }
</style>

<!-- 页面标题横幅 -->
<div class="glass-card glass-card-primary py-4 mb-4">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-6 fw-bold mb-2">
                    <i class="bi bi-target me-3"></i>@Model.Name
                </h1>
                <p class="lead mb-0">专项训练详细信息</p>
            </div>
            <div class="col-md-4 text-end">
                <a asp-action="SpecializedTraining" class="glass-btn me-2">
                    <i class="bi bi-arrow-left me-1"></i>返回列表
                </a>
                <button type="button" class="glass-btn glass-btn-danger" 
                        onclick="deleteSpecializedTraining(@Model.Id, '@Model.Name')">
                    <i class="bi bi-trash me-1"></i>删除
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 主要内容区域 -->
<div class="container">
    <!-- 基本信息 -->
    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="glass-card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-info-circle me-2"></i>基本信息
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <dl class="row">
                                <dt class="col-sm-4">训练名称:</dt>
                                <dd class="col-sm-8">
                                    <div class="specialized-training-name-container">
                                        <!-- 显示模式 -->
                                        <div class="name-display-mode" id="nameDisplayMode">
                                            <div class="d-flex align-items-center">
                                                <span class="training-name-text fw-medium" id="trainingNameText">@Model.Name</span>
                                                <button type="button" class="btn btn-sm btn-outline-primary ms-2 edit-name-btn"
                                                        onclick="enterEditMode()" title="编辑训练名称">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- 编辑模式 -->
                                        <div class="name-edit-mode d-none" id="nameEditMode">
                                            <div class="input-group">
                                                <input type="text" class="form-control glass-input" id="trainingNameInput"
                                                       value="@Model.Name" maxlength="200" placeholder="请输入训练名称">
                                                <button type="button" class="btn btn-success" onclick="saveTrainingName()" title="保存">
                                                    <i class="bi bi-check"></i>
                                                </button>
                                                <button type="button" class="btn btn-secondary" onclick="cancelEditMode()" title="取消">
                                                    <i class="bi bi-x"></i>
                                                </button>
                                            </div>
                                            <small class="text-muted mt-1">按Enter保存，按Esc取消</small>
                                        </div>
                                    </div>
                                </dd>
                                
                                <dt class="col-sm-4">模块类型:</dt>
                                <dd class="col-sm-8">
                                    <span class="badge bg-info">@Model.ModuleType</span>
                                </dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <dl class="row">
                                <dt class="col-sm-4">状态:</dt>
                                <dd class="col-sm-8">
                                    @if (Model.IsEnabled)
                                    {
                                        <span class="badge bg-success">启用</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">禁用</span>
                                    }
                                </dd>
                                
                                <dt class="col-sm-4">随机题目:</dt>
                                <dd class="col-sm-8">
                                    @if (Model.RandomizeQuestions)
                                    {
                                        <span class="badge bg-warning">是</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">否</span>
                                    }
                                </dd>

                                <dt class="col-sm-4">试用功能:</dt>
                                <dd class="col-sm-8">
                                    <div class="d-flex align-items-center">
                                        @if (Model.EnableTrial)
                                        {
                                            <span class="badge bg-success me-2">开放试用</span>
                                            <button type="button" class="btn btn-sm btn-outline-warning trial-toggle-btn"
                                                    onclick="toggleTrialSetting(false)" title="禁用试用功能">
                                                <i class="bi bi-pause-circle me-1"></i>禁用试用
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning me-2">关闭试用</span>
                                            <button type="button" class="btn btn-sm btn-outline-success trial-toggle-btn"
                                                    onclick="toggleTrialSetting(true)" title="启用试用功能">
                                                <i class="bi bi-play-circle me-1"></i>启用试用
                                            </button>
                                        }
                                    </div>
                                </dd>

                                <dt class="col-sm-4">导入时间:</dt>
                                <dd class="col-sm-8">@Model.ImportedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>
                                
                                <dt class="col-sm-4">原始ID:</dt>
                                <dd class="col-sm-8">
                                    <code>@Model.OriginalSpecializedTrainingId</code>
                                </dd>
                                
                                <dt class="col-sm-4">导入版本:</dt>
                                <dd class="col-sm-8">@Model.ImportVersion</dd>
                            </dl>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <hr>
                        <h6>描述:</h6>
                        <p class="text-muted">@Model.Description</p>
                    }
                    
                    @if (!string.IsNullOrEmpty(Model.Tags))
                    {
                        <hr>
                        <h6>标签:</h6>
                        <div>
                            @foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                            {
                                <span class="badge bg-light text-dark me-1">#@tag.Trim()</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <div class="glass-card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-bar-chart me-2"></i>统计信息
                    </h5>
                </div>
                <div class="card-body">
                    <div class="text-center mb-4">
                        <i class="bi bi-puzzle display-4 text-primary mb-3"></i>
                        <h3 class="fw-bold">@Model.Modules.Count</h3>
                        <p class="text-muted mb-0">模块数量</p>
                    </div>

                    <hr>

                    <div class="text-center">
                        @if (Model.EnableTrial)
                        {
                            <i class="bi bi-play-circle display-4 text-success mb-2"></i>
                            <h5 class="fw-bold text-success">试用开放</h5>
                            <p class="text-muted mb-0">学生可以试用此训练</p>
                        }
                        else
                        {
                            <i class="bi bi-pause-circle display-4 text-warning mb-2"></i>
                            <h5 class="fw-bold text-warning">试用关闭</h5>
                            <p class="text-muted mb-0">学生无法试用此训练</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 模块列表 -->
    <div class="glass-card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="bi bi-puzzle me-2"></i>模块列表
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Modules.Any())
            {
                <div class="row">
                    @foreach (var module in Model.Modules.OrderBy(m => m.Order))
                    {
                        <div class="col-md-6 mb-3">
                            <div class="glass-card h-100">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        <i class="bi bi-puzzle-fill text-primary me-2"></i>@module.Name
                                    </h6>
                                    <p class="card-text text-muted">@module.Description</p>

                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted text-center">暂无模块数据</p>
            }
        </div>
    </div>

    <!-- 题目列表 -->
    <div class="glass-card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="bi bi-question-circle me-2"></i>题目列表
            </h5>
            <div>
                <input type="text" class="glass-input form-control-sm" placeholder="搜索题目..." id="searchQuestions" style="width: 200px;">
            </div>
        </div>
        <div class="card-body">
            @if (Model.Questions.Any())
            {
                <div class="glass-accordion" id="questionsAccordion">
                    @foreach (var question in Model.Questions.OrderBy(q => q.Order))
                    {
                        <div class="glass-accordion-item question-item" data-title="@question.Title.ToLower()">
                            <h2 class="glass-accordion-header">
                                <button class="glass-accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#question-@question.Id">
                                    <div class="d-flex justify-content-between align-items-center w-100 me-3">
                                        <div>
                                            <strong>@question.Title</strong>
                                            <small class="text-muted ms-2">(@question.Score 分)</small>
                                        </div>
                                        <div>
                                            <span class="badge bg-secondary">@question.OperationPoints.Count 操作点</span>
                                        </div>
                                    </div>
                                </button>
                            </h2>
                            <div id="question-@question.Id" class="glass-accordion-collapse collapse">
                                <div class="glass-accordion-body">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <h6>题目内容:</h6>
                                            <p class="text-muted">@question.Content</p>
                                            
                                            @if (!string.IsNullOrEmpty(question.StandardAnswer))
                                            {
                                                <h6>标准答案:</h6>
                                                <div class="glass-card p-3">
                                                    <pre>@question.StandardAnswer</pre>
                                                </div>
                                            }
                                        </div>
                                        <div class="col-md-4">
                                            <dl class="row">
                                                <dt class="col-6">必答题:</dt>
                                                <dd class="col-6">
                                                    @if (question.IsRequired)
                                                    {
                                                        <span class="badge bg-danger">是</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">否</span>
                                                    }
                                                </dd>
                                                
                                                <dt class="col-6">状态:</dt>
                                                <dd class="col-6">
                                                    @if (question.IsEnabled)
                                                    {
                                                        <span class="badge bg-success">启用</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">禁用</span>
                                                    }
                                                </dd>
                                            </dl>
                                        </div>
                                    </div>
                                    
                                    @if (question.OperationPoints.Any())
                                    {
                                        <hr>
                                        <h6>操作点列表:</h6>
                                        <div class="table-responsive">
                                            <table class="glass-table table-sm">
                                                <thead>
                                                    <tr>
                                                        <th>名称</th>
                                                        <th>描述</th>
                                                        <th>分值</th>
                                                        <th>参数数量</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var op in question.OperationPoints.OrderBy(op => op.Order))
                                                    {
                                                        <tr>
                                                            <td>@op.Name</td>
                                                            <td>@op.Description</td>
                                                            <td>@op.Score</td>
                                                            <td>@op.Parameters.Count</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted text-center">暂无题目数据</p>
            }
        </div>
    </div>

    <!-- 文件管理 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="glass-card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-files me-2"></i>文件管理
                    </h5>
                </div>
                <div class="card-body">
                    <!-- 文件上传组件 -->
                    @{
                        ViewData["ContainerId"] = "specialized-training-file-upload";
                        ViewData["Multiple"] = true;
                        ViewData["AutoUpload"] = false;
                    }
                    @await Html.PartialAsync("_FileUpload")

                    <!-- 已关联的文件列表 -->
                    <div id="associated-files-section" style="margin-top: 30px;">
                        <h6><i class="bi bi-link-45deg me-2"></i>已关联的文件</h6>
                        <div id="associated-files-list">
                            <div class="text-center text-muted py-3">
                                <i class="bi bi-inbox display-4 mb-2"></i>
                                <p>暂无关联文件</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 删除确认模态框 -->
<div class="modal fade glass-modal" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">确认删除</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>确定要删除专项训练 "<span id="deleteTrainingName"></span>" 吗？</p>
                <p class="text-danger"><i class="bi bi-exclamation-triangle me-1"></i>此操作不可撤销！</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">取消</button>
                <button type="button" class="glass-btn glass-btn-danger" id="confirmDeleteBtn">确认删除</button>
            </div>
        </div>
    </div>
</div>

<script>
// 文件上传完成后的回调
window.onFilesUploaded = function(uploadedFiles, failedFiles) {
    // 自动关联上传的文件到当前专项训练
    uploadedFiles.forEach(file => {
        associateFileToSpecializedTraining(file.fileId, 'Attachment');
    });

    // 刷新已关联文件列表
    loadAssociatedFiles();
};

// 关联文件到专项训练
function associateFileToSpecializedTraining(fileId, fileType = 'Attachment', purpose = '') {
    const formData = new FormData();
    formData.append('fileType', fileType);
    if (purpose) {
        formData.append('purpose', purpose);
    }

    fetch(`/api/fileupload/associate/specialized-training/@Model.Id/file/${fileId}`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            console.log('文件关联成功');
        } else {
            console.error('文件关联失败:', result.message);
        }
    })
    .catch(error => {
        console.error('文件关联过程中发生错误:', error);
    });
}

// 加载已关联的文件列表
function loadAssociatedFiles() {
    fetch(`/api/fileupload/specialized-training/@Model.Id/files`)
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                displayAssociatedFiles(result.data);
            } else {
                console.error('加载文件列表失败:', result.message);
            }
        })
        .catch(error => {
            console.error('加载文件列表过程中发生错误:', error);
        });
}

// 显示已关联的文件列表
function displayAssociatedFiles(files) {
    const container = document.getElementById('associated-files-list');

    // 过滤掉JSON导入文件（ImportFile类型的文件）
    const userFiles = files.filter(file =>
        file.fileType !== 'ImportFile' &&
        !file.originalFileName.toLowerCase().endsWith('.json') ||
        !file.description ||
        !file.description.includes('导入文件')
    );

    if (userFiles.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-3">
                <i class="bi bi-inbox display-4 mb-2"></i>
                <p>暂无用户上传的关联文件</p>
                <small class="text-muted">JSON导入文件不会在此处显示</small>
            </div>
        `;
        return;
    }

    const filesHtml = userFiles.map(file => `
        <div class="file-item d-flex justify-content-between align-items-center p-3 border rounded mb-2" data-file-id="${file.fileId}">
            <div class="file-info d-flex align-items-center">
                <i class="bi ${getFileIcon(file.originalFileName)} me-3 text-primary" style="font-size: 1.5rem;"></i>
                <div>
                    <div class="fw-medium">${file.originalFileName}</div>
                    <small class="text-muted">
                        ${formatFileSize(file.fileSize)} • ${new Date(file.uploadedAt).toLocaleString()}
                        ${file.isDeleted ? ' • <span class="text-danger">已删除</span>' : ''}
                    </small>
                    ${file.description ? `<br><small class="text-info">${file.description}</small>` : ''}
                </div>
            </div>
            <div class="file-actions">
                ${!file.isDeleted ? `
                    <a href="${file.downloadUrl}" class="glass-btn glass-btn-sm glass-btn-primary me-2" download>
                        <i class="bi bi-download"></i> 下载
                    </a>
                    <button type="button" class="glass-btn glass-btn-sm glass-btn-danger" onclick="removeFileAssociation(${file.fileId}, '${file.originalFileName}')">
                        <i class="bi bi-unlink"></i> 取消关联
                    </button>
                ` : `
                    <span class="badge bg-secondary">文件已删除</span>
                `}
            </div>
        </div>
    `).join('');

    container.innerHTML = filesHtml;
}

// 取消文件关联
function removeFileAssociation(fileId, fileName) {
    if (!confirm(`确定要取消文件"${fileName}"的关联吗？\n\n注意：如果此文件没有其他关联，文件记录将被删除。`)) {
        return;
    }

    // 显示加载状态
    const fileItem = document.querySelector(`[data-file-id="${fileId}"]`);
    if (fileItem) {
        fileItem.style.opacity = '0.5';
        const actionButtons = fileItem.querySelector('.file-actions');
        actionButtons.innerHTML = '<span class="text-muted"><i class="bi bi-hourglass-split me-1"></i>处理中...</span>';
    }

    fetch(`/api/fileupload/disassociate/specialized-training/@Model.Id/file/${fileId}`, {
        method: 'DELETE'
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            showMessage('文件关联已取消，如果文件没有其他关联，文件记录已被删除', 'success');
            // 延迟刷新以显示消息
            setTimeout(() => {
                loadAssociatedFiles();
            }, 1000);
        } else {
            showMessage('取消关联失败: ' + result.message, 'danger');
            // 恢复文件项状态
            if (fileItem) {
                fileItem.style.opacity = '1';
                loadAssociatedFiles(); // 重新加载以恢复按钮
            }
        }
    })
    .catch(error => {
        console.error('取消关联过程中发生错误:', error);
        showMessage('取消关联失败，请稍后重试', 'danger');
        // 恢复文件项状态
        if (fileItem) {
            fileItem.style.opacity = '1';
            loadAssociatedFiles(); // 重新加载以恢复按钮
        }
    });
}

// 获取文件图标
function getFileIcon(fileName) {
    const extension = fileName.split('.').pop().toLowerCase();
    const iconMap = {
        'pdf': 'bi-file-earmark-pdf',
        'doc': 'bi-file-earmark-word',
        'docx': 'bi-file-earmark-word',
        'xls': 'bi-file-earmark-excel',
        'xlsx': 'bi-file-earmark-excel',
        'ppt': 'bi-file-earmark-ppt',
        'pptx': 'bi-file-earmark-ppt',
        'zip': 'bi-file-earmark-zip',
        'rar': 'bi-file-earmark-zip',
        '7z': 'bi-file-earmark-zip',
        'jpg': 'bi-file-earmark-image',
        'jpeg': 'bi-file-earmark-image',
        'png': 'bi-file-earmark-image',
        'gif': 'bi-file-earmark-image',
        'bmp': 'bi-file-earmark-image',
        'mp4': 'bi-file-earmark-play',
        'avi': 'bi-file-earmark-play',
        'mov': 'bi-file-earmark-play',
        'wmv': 'bi-file-earmark-play',
        'mp3': 'bi-file-earmark-music',
        'wav': 'bi-file-earmark-music',
        'wma': 'bi-file-earmark-music',
        'txt': 'bi-file-earmark-text',
        'rtf': 'bi-file-earmark-text',
        'json': 'bi-file-earmark-code',
        'xml': 'bi-file-earmark-code'
    };
    return iconMap[extension] || 'bi-file-earmark';
}

// 格式化文件大小
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

document.addEventListener('DOMContentLoaded', function() {
    // 页面加载完成后加载已关联的文件
    loadAssociatedFiles();
    const searchInput = document.getElementById('searchQuestions');
    
    // 题目搜索功能
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const questionItems = document.querySelectorAll('.question-item');
        
        questionItems.forEach(item => {
            const title = item.getAttribute('data-title');
            item.style.display = title.includes(searchTerm) ? '' : 'none';
        });
    });
});

let deleteTrainingId = null;

function deleteSpecializedTraining(id, name) {
    deleteTrainingId = id;
    document.getElementById('deleteTrainingName').textContent = name;
    new bootstrap.Modal(document.getElementById('deleteModal')).show();
}

document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    if (deleteTrainingId) {
        fetch('@Url.Action("DeleteSpecializedTraining")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `id=${deleteTrainingId}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.href = '@Url.Action("SpecializedTraining")';
            } else {
                alert('删除失败：' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('删除失败，请稍后重试');
        });
        
        bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
    }
});

// 试用功能切换
function toggleTrialSetting(enableTrial) {
    const actionText = enableTrial ? '启用' : '禁用';
    const trainingName = '@Model.Name';

    if (!confirm(`确定要${actionText}专项训练"${trainingName}"的试用功能吗？`)) {
        return;
    }

    // 获取防伪令牌
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    fetch('@Url.Action("UpdateSpecializedTrainingTrialSetting")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': token
        },
        body: `id=@Model.Id&enableTrial=${enableTrial}&__RequestVerificationToken=${encodeURIComponent(token)}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showMessage(data.message, 'success');
            // 刷新页面以更新状态显示
            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            showMessage('操作失败：' + data.message, 'danger');
        }
    })
    .catch(error => {
        console.error('试用功能切换错误:', error);
        showMessage('操作失败，请稍后重试', 'danger');
    });
}

// 显示消息提示
function showMessage(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.top = '20px';
    alertDiv.style.right = '20px';
    alertDiv.style.zIndex = '9999';
    alertDiv.innerHTML = `
        <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(alertDiv);

    // 3秒后自动移除
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.parentNode.removeChild(alertDiv);
        }
    }, 3000);
}

// 训练名称编辑功能
function enterEditMode() {
    const displayMode = document.getElementById('nameDisplayMode');
    const editMode = document.getElementById('nameEditMode');
    const nameInput = document.getElementById('trainingNameInput');
    const currentName = document.getElementById('trainingNameText').textContent;

    // 切换显示模式
    displayMode.classList.add('d-none');
    editMode.classList.remove('d-none');

    // 设置输入框值并聚焦
    nameInput.value = currentName;
    nameInput.focus();
    nameInput.select();

    // 绑定键盘事件
    nameInput.onkeydown = function(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            saveTrainingName();
        } else if (event.key === 'Escape') {
            event.preventDefault();
            cancelEditMode();
        }
    };

    // 移动设备优化：自动调整输入框大小
    if (window.innerWidth <= 576) {
        nameInput.style.fontSize = '16px'; // 防止iOS缩放
        nameInput.setAttribute('autocomplete', 'off');
        nameInput.setAttribute('autocorrect', 'off');
        nameInput.setAttribute('autocapitalize', 'off');
        nameInput.setAttribute('spellcheck', 'false');
    }
}

function cancelEditMode() {
    const displayMode = document.getElementById('nameDisplayMode');
    const editMode = document.getElementById('nameEditMode');
    const nameInput = document.getElementById('trainingNameInput');

    // 切换显示模式
    editMode.classList.add('d-none');
    displayMode.classList.remove('d-none');

    // 清除键盘事件绑定
    nameInput.onkeydown = null;
}

function saveTrainingName() {
    const nameInput = document.getElementById('trainingNameInput');
    const newName = nameInput.value.trim();

    // 输入验证
    if (!newName) {
        showMessage('训练名称不能为空', 'danger');
        nameInput.focus();
        return;
    }

    if (newName.length > 200) {
        showMessage('训练名称长度不能超过200个字符', 'danger');
        nameInput.focus();
        return;
    }

    // 检查非法字符
    const forbiddenChars = ['<', '>', '"', "'", '&', '\\', '/', '?', '*', '|', ':', ';', '%'];
    if (forbiddenChars.some(char => newName.includes(char))) {
        showMessage('训练名称包含非法字符，请避免使用: < > " \' & \\ / ? * | : ; %', 'danger');
        nameInput.focus();
        return;
    }

    // 检查是否有变化
    const currentName = document.getElementById('trainingNameText').textContent;
    if (newName === currentName) {
        cancelEditMode();
        return;
    }

    // 显示保存状态
    const editMode = document.getElementById('nameEditMode');
    const saveBtn = editMode.querySelector('.btn-success');
    const cancelBtn = editMode.querySelector('.btn-secondary');
    const originalSaveBtnContent = saveBtn.innerHTML;

    saveBtn.innerHTML = '<i class="bi bi-hourglass-split"></i>';
    saveBtn.disabled = true;
    cancelBtn.disabled = true;
    nameInput.disabled = true;

    // 发送AJAX请求
    fetch(`/api/specialized-training/@Model.Id/name`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name: newName })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // 更新显示的名称
            document.getElementById('trainingNameText').textContent = data.updatedName || newName;

            // 更新页面标题中的名称
            const pageTitle = document.querySelector('h1.display-6');
            if (pageTitle) {
                pageTitle.innerHTML = `<i class="bi bi-target me-3"></i>${data.updatedName || newName}`;
            }

            // 切换回显示模式
            cancelEditMode();

            // 显示成功消息
            showMessage('训练名称更新成功', 'success');
        } else {
            showMessage('更新失败: ' + data.message, 'danger');
        }
    })
    .catch(error => {
        console.error('更新训练名称错误:', error);
        showMessage('更新失败，请稍后重试', 'danger');
    })
    .finally(() => {
        // 恢复所有按钮和输入框状态
        saveBtn.innerHTML = originalSaveBtnContent;
        saveBtn.disabled = false;
        cancelBtn.disabled = false;
        nameInput.disabled = false;
    });
}

// 页面初始化
document.addEventListener('DOMContentLoaded', function() {
    // 验证必要元素是否存在
    const nameDisplayMode = document.getElementById('nameDisplayMode');
    const nameEditMode = document.getElementById('nameEditMode');
    const trainingNameText = document.getElementById('trainingNameText');

    if (!nameDisplayMode || !nameEditMode || !trainingNameText) {
        console.warn('名称编辑功能相关元素未找到，功能可能不可用');
        return;
    }

    // 为训练名称文本添加点击编辑功能
    trainingNameText.addEventListener('click', function() {
        enterEditMode();
    });

    // 添加触摸设备优化
    if ('ontouchstart' in window) {
        const editBtn = document.querySelector('.edit-name-btn');
        if (editBtn) {
            editBtn.style.opacity = '1';
            editBtn.style.transform = 'scale(1)';
        }
    }

    console.log('专项训练详情页面初始化完成');
});
</script>

@Html.AntiForgeryToken()
