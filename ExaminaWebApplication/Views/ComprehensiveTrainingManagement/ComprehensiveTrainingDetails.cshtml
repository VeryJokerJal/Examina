@model ExaminaWebApplication.Models.ImportedComprehensiveTraining.ImportedComprehensiveTraining
@{
	ViewData["Title"] = $"综合训练详情 - {Model.Name}";
}

<!-- 页面标题横幅 -->
<div class="glass-card glass-card-primary py-4 mb-4">
	<div class="container">
		<div class="row align-items-center">
			<div class="col-md-8">
				<h1 class="display-6 fw-bold mb-2">
					<i class="bi bi-eye me-3"></i>综合训练详情
				</h1>
				<p class="lead mb-0">@Model.Name</p>
			</div>
			<div class="col-md-4 text-end">
				<a asp-action="ComprehensiveTrainingList" class="glass-btn me-2">
					<i class="bi bi-arrow-left me-1"></i>返回列表
				</a>
				<button type="button" class="glass-btn glass-btn-danger"
						onclick="deleteComprehensiveTraining(@Model.Id, '@Model.Name')">
					<i class="bi bi-trash me-1"></i>删除训练
				</button>
			</div>
		</div>
	</div>
</div>

<!-- 主要内容区域 -->
<div class="container">
	<!-- 综合训练基本信息 -->
	<div class="row mb-4">
		<div class="col-12">
			<div class="glass-card">
				<div class="card-header">
					<h5 class="card-title mb-0">
						<i class="bi bi-info-circle me-2"></i>基本信息
					</h5>
				</div>
				<div class="card-body">
					<div class="row">
						<div class="col-md-8">
							<h3 class="mb-3">@Model.Name</h3>
							@if (!string.IsNullOrEmpty(Model.Description))
							{
								<p class="text-muted mb-3">@Model.Description</p>
							}
							@if (!string.IsNullOrEmpty(Model.Tags))
							{
								<div class="mb-3">
									<strong>标签：</strong>
									@foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
									{
										<span class="badge bg-secondary me-1">@tag.Trim()</span>
									}
								</div>
							}
						</div>
						<div class="col-md-4">
							<div class="glass-card glass-card-accent">
								<div class="card-body text-center">
									<i class="bi bi-target text-primary mb-2" style="font-size: 2rem;"></i>
									<h5 class="text-primary">综合训练</h5>
									<small class="text-muted">@Model.ComprehensiveTrainingType</small>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- 训练配置信息 -->
	<div class="row mb-4">
		<div class="col-md-6">
			<div class="glass-card">
				<div class="card-header">
					<h5 class="card-title mb-0">
						<i class="bi bi-gear me-2"></i>训练配置
					</h5>
				</div>
				<div class="card-body">
					<div class="row g-3">
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-primary mb-1">@Model.TotalScore</div>
								<small class="text-muted">总分</small>
							</div>
						</div>
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-success mb-1">@Model.DurationMinutes</div>
								<small class="text-muted">时长(分钟)</small>
							</div>
						</div>
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-warning mb-1">@Model.PassingScore</div>
								<small class="text-muted">及格分</small>
							</div>
						</div>
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-info mb-1">@Model.Status</div>
								<small class="text-muted">状态</small>
							</div>
						</div>

						<!-- 试用设置 -->
						<div class="row mt-4">
							<div class="col-12">
								<div class="d-flex justify-content-between align-items-center p-3 bg-light rounded">
									<div>
										<h6 class="mb-1">
											<i class="bi bi-play-circle me-2"></i>试用功能
										</h6>
										<small class="text-muted">允许学生在正式考试前进行试用</small>
									</div>
									<div class="form-check form-switch">
										<input class="form-check-input" type="checkbox" id="enableTrialSwitch"
											   @(Model.EnableTrial ? "checked" : "")
											   onchange="updateTrialSetting(@Model.Id, this.checked)">
										<label class="form-check-label" for="enableTrialSwitch">
											<span id="trialStatusText">@(Model.EnableTrial ? "已启用" : "已禁用")</span>
										</label>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="col-md-6">
			<div class="glass-card">
				<div class="card-header">
					<h5 class="card-title mb-0">
						<i class="bi bi-bar-chart me-2"></i>内容统计
					</h5>
				</div>
				<div class="card-body">
					<div class="row g-3">
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-primary mb-1">@Model.Subjects.Count</div>
								<small class="text-muted">科目数</small>
							</div>
						</div>
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-success mb-1">@Model.Modules.Count</div>
								<small class="text-muted">模块数</small>
							</div>
						</div>
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-warning mb-1">@(Model.Subjects.Sum(s => s.Questions.Count) + Model.Modules.Sum(m => m.Questions.Count))</div>
								<small class="text-muted">题目数</small>
							</div>
						</div>
						<div class="col-6">
							<div class="text-center">
								<div class="h4 text-info mb-1">@(Model.Subjects.SelectMany(s => s.Questions).SelectMany(q => q.OperationPoints).Count() + Model.Modules.SelectMany(m => m.Questions).SelectMany(q => q.OperationPoints).Count())</div>
								<small class="text-muted">操作点数</small>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- 科目列表 -->
	@if (Model.Subjects.Any())
	{
		<div class="row mb-4">
			<div class="col-12">
				<div class="glass-card">
					<div class="card-header">
						<h5 class="card-title mb-0">
							<i class="bi bi-collection me-2"></i>科目列表
							<span class="badge bg-primary ms-2">@Model.Subjects.Count</span>
						</h5>
					</div>
					<div class="card-body">
						<div class="row">
							@foreach (var subject in Model.Subjects.OrderBy(s => s.SortOrder))
							{
								<div class="col-md-6 mb-3">
									<div class="glass-card glass-card-accent">
										<div class="card-body">
											<h6 class="card-title">
												<i class="bi bi-bookmark me-1"></i>@subject.SubjectName
											</h6>
											<p class="card-text small text-muted">@subject.Description</p>
											<div class="row text-center">
												<div class="col-4">
													<small class="text-muted">分值</small>
													<div class="fw-bold">@subject.Score</div>
												</div>
												<div class="col-4">
													<small class="text-muted">时长</small>
													<div class="fw-bold">@subject.DurationMinutes 分</div>
												</div>
												<div class="col-4">
													<small class="text-muted">题目</small>
													<div class="fw-bold">@subject.Questions.Count</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	}

	<!-- 模块列表 -->
	@if (Model.Modules.Any())
	{
		<div class="row mb-4">
			<div class="col-12">
				<div class="glass-card">
					<div class="card-header">
						<h5 class="card-title mb-0">
							<i class="bi bi-grid-3x3-gap me-2"></i>模块列表
							<span class="badge bg-success ms-2">@Model.Modules.Count</span>
						</h5>
					</div>
					<div class="card-body">
						<div class="row">
							@foreach (var module in Model.Modules.OrderBy(m => m.Order))
							{
								<div class="col-md-6 mb-3">
									<div class="glass-card glass-card-accent">
										<div class="card-body">
											<h6 class="card-title">
												<i class="bi bi-puzzle me-1"></i>@module.Name
											</h6>
											<p class="card-text small text-muted">@module.Description</p>
											<div class="row text-center">
												<div class="col-4">
													<small class="text-muted">类型</small>
													<div class="fw-bold">@module.Type</div>
												</div>
												<div class="col-4">
													<small class="text-muted">分值</small>
													<div class="fw-bold">@module.Score</div>
												</div>
												<div class="col-4">
													<small class="text-muted">题目</small>
													<div class="fw-bold">@module.Questions.Count</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	}

	<!-- 导入信息 -->
	<div class="row mb-4">
		<div class="col-12">
			<div class="glass-card">
				<div class="card-header">
					<h5 class="card-title mb-0">
						<i class="bi bi-download me-2"></i>导入信息
					</h5>
				</div>
				<div class="card-body">
					<div class="row">
						<div class="col-md-3">
							<small class="text-muted">导入时间</small>
							<div class="fw-bold">@Model.ImportedAt.ToString("yyyy-MM-dd HH:mm:ss")</div>
						</div>
						<div class="col-md-3">
							<small class="text-muted">文件名</small>
							<div class="fw-bold">@(Model.ImportFileName ?? "未知")</div>
						</div>
						<div class="col-md-3">
							<small class="text-muted">文件大小</small>
							<div class="fw-bold">@(Model.ImportFileSize > 0 ? $"{Model.ImportFileSize / 1024.0:F1} KB" : "未知")</div>
						</div>
						<div class="col-md-3">
							<small class="text-muted">导入状态</small>
							<div class="fw-bold">
								<span class="badge bg-success">@Model.ImportStatus</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- 删除确认模态框 -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content glass-modal">
			<div class="modal-header">
				<h5 class="modal-title" id="deleteModalLabel">确认删除</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>您确定要删除综合训练 "<span id="comprehensiveTrainingName"></span>" 吗？</p>
				<p class="text-danger"><small>此操作不可撤销，将删除所有相关的科目、模块、题目和操作点数据。</small></p>
			</div>
			<div class="modal-footer">
				<button type="button" class="glass-btn" data-bs-dismiss="modal">取消</button>
				<form id="deleteForm" method="post" style="display: inline;">
					@Html.AntiForgeryToken()
					<button type="submit" class="glass-btn glass-btn-danger">确认删除</button>
				</form>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		function deleteComprehensiveTraining(id, name) {
			document.getElementById('comprehensiveTrainingName').textContent = name;
			document.getElementById('deleteForm').action = '@Url.Action("DeleteComprehensiveTraining")/' + id;
			new bootstrap.Modal(document.getElementById('deleteModal')).show();
		}

		function updateTrialSetting(id, enableTrial) {
			// 显示加载状态
			const switchElement = document.getElementById('enableTrialSwitch');
			const statusText = document.getElementById('trialStatusText');
			const originalText = statusText.textContent;

			switchElement.disabled = true;
			statusText.textContent = '更新中...';

			// 创建表单数据
			const formData = new FormData();
			formData.append('id', id);
			formData.append('enableTrial', enableTrial);
			formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

			// 发送AJAX请求
			fetch('@Url.Action("UpdateTrialSetting")', {
				method: 'POST',
				body: formData
			})
			.then(response => response.json())
			.then(data => {
				if (data.success) {
					// 更新成功
					statusText.textContent = enableTrial ? '已启用' : '已禁用';

					// 显示成功提示
					showToast('success', data.message);
				} else {
					// 更新失败，恢复开关状态
					switchElement.checked = !enableTrial;
					statusText.textContent = originalText;

					// 显示错误提示
					showToast('error', data.message || '更新失败');
				}
			})
			.catch(error => {
				console.error('更新试用设置失败:', error);

				// 恢复开关状态
				switchElement.checked = !enableTrial;
				statusText.textContent = originalText;

				// 显示错误提示
				showToast('error', '网络错误，请稍后重试');
			})
			.finally(() => {
				// 恢复开关可用状态
				switchElement.disabled = false;
			});
		}

		function showToast(type, message) {
			// 创建简单的提示框
			const toast = document.createElement('div');
			toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
			toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
			toast.innerHTML = `
				${message}
				<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
			`;

			document.body.appendChild(toast);

			// 3秒后自动移除
			setTimeout(() => {
				if (toast.parentNode) {
					toast.parentNode.removeChild(toast);
				}
			}, 3000);
		}
	</script>
}
