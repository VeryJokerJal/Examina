@model IEnumerable<ExaminaWebApplication.Models.Exam.ExamQuestion>
@{
    var subject = ViewBag.Subject as ExaminaWebApplication.Models.Exam.ExamSubject;
    ViewData["Title"] = ViewData["Title"]?.ToString() ?? "Excel题目管理";
}

<!-- 页面标题和操作按钮 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-file-earmark-excel me-2 text-success"></i>Excel题目管理
        </h1>
        @if (subject != null)
        {
            <p class="text-muted mb-0">
                <i class="bi bi-folder me-1"></i>
                @subject.SubjectName - 管理Excel操作题目
            </p>
        }
    </div>
    <div>
        @if (subject != null)
        {
            <a href="@Url.Action("ExamDetails", "ExamManagement", new { id = subject.ExamId })" class="glass-btn">
                <i class="bi bi-file-earmark-text"></i> 试卷详情
            </a>
            <button class="glass-btn glass-btn-info" onclick="showExamExcelOperationConfig()">
                <i class="bi bi-gear"></i> 配置Excel操作点
            </button>
            <button class="glass-btn glass-btn-primary" onclick="showCreateExcelQuestionModal()">
                <i class="bi bi-plus"></i> 创建Excel题目
            </button>
        }
    </div>
</div>

<!-- 科目信息概览 -->
@if (subject != null)
{
    <div class="glass-card mb-4">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-info-circle me-2"></i>科目信息
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <strong>科目名称：</strong>@subject.SubjectName
                </div>
                <div class="col-md-2">
                    <strong>科目分值：</strong><span class="text-primary">@subject.Score 分</span>
                </div>
                <div class="col-md-2">
                    <strong>考试时长：</strong><span class="text-info">@subject.DurationMinutes 分钟</span>
                </div>

                <div class="col-md-3">
                    <strong>状态：</strong>
                    <span class="badge @(subject.IsEnabled ? "bg-success" : "bg-secondary")">
                        @(subject.IsEnabled ? "启用" : "禁用")
                    </span>
                    @if (subject.IsRequired)
                    {
                        <span class="badge bg-warning">必考</span>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Excel操作点快速选择 -->
<div class="glass-card mb-4">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="bi bi-lightning me-2"></i>快速创建Excel题目
        </h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="glass-card border-success">
                    <div class="card-header bg-success text-white">
                        <h6 class="mb-0">
                            <i class="bi bi-gear me-2"></i>基础操作
                        </h6>
                    </div>
                    <div class="card-body">
                        <p class="card-text small">Excel基础操作题目，包括单元格编辑、格式设置等</p>
                        <button class="glass-btn glass-btn-success btn-sm w-100" onclick="createQuestionFromCategory('basic')">
                            <i class="bi bi-plus"></i> 创建基础操作题目
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="glass-card border-primary">
                    <div class="card-header bg-primary text-white">
                        <h6 class="mb-0">
                            <i class="bi bi-list-ul me-2"></i>数据清单操作
                        </h6>
                    </div>
                    <div class="card-body">
                        <p class="card-text small">数据清单相关操作，包括筛选、排序、分组等</p>
                        <button class="glass-btn glass-btn-primary btn-sm w-100" onclick="createQuestionFromCategory('dataList')">
                            <i class="bi bi-plus"></i> 创建数据清单题目
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="glass-card border-warning">
                    <div class="card-header bg-warning text-white">
                        <h6 class="mb-0">
                            <i class="bi bi-bar-chart me-2"></i>图表操作
                        </h6>
                    </div>
                    <div class="card-body">
                        <p class="card-text small">图表创建和编辑操作，包括各种图表类型</p>
                        <button class="glass-btn glass-btn-warning btn-sm w-100" onclick="createQuestionFromCategory('chart')">
                            <i class="bi bi-plus"></i> 创建图表操作题目
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 题目统计信息 -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-primary mb-0">@Model.Count()</h4>
                <small class="text-muted">题目总数</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-success mb-0">@Model.Count(q => q.IsEnabled)</h4>
                <small class="text-muted">启用题目</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-info mb-0">@Model.Sum(q => q.Score)</h4>
                <small class="text-muted">题目总分</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-warning mb-0">@(Model.Any() ? Model.Average(q => q.DifficultyLevel).ToString("F1") : "0")</h4>
                <small class="text-muted">平均难度</small>
            </div>
        </div>
    </div>
</div>

<!-- 题目列表 -->
<div class="glass-card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-list me-2"></i>Excel题目列表
        </h5>
        <div>
            <button class="glass-btn glass-btn-primary btn-sm" onclick="showBulkOperationsModal()">
                <i class="bi bi-gear"></i> 批量操作
            </button>
            <button class="glass-btn glass-btn-success btn-sm" onclick="importExcelQuestions()">
                <i class="bi bi-upload"></i> 导入题目
            </button>
        </div>
    </div>
    <div class="card-body">
        @if (Model.Any())
        {
            <!-- 筛选和搜索 -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <input type="text" class="glass-input" id="questionSearch" placeholder="搜索题目标题或内容...">
                </div>
                <div class="col-md-2">
                    <select data-glass-select-native data-placeholder="全部难度" id="difficultyFilter">
                        <option value="">全部难度</option>
                        <option value="1">1星</option>
                        <option value="2">2星</option>
                        <option value="3">3星</option>
                        <option value="4">4星</option>
                        <option value="5">5星</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select data-glass-select-native data-placeholder="全部状态" id="statusFilter">
                        <option value="">全部状态</option>
                        <option value="enabled">启用</option>
                        <option value="disabled">禁用</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select data-glass-select-native data-placeholder="全部类型" id="typeFilter">
                        <option value="">全部类型</option>
                        <option value="basic">基础操作</option>
                        <option value="dataList">数据清单</option>
                        <option value="chart">图表操作</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="glass-btn glass-btn-primary w-100" onclick="applyFilters()">
                        <i class="bi bi-funnel"></i> 筛选
                    </button>
                </div>
            </div>

            <!-- 题目表格 -->
            <div class="table-responsive">
                <table class="table table-hover glass-table">
                    <thead>
                        <tr>
                            <th>
                                <label class="glass-checkbox">
                                    <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                    <span class="glass-checkmark"></span>
                                    <span class="glass-checkbox-label visually-hidden">全选</span>
                                </label>
                            </th>
                            <th>题目标题</th>
                            <th>类型</th>
                            <th>难度</th>
                            <th>分值</th>
                            <th>状态</th>
                            <th>创建时间</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody id="questionTableBody">
                        @* 显示新的简化题目 *@
                        @if (ViewBag.SimplifiedQuestions != null)
                        {
                            @foreach (var question in (List<ExaminaWebApplication.Models.Exam.SimplifiedQuestionResponse>)ViewBag.SimplifiedQuestions)
                            {
                                <tr data-question-id="@question.Id"
                                    data-status="@(question.IsEnabled ? "enabled" : "disabled")"
                                    data-type="simplified">
                                    <td>
                                        <label class="glass-checkbox">
                                            <input type="checkbox" class="question-checkbox" value="@question.Id">
                                            <span class="glass-checkmark"></span>
                                            <span class="glass-checkbox-label visually-hidden">选择题目</span>
                                        </label>
                                    </td>
                                    <td>
                                        <strong>@question.Title</strong>
                                        @if (!string.IsNullOrEmpty(question.Description))
                                        {
                                            <br><small class="text-muted">@question.Description</small>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-success">@question.OperationType</span>
                                    </td>
                                    <td>
                                        <span class="text-muted">-</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">@question.Score 分</span>
                                    </td>
                                    <td>
                                        <span class="badge @(question.IsEnabled ? "bg-success" : "bg-secondary")">
                                            @(question.IsEnabled ? "启用" : "禁用")
                                        </span>
                                    </td>
                                    <td>
                                        <small>@question.CreatedAt.ToString("yyyy-MM-dd")</small>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="glass-btn glass-btn-primary btn-sm" onclick="editSimplifiedQuestion(@question.Id)" title="编辑">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="glass-btn glass-btn-info btn-sm" onclick="previewSimplifiedQuestion(@question.Id)" title="预览">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="glass-btn glass-btn-danger btn-sm" onclick="deleteSimplifiedQuestion(@question.Id, '@question.Title')" title="删除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }

                        @* 显示旧的题目（如果有的话） *@
                        @foreach (var question in Model)
                        {
                            <tr data-question-id="@question.Id" 
                                data-difficulty="@question.DifficultyLevel" 
                                data-status="@(question.IsEnabled ? "enabled" : "disabled")"
                                data-type="@question.QuestionType.ToString().ToLower()">
                                <td>
                                    <label class="glass-checkbox">
                                        <input type="checkbox" class="question-checkbox" value="@question.Id">
                                        <span class="glass-checkmark"></span>
                                        <span class="glass-checkbox-label visually-hidden">选择题目</span>
                                    </label>
                                </td>
                                <td>
                                    <strong>@question.Title</strong>
                                    @if (!string.IsNullOrEmpty(question.Content))
                                    {
                                        <br><small class="text-muted">@question.Content</small>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-info">@question.QuestionType.ToString()</span>
                                </td>
                                <td>
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="bi bi-star@(i <= question.DifficultyLevel ? "-fill text-warning" : " text-muted")"></i>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-primary">@question.Score 分</span>
                                </td>
                                <td>
                                    <span class="badge @(question.IsEnabled ? "bg-success" : "bg-secondary")">
                                        @(question.IsEnabled ? "启用" : "禁用")
                                    </span>
                                </td>
                                <td>
                                    <small>@question.CreatedAt.ToString("yyyy-MM-dd")</small>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button class="glass-btn glass-btn-primary btn-sm" onclick="editQuestion(@question.Id)" title="编辑">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="glass-btn glass-btn-info btn-sm" onclick="previewQuestion(@question.Id)" title="预览">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="glass-btn glass-btn-@(question.IsEnabled ? "secondary" : "success") btn-sm" 
                                                onclick="toggleQuestionStatus(@question.Id, @question.IsEnabled.ToString().ToLower())" 
                                                title="@(question.IsEnabled ? "禁用" : "启用")">
                                            <i class="bi bi-@(question.IsEnabled ? "x-circle" : "check-circle")"></i>
                                        </button>
                                        <button class="glass-btn glass-btn-danger btn-sm" onclick="deleteQuestion(@question.Id, '@question.Title')" title="删除">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                <h5 class="text-muted mt-2">暂无Excel题目</h5>
                <p class="text-muted">开始创建Excel操作题目来构建考试内容</p>
                <button class="glass-btn glass-btn-primary me-2" onclick="showCreateExcelQuestionModal()">
                    <i class="bi bi-plus"></i> 创建题目
                </button>
                <button class="glass-btn glass-btn-success" onclick="importExcelQuestions()">
                    <i class="bi bi-upload"></i> 导入题目
                </button>
            </div>
        }
    </div>
</div>

<!-- 创建Excel题目模态框 -->
<div class="modal fade" id="createExcelQuestionModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-circle me-2"></i>创建Excel题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Excel操作点选择器 -->
                <div class="glass-card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-gear me-2"></i>选择Excel操作点
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="excelOperationPointSelector" class="operation-point-selector" data-subject-type="1">
                            <!-- Excel操作点选择器将通过JavaScript动态加载 -->
                            <div class="loading-state text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">加载中...</span>
                                </div>
                                <p class="mt-2 text-muted">正在加载Excel操作点...</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 题目基本信息 -->
                <div class="glass-card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>题目配置
                        </h6>
                    </div>
                    <div class="card-body">
                        <form id="excelQuestionForm">
                            <div class="row">
                                <div class="col-md-8">
                                    <label for="excelOperationType" class="form-label">操作类型 *</label>
                                    <select data-glass-select-native data-placeholder="请选择操作类型" id="excelOperationType" required onchange="showExcelOperationConfig(this.value)">
                                        <option value="">请选择操作类型</option>
                                        <option value="BasicOperation">基础操作</option>
                                        <option value="DataListOperation">数据清单操作</option>
                                        <option value="ChartOperation">图表操作</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label for="questionScore" class="form-label">题目分值 *</label>
                                    <input type="number" class="glass-input" id="questionScore" min="0.1" max="100" step="0.1" value="10" required>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- 动态操作配置 -->
                <div class="glass-card mt-3" id="excelOperationConfigCard" style="display: none;">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-gear me-2"></i>操作配置
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="excelOperationConfigContent">
                            <!-- 动态配置内容将在这里显示 -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="saveExcelQuestion()">
                    <i class="bi bi-check-circle me-1"></i>创建题目
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- 引入操作点选择器组件 -->
    <script src="~/js/operation-point-selector.js"></script>

    <script>
        let excelOperationPointSelector = null;
        let selectedOperationPoints = [];

        // 页面加载完成后的初始化
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Excel题目管理页面加载完成');
        });

        // 显示Excel操作配置
        function showExcelOperationConfig(operationType) {
            const configCard = document.getElementById('excelOperationConfigCard');
            const configContent = document.getElementById('excelOperationConfigContent');

            if (!operationType) {
                configCard.style.display = 'none';
                return;
            }

            let configHtml = '';

            switch(operationType) {
                case 'BasicOperation':
                    configHtml = `
                        <div class="row">
                            <div class="col-md-6">
                                <label for="basicCellRange" class="form-label">单元格范围 *</label>
                                <input type="text" class="form-control" id="basicCellRange" placeholder="例如：A1:C10" required>
                            </div>
                            <div class="col-md-6">
                                <label for="basicOperationType" class="form-label">操作类型 *</label>
                                <select class="form-select" id="basicOperationType" required>
                                    <option value="">请选择</option>
                                    <option value="Format">格式设置</option>
                                    <option value="Input">数据输入</option>
                                    <option value="Calculate">计算公式</option>
                                    <option value="Sort">排序</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label for="basicFormatType" class="form-label">格式类型</label>
                                <select class="form-select" id="basicFormatType">
                                    <option value="">请选择</option>
                                    <option value="Font">字体格式</option>
                                    <option value="Color">颜色设置</option>
                                    <option value="Border">边框设置</option>
                                    <option value="Alignment">对齐方式</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="basicFormatValue" class="form-label">格式值</label>
                                <input type="text" class="form-control" id="basicFormatValue" placeholder="例如：红色、粗体、居中">
                            </div>
                        </div>
                    `;
                    break;

                case 'DataListOperation':
                    configHtml = `
                        <div class="row">
                            <div class="col-md-6">
                                <label for="dataListRange" class="form-label">数据范围 *</label>
                                <input type="text" class="form-control" id="dataListRange" placeholder="例如：A1:F100" required>
                            </div>
                            <div class="col-md-6">
                                <label for="dataListOperation" class="form-label">数据清单操作 *</label>
                                <select class="form-select" id="dataListOperation" required>
                                    <option value="">请选择</option>
                                    <option value="Filter">筛选</option>
                                    <option value="Sort">排序</option>
                                    <option value="Group">分组</option>
                                    <option value="Subtotal">分类汇总</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label for="dataListColumn" class="form-label">操作列</label>
                                <input type="text" class="form-control" id="dataListColumn" placeholder="例如：姓名、成绩">
                            </div>
                            <div class="col-md-6">
                                <label for="dataListCriteria" class="form-label">条件</label>
                                <input type="text" class="form-control" id="dataListCriteria" placeholder="例如：>60、包含'张'">
                            </div>
                        </div>
                    `;
                    break;

                case 'ChartOperation':
                    configHtml = `
                        <div class="row">
                            <div class="col-md-6">
                                <label for="chartDataRange" class="form-label">数据范围 *</label>
                                <input type="text" class="form-control" id="chartDataRange" placeholder="例如：A1:B10" required>
                            </div>
                            <div class="col-md-6">
                                <label for="chartType" class="form-label">图表类型 *</label>
                                <select class="form-select" id="chartType" required>
                                    <option value="">请选择</option>
                                    <option value="Column">柱状图</option>
                                    <option value="Line">折线图</option>
                                    <option value="Pie">饼图</option>
                                    <option value="Bar">条形图</option>
                                    <option value="Area">面积图</option>
                                    <option value="Scatter">散点图</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label for="chartTitle" class="form-label">图表标题</label>
                                <input type="text" class="form-control" id="chartTitle" placeholder="例如：销售数据统计">
                            </div>
                            <div class="col-md-6">
                                <label for="chartPosition" class="form-label">图表位置</label>
                                <input type="text" class="form-control" id="chartPosition" placeholder="例如：D1">
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-12">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="chartShowLegend" checked>
                                    <label class="form-check-label" for="chartShowLegend">
                                        显示图例
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                    break;

                default:
                    configHtml = `
                        <div class="text-center py-3">
                            <i class="bi bi-info-circle text-info" style="font-size: 2rem;"></i>
                            <p class="text-muted mt-2">该操作类型暂无特殊配置</p>
                        </div>
                    `;
            }

            configContent.innerHTML = configHtml;
            configCard.style.display = 'block';
        }

        // 收集Excel操作配置数据
        function collectExcelOperationConfig(operationType) {
            const config = { operationType: operationType };

            switch(operationType) {
                case 'BasicOperation':
                    const basicCellRange = document.getElementById('basicCellRange')?.value;
                    const basicOperationType = document.getElementById('basicOperationType')?.value;
                    const basicFormatType = document.getElementById('basicFormatType')?.value;
                    const basicFormatValue = document.getElementById('basicFormatValue')?.value;

                    if (!basicCellRange || !basicOperationType) return null;

                    config.cellRange = basicCellRange;
                    config.operationType = basicOperationType;
                    config.formatType = basicFormatType;
                    config.formatValue = basicFormatValue;
                    break;

                case 'DataListOperation':
                    const dataListRange = document.getElementById('dataListRange')?.value;
                    const dataListOperation = document.getElementById('dataListOperation')?.value;
                    const dataListColumn = document.getElementById('dataListColumn')?.value;
                    const dataListCriteria = document.getElementById('dataListCriteria')?.value;

                    if (!dataListRange || !dataListOperation) return null;

                    config.dataRange = dataListRange;
                    config.operation = dataListOperation;
                    config.column = dataListColumn;
                    config.criteria = dataListCriteria;
                    break;

                case 'ChartOperation':
                    const chartDataRange = document.getElementById('chartDataRange')?.value;
                    const chartType = document.getElementById('chartType')?.value;
                    const chartTitle = document.getElementById('chartTitle')?.value;
                    const chartPosition = document.getElementById('chartPosition')?.value;
                    const chartShowLegend = document.getElementById('chartShowLegend')?.checked;

                    if (!chartDataRange || !chartType) return null;

                    config.dataRange = chartDataRange;
                    config.chartType = chartType;
                    config.title = chartTitle;
                    config.position = chartPosition;
                    config.showLegend = chartShowLegend;
                    break;
            }

            return config;
        }

        // 生成Excel题目标题
        function generateExcelQuestionTitle(operationType, config) {
            switch(operationType) {
                case 'BasicOperation':
                    return `Excel基础操作：${config.operationType === 'Format' ? '格式设置' :
                                           config.operationType === 'Input' ? '数据输入' :
                                           config.operationType === 'Calculate' ? '计算公式' :
                                           config.operationType === 'Sort' ? '数据排序' : '基础操作'}`;
                case 'DataListOperation':
                    return `Excel数据清单操作：${config.operation === 'Filter' ? '数据筛选' :
                                              config.operation === 'Sort' ? '数据排序' :
                                              config.operation === 'Group' ? '数据分组' :
                                              config.operation === 'Subtotal' ? '分类汇总' : '数据清单操作'}`;
                case 'ChartOperation':
                    return `Excel图表操作：创建${config.chartType === 'Column' ? '柱状图' :
                                             config.chartType === 'Line' ? '折线图' :
                                             config.chartType === 'Pie' ? '饼图' :
                                             config.chartType === 'Bar' ? '条形图' :
                                             config.chartType === 'Area' ? '面积图' :
                                             config.chartType === 'Scatter' ? '散点图' : '图表'}`;
                default:
                    return `Excel操作题目`;
            }
        }

        // 生成Excel题目描述
        function generateExcelQuestionDescription(operationType, config) {
            switch(operationType) {
                case 'BasicOperation':
                    let basicDesc = `请对单元格范围 ${config.cellRange} 进行${config.operationType === 'Format' ? '格式设置' :
                                                                                config.operationType === 'Input' ? '数据输入' :
                                                                                config.operationType === 'Calculate' ? '计算公式' :
                                                                                config.operationType === 'Sort' ? '数据排序' : '基础操作'}`;
                    if (config.formatType && config.formatValue) {
                        basicDesc += `，设置${config.formatType}为${config.formatValue}`;
                    }
                    return basicDesc + '。';

                case 'DataListOperation':
                    let dataDesc = `请对数据范围 ${config.dataRange} 进行${config.operation === 'Filter' ? '筛选' :
                                                                                config.operation === 'Sort' ? '排序' :
                                                                                config.operation === 'Group' ? '分组' :
                                                                                config.operation === 'Subtotal' ? '分类汇总' : '数据清单操作'}`;
                    if (config.column) {
                        dataDesc += `，操作列：${config.column}`;
                    }
                    if (config.criteria) {
                        dataDesc += `，条件：${config.criteria}`;
                    }
                    return dataDesc + '。';

                case 'ChartOperation':
                    let chartDesc = `请使用数据范围 ${config.dataRange} 创建${config.chartType === 'Column' ? '柱状图' :
                                                                                  config.chartType === 'Line' ? '折线图' :
                                                                                  config.chartType === 'Pie' ? '饼图' :
                                                                                  config.chartType === 'Bar' ? '条形图' :
                                                                                  config.chartType === 'Area' ? '面积图' :
                                                                                  config.chartType === 'Scatter' ? '散点图' : '图表'}`;
                    if (config.title) {
                        chartDesc += `，图表标题：${config.title}`;
                    }
                    if (config.position) {
                        chartDesc += `，放置在${config.position}位置`;
                    }
                    if (config.showLegend) {
                        chartDesc += `，显示图例`;
                    }
                    return chartDesc + '。';

                default:
                    return `请完成指定的Excel操作。`;
            }
        }

        // 显示创建Excel题目模态框
        function showCreateExcelQuestionModal() {
            // 初始化操作点选择器
            const selectorContainer = document.getElementById('excelOperationPointSelector');
            excelOperationPointSelector = new OperationPointSelector(selectorContainer, {
                subjectId: @(subject?.Id ?? 0),
                subjectType: 1, // Excel
                allowMultiple: true,
                onSelectionChange: updateSelectedExcelOperationPoints
            });

            // 显示模态框
            const modal = new bootstrap.Modal(document.getElementById('createExcelQuestionModal'));
            modal.show();
        }

        // 更新选中的Excel操作点
        function updateSelectedExcelOperationPoints(operationPoints) {
            selectedOperationPoints = operationPoints;
            console.log('选中的Excel操作点:', selectedOperationPoints);
        }

        // 从分类创建题目
        function createQuestionFromCategory(category) {
            showCreateExcelQuestionModal();

            // 根据分类设置题目类型
            const questionTypeSelect = document.getElementById('questionType');
            switch(category) {
                case 'basic':
                    questionTypeSelect.value = 'BasicOperation';
                    break;
                case 'dataList':
                    questionTypeSelect.value = 'DataListOperation';
                    break;
                case 'chart':
                    questionTypeSelect.value = 'ChartOperation';
                    break;
            }
        }

        // 保存Excel题目
        async function saveExcelQuestion() {
            try {
                const form = document.getElementById('excelQuestionForm');
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }

                const operationType = document.getElementById('excelOperationType').value;
                if (!operationType) {
                    alert('请选择操作类型');
                    return;
                }

                // 收集操作配置数据
                const operationConfig = collectExcelOperationConfig(operationType);
                if (!operationConfig) {
                    alert('请完善操作配置信息');
                    return;
                }

                const questionData = {
                    subjectId: @(subject?.Id ?? 0),
                    operationType: operationType,
                    score: parseInt(document.getElementById('questionScore').value),
                    operationConfig: operationConfig,
                    // 自动生成题目标题
                    title: generateExcelQuestionTitle(operationType, operationConfig),
                    // 自动生成题目描述
                    description: generateExcelQuestionDescription(operationType, operationConfig)
                };

                // 调用后端API保存题目
                console.log('保存Excel题目:', questionData);

                const response = await fetch('/api/SimplifiedQuestion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(questionData)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert('Excel题目创建成功！');

                    // 关闭模态框并刷新页面
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createExcelQuestionModal'));
                    modal.hide();
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(`创建失败: ${error.message || '未知错误'}`);
                }

            } catch (error) {
                console.error('保存Excel题目失败:', error);
                alert('保存Excel题目失败：' + error.message);
            }
        }

        // 编辑题目
        function editQuestion(questionId) {
            // 跳转到题目编辑页面
            window.location.href = `/ExamManagement/EditQuestion?id=${questionId}`;
        }

        // 预览题目
        function previewQuestion(questionId) {
            // 在新窗口中打开题目预览
            window.open(`/ExamManagement/PreviewQuestion?id=${questionId}`, '_blank');
        }

        // 切换题目状态
        async function toggleQuestionStatus(questionId, currentStatus) {
            try {
                const action = currentStatus ? '禁用' : '启用';
                if (!confirm(`确定要${action}这个题目吗？`)) {
                    return;
                }

                // 这里应该调用后端API切换状态
                console.log(`${action}题目:`, questionId);

                // 暂时刷新页面
                location.reload();

            } catch (error) {
                console.error('切换题目状态失败:', error);
                alert('操作失败：' + error.message);
            }
        }

        // 删除题目
        async function deleteQuestion(questionId, questionTitle) {
            try {
                if (!confirm(`确定要删除题目"${questionTitle}"吗？此操作不可恢复。`)) {
                    return;
                }

                // 这里应该调用后端API删除题目
                console.log('删除题目:', questionId);

                // 暂时刷新页面
                location.reload();

            } catch (error) {
                console.error('删除题目失败:', error);
                alert('删除失败：' + error.message);
            }
        }

        // 全选/取消全选
        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.question-checkbox');

            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        }

        // 应用筛选
        function applyFilters() {
            const searchTerm = document.getElementById('questionSearch').value.toLowerCase();
            const difficultyFilter = document.getElementById('difficultyFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;

            const rows = document.querySelectorAll('#questionTableBody tr');

            rows.forEach(row => {
                const title = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                const difficulty = row.getAttribute('data-difficulty');
                const status = row.getAttribute('data-status');
                const type = row.getAttribute('data-type');

                const matchesSearch = title.includes(searchTerm);
                const matchesDifficulty = !difficultyFilter || difficulty === difficultyFilter;
                const matchesStatus = !statusFilter || status === statusFilter;
                const matchesType = !typeFilter || type.includes(typeFilter.toLowerCase());

                if (matchesSearch && matchesDifficulty && matchesStatus && matchesType) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // 显示批量操作模态框
        function showBulkOperationsModal() {
            alert('批量操作功能开发中...');
        }

        // 导入Excel题目
        function importExcelQuestions() {
            alert('Excel题目导入功能开发中...');
        }

        // 初始化页面
        $(document).ready(function() {
            // 全局初始化Glassmorphism Select组件
            if (typeof initializeGlassSelectsNative === 'function') {
                initializeGlassSelectsNative();
            }

            // 初始化Glassmorphism Select组件
            setTimeout(function() {
                // 为动态生成的select元素重新初始化
                const selects = document.querySelectorAll('select[data-glass-select-native]:not([data-glass-native-initialized])');
                selects.forEach(select => {
                    const options = {
                        variant: select.getAttribute('data-variant') || 'default',
                        size: select.getAttribute('data-size') || 'default',
                        enhanced: select.hasAttribute('data-searchable') || select.hasAttribute('data-enhanced')
                    };
                    new GlassSelectNative(select, options);
                });
            }, 100);
        });
    </script>
}
