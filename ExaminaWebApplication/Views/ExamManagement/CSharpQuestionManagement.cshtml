@{
    var subject = ViewBag.Subject as ExaminaWebApplication.Models.Exam.ExamSubject;
    ViewData["Title"] = ViewData["Title"]?.ToString() ?? "C#题目管理";
}

<!-- 页面标题和操作按钮 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-code-slash me-2 text-primary"></i>C#题目管理
        </h1>
        @if (subject != null)
        {
            <p class="text-muted mb-0">
                <i class="bi bi-folder me-1"></i>
                @subject.SubjectName - 管理C#编程题目
            </p>
        }
    </div>
    <div>
        @if (subject != null)
        {
            <a href="@Url.Action("ExamDetails", "ExamManagement", new { id = subject.ExamId })" class="glass-btn">
                <i class="bi bi-file-earmark-text"></i> 试卷详情
            </a>
        }
    </div>
</div>

<!-- C#题目配置表单 -->
<div class="row">
    <div class="col-md-12">
        <!-- 题目配置 -->
        <div class="glass-card mb-4">
            <div class="card-header glass-card-header">
                <h6 class="mb-0">
                    <i class="bi bi-gear me-2"></i>题目配置
                </h6>
            </div>
            <div class="card-body">
                <form id="csharpQuestionForm">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="csharpQuestionScore" class="form-label">题目分值 *</label>
                            <input type="number" class="glass-input" id="csharpQuestionScore"
                                   value="20" min="0.1" max="100" step="0.1" required>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <label for="csharpRequirements" class="form-label">题目要求 (Markdown格式)</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="markdown-editor-container">
                                        <div class="markdown-toolbar glass-card-header">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('**', '**')" title="粗体">
                                                    <i class="bi bi-type-bold"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('*', '*')" title="斜体">
                                                    <i class="bi bi-type-italic"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('`', '`')" title="代码">
                                                    <i class="bi bi-code"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('```\n', '\n```')" title="代码块">
                                                    <i class="bi bi-code-square"></i>
                                                </button>
                                            </div>
                                            <div class="btn-group ms-2" role="group">
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('# ', '')" title="标题1">
                                                    H1
                                                </button>
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('## ', '')" title="标题2">
                                                    H2
                                                </button>
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('### ', '')" title="标题3">
                                                    H3
                                                </button>
                                            </div>
                                            <div class="btn-group ms-2" role="group">
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('- ', '')" title="无序列表">
                                                    <i class="bi bi-list-ul"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('1. ', '')" title="有序列表">
                                                    <i class="bi bi-list-ol"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm glass-btn" onclick="insertMarkdown('[链接文本](', ')')" title="链接">
                                                    <i class="bi bi-link"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <textarea class="glass-input markdown-editor" id="csharpRequirements" rows="8"
                                                  placeholder="请输入题目的详细要求，支持Markdown格式&#10;&#10;示例：&#10;# 题目要求&#10;## 基本要求&#10;- 要求1&#10;- 要求2&#10;&#10;## 代码示例&#10;```csharp&#10;// 代码示例&#10;```"></textarea>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="glass-card h-100">
                                        <div class="card-header glass-card-header py-2 d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Markdown预览</small>
                                            <button type="button" class="btn btn-sm glass-btn" onclick="togglePreviewMode()" id="previewToggle">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                        <div class="card-body markdown-preview" id="csharpRequirementsPreview"
                                             style="min-height: 240px; max-height: 240px; overflow-y: auto;">
                                            <small class="text-muted">在左侧输入Markdown内容，这里将显示预览</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- 题目详细信息 -->
        <div class="glass-card mb-4">
            <div class="card-header glass-card-header">
                <h6 class="mb-0">
                    <i class="bi bi-file-text me-2"></i>题目详细信息
                </h6>
            </div>
            <div class="card-body">

                <div class="row mt-3">
                    <div class="col-md-6">
                        <label for="csharpInputDescription" class="form-label">输入程序</label>
                        <textarea class="glass-input" id="csharpInputDescription" rows="4"
                                  placeholder="请输入输入程序"></textarea>
                    </div>
                    <div class="col-md-6">
                        <label for="csharpOutputDescription" class="form-label">输出程序</label>
                        <textarea class="glass-input" id="csharpOutputDescription" rows="4"
                                  placeholder="请输入输出程序"></textarea>
                    </div>
                </div>
            </div>
        </div>

        <!-- 操作按钮 -->
        <div class="text-center">
            <button type="button" class="glass-btn glass-btn-primary me-2" onclick="saveCSharpQuestion()">
                <i class="bi bi-check"></i> 保存题目
            </button>
            <button type="button" class="glass-btn" onclick="resetForm()">
                <i class="bi bi-arrow-clockwise"></i> 重置表单
            </button>
        </div>
    </div>
</div>

<style>
    /* Markdown编辑器样式 */
    .markdown-editor-container {
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        overflow: hidden;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }

    .markdown-toolbar {
        padding: 8px 12px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        background: rgba(255, 255, 255, 0.05);
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 4px;
    }

    .markdown-toolbar .btn {
        padding: 4px 8px;
        font-size: 12px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        background: rgba(255, 255, 255, 0.1);
        color: rgba(255, 255, 255, 0.8);
        transition: all 0.3s ease;
    }

    .markdown-toolbar .btn:hover {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        transform: translateY(-1px);
    }

    .markdown-editor {
        border: none !important;
        border-radius: 0 !important;
        background: transparent !important;
        resize: vertical;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 14px;
        line-height: 1.5;
        min-height: 200px;
    }

    .markdown-editor:focus {
        box-shadow: none !important;
        outline: none !important;
    }

    .markdown-preview {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: rgba(255, 255, 255, 0.9);
    }

    .markdown-preview h1, .markdown-preview h2, .markdown-preview h3 {
        color: #4fc3f7;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
    }

    .markdown-preview h1 {
        font-size: 1.5rem;
        border-bottom: 2px solid rgba(79, 195, 247, 0.3);
        padding-bottom: 0.3rem;
    }

    .markdown-preview h2 {
        font-size: 1.3rem;
        border-bottom: 1px solid rgba(79, 195, 247, 0.2);
        padding-bottom: 0.2rem;
    }

    .markdown-preview h3 {
        font-size: 1.1rem;
    }

    .markdown-preview code {
        background: rgba(0, 0, 0, 0.3);
        padding: 2px 6px;
        border-radius: 4px;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        color: #81c784;
    }

    .markdown-preview pre {
        background: rgba(0, 0, 0, 0.4);
        padding: 12px;
        border-radius: 8px;
        overflow-x: auto;
        border-left: 4px solid #4fc3f7;
    }

    .markdown-preview pre code {
        background: transparent;
        padding: 0;
        color: #a5d6a7;
    }

    .markdown-preview ul, .markdown-preview ol {
        padding-left: 1.5rem;
    }

    .markdown-preview li {
        margin-bottom: 0.3rem;
    }

    .markdown-preview a {
        color: #4fc3f7;
        text-decoration: none;
    }

    .markdown-preview a:hover {
        text-decoration: underline;
    }

    .markdown-preview strong {
        color: #fff;
        font-weight: 600;
    }

    .markdown-preview em {
        color: #ffcc80;
        font-style: italic;
    }

    .markdown-preview blockquote {
        border-left: 4px solid #4fc3f7;
        padding-left: 1rem;
        margin: 1rem 0;
        color: rgba(255, 255, 255, 0.7);
        font-style: italic;
    }

    /* 响应式设计 */
    @@media (max-width: 768px) {
        .markdown-toolbar {
            flex-direction: column;
            align-items: stretch;
        }

        .markdown-toolbar .btn-group {
            margin-bottom: 4px;
        }
    }
</style>

<script>
    // 页面加载完成后的初始化
    document.addEventListener('DOMContentLoaded', function() {
        console.log('C#题目管理页面加载完成');

        // 初始化Markdown预览功能
        initializeMarkdownPreview();

        // 加载现有题目数据（如果存在）
        loadExistingQuestion();
    });

    // 重置表单
    function resetForm() {
        // 清空表单
        document.getElementById('csharpQuestionForm').reset();
        document.getElementById('csharpInputDescription').value = '';
        document.getElementById('csharpOutputDescription').value = '';
        document.getElementById('csharpRequirements').value = '';

        // 清空预览
        const previewElement = document.getElementById('csharpRequirementsPreview');
        if (previewElement) {
            previewElement.innerHTML = '<small class="text-muted">在左侧输入Markdown内容，这里将显示预览</small>';
        }
    }

    // 加载现有题目数据
    function loadExistingQuestion() {
        const subjectId = @(subject?.Id ?? 0);
        if (subjectId === 0) {
            console.warn('科目ID无效，跳过加载现有题目');
            return;
        }

        console.log('开始加载现有C#题目，科目ID:', subjectId);

        // 获取现有的C#题目
        fetch(`/api/SimplifiedQuestion/subject/${subjectId}`)
        .then(response => {
            console.log('API响应状态:', response.status);
            if (!response.ok) {
                if (response.status === 404) {
                    console.log('暂无现有题目数据');
                    return [];
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(questions => {
            console.log('获取到题目数据:', questions);
            // 如果存在C#题目，加载第一个（因为C#题目只支持一个）
            if (questions && questions.length > 0) {
                const question = questions.find(q => q.operationType === 'CSharpProgramming') || questions[0];
                if (question) {
                    console.log('加载题目数据:', question);
                    loadQuestionData(question);
                } else {
                    console.log('未找到C#编程题目');
                }
            } else {
                console.log('暂无题目数据');
            }
        })
        .catch(error => {
            console.error('加载现有题目失败:', error);
            // 不显示错误提示，因为可能是正常的"暂无数据"情况
        });
    }

    // 加载题目数据到表单
    function loadQuestionData(questionData) {
        document.getElementById('csharpQuestionScore').value = questionData.score || 20;
        document.getElementById('csharpInputDescription').value = questionData.inputDescription || '';
        document.getElementById('csharpOutputDescription').value = questionData.outputDescription || '';
        document.getElementById('csharpRequirements').value = questionData.requirements || '';

        // 更新Markdown预览
        const requirementsPreview = document.getElementById('csharpRequirementsPreview');
        if (requirementsPreview) {
            updateMarkdownPreview(questionData.requirements || '', requirementsPreview);
        }

        // 存储题目ID以便更新
        window.currentQuestionId = questionData.id;
    }

    // 初始化Markdown预览功能
    function initializeMarkdownPreview() {
        // 为Requirements字段添加预览
        const requirementsInput = document.getElementById('csharpRequirements');
        const requirementsPreview = document.getElementById('csharpRequirementsPreview');

        if (requirementsInput && requirementsPreview) {
            requirementsInput.addEventListener('input', function() {
                updateMarkdownPreview(this.value, requirementsPreview);
            });
        }
    }

    // 插入Markdown语法
    function insertMarkdown(before, after) {
        const textarea = document.getElementById('csharpRequirements');
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const selectedText = textarea.value.substring(start, end);

        // 如果有选中文本，在选中文本前后添加标记
        const newText = before + selectedText + after;

        // 替换选中的文本
        textarea.value = textarea.value.substring(0, start) + newText + textarea.value.substring(end);

        // 设置新的光标位置
        const newCursorPos = start + before.length + selectedText.length + after.length;
        textarea.setSelectionRange(newCursorPos, newCursorPos);

        // 聚焦到textarea
        textarea.focus();

        // 触发input事件以更新预览
        textarea.dispatchEvent(new Event('input'));
    }

    // 切换预览模式
    function togglePreviewMode() {
        const previewElement = document.getElementById('csharpRequirementsPreview');
        const toggleButton = document.getElementById('previewToggle');
        const editorContainer = document.querySelector('.markdown-editor-container');

        if (previewElement.style.display === 'none') {
            // 显示预览
            previewElement.style.display = 'block';
            editorContainer.style.display = 'block';
            toggleButton.innerHTML = '<i class="bi bi-eye"></i>';
            toggleButton.title = '隐藏预览';
        } else {
            // 隐藏预览，全屏编辑
            previewElement.style.display = 'none';
            editorContainer.style.width = '100%';
            toggleButton.innerHTML = '<i class="bi bi-eye-slash"></i>';
            toggleButton.title = '显示预览';
        }
    }

    // 更新Markdown预览
    function updateMarkdownPreview(markdownText, previewElement) {
        if (!markdownText.trim()) {
            previewElement.innerHTML = '<small class="text-muted">在左侧输入Markdown内容，这里将显示预览</small>';
            return;
        }

        // 增强的Markdown转换
        let html = markdownText
            // 转义HTML特殊字符（除了我们要处理的Markdown语法）
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')

            // 代码块（必须在其他处理之前）
            .replace(/```(\w+)?\n([\s\S]*?)```/g, function(match, lang, code) {
                const language = lang ? ` class="language-${lang}"` : '';
                return `<pre><code${language}>${code.trim()}</code></pre>`;
            })

            // 行内代码
            .replace(/`([^`]+)`/g, '<code>$1</code>')

            // 标题
            .replace(/^### (.*$)/gim, '<h3>$1</h3>')
            .replace(/^## (.*$)/gim, '<h2>$1</h2>')
            .replace(/^# (.*$)/gim, '<h1>$1</h1>')

            // 粗体和斜体
            .replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')

            // 删除线
            .replace(/~~(.*?)~~/g, '<del>$1</del>')

            // 链接
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>')

            // 图片
            .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1" style="max-width: 100%; height: auto;">')

            // 引用
            .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')

            // 水平线
            .replace(/^---$/gim, '<hr>')
            .replace(/^\*\*\*$/gim, '<hr>')

            // 有序列表
            .replace(/^\d+\. (.*$)/gim, '<li class="ordered">$1</li>')

            // 无序列表
            .replace(/^[\*\-\+] (.*$)/gim, '<li class="unordered">$1</li>')

            // 换行处理
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>');

        // 包装段落
        if (html && !html.startsWith('<')) {
            html = '<p>' + html + '</p>';
        }

        // 包装列表项
        html = html.replace(/(<li class="ordered">.*?<\/li>)/gs, function(match) {
            return '<ol>' + match.replace(/ class="ordered"/g, '') + '</ol>';
        });

        html = html.replace(/(<li class="unordered">.*?<\/li>)/gs, function(match) {
            return '<ul>' + match.replace(/ class="unordered"/g, '') + '</ul>';
        });

        // 清理多余的段落标签
        html = html.replace(/<p><\/p>/g, '');
        html = html.replace(/<p>(<h[1-6]>)/g, '$1');
        html = html.replace(/(<\/h[1-6]>)<\/p>/g, '$1');
        html = html.replace(/<p>(<pre>)/g, '$1');
        html = html.replace(/(<\/pre>)<\/p>/g, '$1');
        html = html.replace(/<p>(<blockquote>)/g, '$1');
        html = html.replace(/(<\/blockquote>)<\/p>/g, '$1');
        html = html.replace(/<p>(<hr>)<\/p>/g, '$1');
        html = html.replace(/<p>(<ul>)/g, '$1');
        html = html.replace(/(<\/ul>)<\/p>/g, '$1');
        html = html.replace(/<p>(<ol>)/g, '$1');
        html = html.replace(/(<\/ol>)<\/p>/g, '$1');

        previewElement.innerHTML = html;
    }

    // 验证C#题目表单数据
    function validateCSharpQuestionForm() {
        const errors = [];

        // 验证题目分值
        const score = parseFloat(document.getElementById('csharpQuestionScore').value);
        if (!score || score < 0.1 || score > 100) {
            errors.push('请输入有效的题目分值（0.1-100）');
        }

        // 验证题目要求（可选但如果有内容则验证长度）
        const requirements = document.getElementById('csharpRequirements').value.trim();
        if (requirements && requirements.length > 5000) {
            errors.push('题目要求内容过长，请控制在5000字符以内');
        }



        // 验证输入输出程序长度
        const inputDescription = document.getElementById('csharpInputDescription').value.trim();
        const outputDescription = document.getElementById('csharpOutputDescription').value.trim();
        if (inputDescription && inputDescription.length > 2000) {
            errors.push('输入程序内容过长，请控制在2000字符以内');
        }
        if (outputDescription && outputDescription.length > 2000) {
            errors.push('输出程序内容过长，请控制在2000字符以内');
        }

        return errors;
    }

    // 设置保存按钮加载状态
    function setSaveButtonLoading(isLoading) {
        const saveButton = document.querySelector('button[onclick="saveCSharpQuestion()"]');
        if (!saveButton) return;

        if (isLoading) {
            saveButton.disabled = true;
            saveButton.innerHTML = '<i class="bi bi-hourglass-split me-1"></i> 保存中...';
        } else {
            saveButton.disabled = false;
            saveButton.innerHTML = '<i class="bi bi-check"></i> 保存题目';
        }
    }

    // 显示验证错误信息
    function showValidationErrors(errors) {
        const errorMessage = '请修正以下问题：\n\n' + errors.map((error, index) => `${index + 1}. ${error}`).join('\n');
        alert(errorMessage);
    }

    // 显示成功消息
    function showSuccessMessage(isUpdate) {
        const action = isUpdate ? '更新' : '创建';
        alert(`✅ C#题目${action}成功！\n\n题目已保存，您可以继续编辑或创建新题目。`);
    }

    // 显示错误消息
    function showErrorMessage(error, isUpdate) {
        const action = isUpdate ? '更新' : '创建';
        let errorMessage = `❌ ${action}C#题目失败\n\n`;

        if (error.message.includes('HTTP error')) {
            errorMessage += '服务器响应错误，请稍后重试或联系管理员。';
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage += '网络连接失败，请检查网络连接后重试。';
        } else {
            errorMessage += `错误信息：${error.message}`;
        }

        errorMessage += '\n\n如果问题持续存在，请联系技术支持。';
        alert(errorMessage);
    }

    // 保存C#题目
    async function saveCSharpQuestion() {
        try {
            // 验证表单数据
            const validationErrors = validateCSharpQuestionForm();
            if (validationErrors.length > 0) {
                showValidationErrors(validationErrors);
                return;
            }

            // 设置加载状态
            setSaveButtonLoading(true);

            // 获取表单数据
            const score = parseFloat(document.getElementById('csharpQuestionScore').value);
            const inputDescription = document.getElementById('csharpInputDescription').value.trim();
            const outputDescription = document.getElementById('csharpOutputDescription').value.trim();
            const requirements = document.getElementById('csharpRequirements').value.trim();

            // 构建题目数据
            const questionData = {
                subjectId: @(subject?.Id ?? 0),
                operationType: 'CSharpProgramming',
                score: score,
                operationConfig: {
                    type: 'programming',
                    language: 'csharp'
                },
                title: 'C#编程题目', // 固定标题
                description: 'C#编程题目', // 固定描述
                inputExample: null,
                inputDescription: inputDescription || null,
                outputExample: null,
                outputDescription: outputDescription || null,
                requirements: requirements || null
            };

            // 判断是创建还是更新
            const isUpdate = window.currentQuestionId && window.currentQuestionId > 0;
            const url = isUpdate ? `/api/SimplifiedQuestion/${window.currentQuestionId}` : '/api/SimplifiedQuestion';
            const method = isUpdate ? 'PUT' : 'POST';

            if (isUpdate) {
                questionData.id = window.currentQuestionId;
            }

            console.log(`${isUpdate ? '更新' : '创建'}C#题目:`, questionData);

            // 发送请求
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(questionData)
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                const errorMessage = errorData?.message || `HTTP error! status: ${response.status}`;
                throw new Error(errorMessage);
            }

            const data = await response.json();
            console.log(`C#题目${isUpdate ? '更新' : '创建'}成功:`, data);

            // 显示成功消息
            showSuccessMessage(isUpdate);

            // 如果是创建，存储题目ID
            if (!isUpdate && data.id) {
                window.currentQuestionId = data.id;
            }

        } catch (error) {
            console.error('保存C#题目失败:', error);
            showErrorMessage(error, window.currentQuestionId && window.currentQuestionId > 0);
        } finally {
            // 恢复按钮状态
            setSaveButtonLoading(false);
        }
    }


</script>
