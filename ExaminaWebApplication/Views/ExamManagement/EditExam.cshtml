@model ExaminaWebApplication.Models.Exam.Exam
@{
    ViewData["Title"] = $"编辑试卷 - {Model.Name}";
}

<!-- 页面标题 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-pencil me-2"></i>编辑试卷
        </h1>
        <p class="text-muted mb-0">修改试卷 "@Model.Name" 的基本信息</p>
    </div>
    <div>
        <a href="@Url.Action("ExamDetails", "ExamManagement", new { id = Model.Id })" class="glass-btn">
            <i class="bi bi-arrow-left"></i> 返回详情
        </a>
        <a href="@Url.Action("ExamList", "ExamManagement")" class="glass-btn">
            <i class="bi bi-list"></i> 返回列表
        </a>
    </div>
</div>

<!-- 试卷状态提示 -->
@if (Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft)
{
    <div class="glass-alert glass-alert-warning mb-4" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        <strong>注意：</strong>
        @if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Published)
        {
            <span>已发布的试卷只能修改部分信息（描述、标签等），核心配置已锁定。</span>
        }
        else
        {
            <span>当前试卷状态为"@GetStatusText(Model.Status)"，编辑功能可能受限。</span>
        }
    </div>
}

<!-- 编辑试卷表单 -->
<div class="row">
    <div class="col-md-8">
        <div class="glass-card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-file-earmark-text me-2"></i>试卷基本信息
                </h5>
            </div>
            <div class="card-body">
                <form id="edit-exam-form" class="glass-form">
                    <input type="hidden" id="examId" value="@Model.Id">
                    <input type="hidden" id="originalStatus" value="@((int)Model.Status)">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="examName" class="form-label">试卷名称 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control glass-form-control" id="examName" required
                                       value="@Model.Name" placeholder="例如：2025年春季统一考试"
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "readonly" : "")>
                                <div class="form-text">请输入有意义的试卷名称</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="examType" class="form-label">试卷类型 <span class="text-danger">*</span></label>
                                <select class="form-select glass-form-control" id="examType" required
                                        @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "disabled" : "")>
                                    <option value="">请选择试卷类型</option>
                                    <option value="1" selected="@(Model.ExamType == ExaminaWebApplication.Models.Exam.ExamType.UnifiedExam)">统一考试</option>
                                    <option value="2" selected="@(Model.ExamType == ExaminaWebApplication.Models.Exam.ExamType.MockExam)">综合实训</option>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label for="totalScore" class="form-label">总分 <span class="text-danger">*</span></label>
                                <input type="number" class="form-control glass-form-control" id="totalScore"
                                       value="@Model.TotalScore" min="0.1" max="9999.99" step="0.01" required
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "readonly" : "")>
                                <div class="form-text">试卷总分值，建议100分</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="durationMinutes" class="form-label">考试时长(分钟) <span class="text-danger">*</span></label>
                                <input type="number" class="form-control glass-form-control" id="durationMinutes" 
                                       value="@Model.DurationMinutes" min="1" max="600" required
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "readonly" : "")>
                                <div class="form-text">考试时长，单位：分钟</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="passingScore" class="form-label">及格分数 <span class="text-danger">*</span></label>
                                <input type="number" class="form-control glass-form-control" id="passingScore"
                                       value="@Model.PassingScore" min="0.1" step="0.01" required
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "readonly" : "")>
                                <div class="form-text">考试及格分数线</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="maxRetakeCount" class="form-label">最大重考次数</label>
                                <input type="number" class="form-control glass-form-control" id="maxRetakeCount" 
                                       value="@Model.MaxRetakeCount" min="0" max="10"
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "readonly" : "")>
                                <div class="form-text">0表示不允许重考</div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <!-- 试卷描述字段移至独立卡片，此处保留隐藏字段用于表单提交 -->
                            <input type="hidden" id="examDescriptionHidden" value="@Model.Description">
                            
                            <div class="mb-3">
                                <label for="examTags" class="form-label">试卷标签</label>
                                <input type="text" class="form-control glass-form-control" id="examTags" 
                                       value="@Model.Tags" placeholder="例如：统考,Office,综合考试（用逗号分隔）">
                                <div class="form-text">用逗号分隔多个标签</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="startTime" class="form-label">考试开始时间</label>
                                <input type="datetime-local" class="form-control glass-form-control" id="startTime" 
                                       value="@(Model.StartTime?.ToString("yyyy-MM-ddTHH:mm"))"
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "readonly" : "")>
                                <div class="form-text">可选，设置考试开始时间</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="endTime" class="form-label">考试结束时间</label>
                                <input type="datetime-local" class="form-control glass-form-control" id="endTime" 
                                       value="@(Model.EndTime?.ToString("yyyy-MM-ddTHH:mm"))"
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "readonly" : "")>
                                <div class="form-text">可选，设置考试结束时间</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 高级设置 -->
                    <div class="row">
                        <div class="col-md-12">
                            <h6 class="mb-3">
                                <i class="bi bi-gear me-2"></i>高级设置
                            </h6>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="allowRetake" 
                                       @(Model.AllowRetake ? "checked" : "")
                                       @(Model.Status != ExaminaWebApplication.Models.Exam.ExamStatus.Draft ? "disabled" : "")>
                                <label class="form-check-label" for="allowRetake">
                                    允许重考
                                </label>
                            </div>
                        </div>

                    </div>
                </form>
            </div>
        </div>

        <!-- 独立的试卷描述编辑器卡片 -->
        <div class="glass-card mt-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-markdown me-2"></i>试卷描述编辑
                    <small class="text-muted ms-2">支持Markdown格式</small>
                </h5>
            </div>
            <div class="card-body">
                <div class="glass-markdown-editor">
                    <div class="markdown-editor-tabs">
                        <button type="button" class="markdown-tab active" data-tab="edit">
                            <i class="bi bi-pencil me-1"></i>编辑
                        </button>
                        <button type="button" class="markdown-tab" data-tab="preview">
                            <i class="bi bi-eye me-1"></i>预览
                        </button>
                        <button type="button" class="markdown-tab" data-tab="split">
                            <i class="bi bi-layout-split me-1"></i>分屏
                        </button>
                    </div>
                    <div class="markdown-editor-toolbar">
                        <div class="toolbar-group">
                            <button type="button" class="toolbar-btn" data-action="bold" title="粗体">
                                <i class="bi bi-type-bold"></i>
                            </button>
                            <button type="button" class="toolbar-btn" data-action="italic" title="斜体">
                                <i class="bi bi-type-italic"></i>
                            </button>
                            <button type="button" class="toolbar-btn" data-action="heading" title="标题">
                                <i class="bi bi-type-h1"></i>
                            </button>
                        </div>
                        <div class="toolbar-group">
                            <button type="button" class="toolbar-btn" data-action="list" title="列表">
                                <i class="bi bi-list-ul"></i>
                            </button>
                            <button type="button" class="toolbar-btn" data-action="link" title="链接">
                                <i class="bi bi-link"></i>
                            </button>
                            <button type="button" class="toolbar-btn" data-action="code" title="代码">
                                <i class="bi bi-code"></i>
                            </button>
                        </div>
                    </div>
                    <div class="markdown-editor-content">
                        <div class="markdown-editor-pane edit-pane active">
                            <textarea class="form-control glass-form-control markdown-textarea"
                                      id="examDescription"
                                      rows="8"
                                      placeholder="请输入试卷的详细描述，支持Markdown格式...&#10;&#10;示例：&#10;## 考试说明&#10;- **考试时长**：120分钟&#10;- **题目类型**：选择题、操作题&#10;- **注意事项**：请仔细阅读题目要求&#10;&#10;### 评分标准&#10;1. 操作正确性 (60%)&#10;2. 操作效率 (25%)&#10;3. 结果准确性 (15%)&#10;&#10;> **重要提醒**：考试过程中请保持网络连接稳定">@Model.Description</textarea>
                        </div>
                        <div class="markdown-editor-pane preview-pane">
                            <div class="markdown-preview glass-form-control" id="markdownPreview">
                                <div class="preview-placeholder">
                                    <i class="bi bi-eye-slash text-muted"></i>
                                    <p class="text-muted mb-0">在编辑区域输入内容以查看预览</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-text mt-3">
                    支持Markdown语法：**粗体**、*斜体*、## 标题、- 列表等
                    <a href="#" class="ms-2" data-bs-toggle="modal" data-bs-target="#markdownHelpModal">
                        <i class="bi bi-question-circle"></i> 语法帮助
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <!-- 试卷信息 -->
        <div class="glass-card mb-3">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-info-circle me-2"></i>试卷信息
                </h6>
            </div>
            <div class="card-body">
                <table class="table-borderless glass-table">
                    <tr>
                        <td><strong>试卷ID：</strong></td>
                        <td>@Model.Id</td>
                    </tr>
                    <tr>
                        <td><strong>当前状态：</strong></td>
                        <td><span class="glass-badge @GetStatusBadgeClass(Model.Status)">@GetStatusText(Model.Status)</span></td>
                    </tr>
                    <tr>
                        <td><strong>创建时间：</strong></td>
                        <td>@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    </tr>
                    <tr>
                        <td><strong>更新时间：</strong></td>
                        <td>@(Model.UpdatedAt?.ToString("yyyy-MM-dd HH:mm") ?? "未更新")</td>
                    </tr>
                    @if (Model.PublishedAt.HasValue)
                    {
                        <tr>
                            <td><strong>发布时间：</strong></td>
                            <td>@Model.PublishedAt.Value.ToString("yyyy-MM-dd HH:mm")</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        
        <!-- 操作按钮 -->
        <div class="glass-card mb-3">
            <div class="card-body">
                <div class="exam-action-buttons">
                    <button type="submit" form="edit-exam-form" class="glass-btn glass-btn-success exam-btn-primary">
                        <i class="bi bi-check"></i> 保存修改
                    </button>
                    <button type="button" class="glass-btn glass-btn-primary exam-btn-secondary" onclick="saveAndContinue()">
                        <i class="bi bi-check-circle"></i> 保存并继续编辑
                    </button>
                    <button type="button" class="glass-btn exam-btn-secondary" onclick="resetForm()">
                        <i class="bi bi-arrow-clockwise"></i> 重置表单
                    </button>
                    <a href="@Url.Action("ExamDetails", "ExamManagement", new { id = Model.Id })" class="glass-btn glass-btn-warning exam-btn-secondary">
                        <i class="bi bi-x-circle"></i> 取消编辑
                    </a>
                </div>
            </div>
        </div>
        
        <!-- 快速操作 -->
        <div class="glass-card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-lightning me-2"></i>快速操作
                </h6>
            </div>
            <div class="card-body">
                <div class="exam-quick-actions">
                    @if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Draft)
                    {
                        <button class="glass-btn glass-btn-success exam-quick-btn" onclick="validateAndPublish()">
                            <i class="bi bi-check-circle me-1"></i>验证发布
                        </button>
                    }
                    <button class="glass-btn glass-btn-warning exam-quick-btn" onclick="duplicateExam()">
                        <i class="bi bi-copy me-1"></i>复制试卷
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 加载提示 -->
<div class="loading position-fixed top-50 start-50 translate-middle" id="loading" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">保存中...</span>
    </div>
</div>

@section Scripts {
    <!-- 引入Markdown编辑器 -->
    <script src="~/js/glass-markdown-editor.js"></script>
    <script>
        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 绑定表单提交事件
            document.getElementById('edit-exam-form').addEventListener('submit', handleUpdateExam);

            // 初始化Markdown编辑器
            const markdownEditor = document.querySelector('.glass-markdown-editor');
            if (markdownEditor) {
                const editorInstance = new GlassMarkdownEditor(markdownEditor, {
                    autoPreview: true,
                    toolbar: true
                });
            }

            // 绑定允许重考复选框
            document.getElementById('allowRetake').addEventListener('change', function() {
                const maxRetakeInput = document.getElementById('maxRetakeCount');
                const isDraft = parseInt(document.getElementById('originalStatus').value) === 1;

                if (this.checked && isDraft) {
                    if (maxRetakeInput.value === '0') {
                        maxRetakeInput.value = '1';
                    }
                    maxRetakeInput.disabled = false;
                } else if (!this.checked && isDraft) {
                    maxRetakeInput.value = '0';
                }
            });

            // 验证开始时间和结束时间
            document.getElementById('startTime').addEventListener('change', validateTimeRange);
            document.getElementById('endTime').addEventListener('change', validateTimeRange);
        });

        // 处理更新试卷表单提交
        async function handleUpdateExam(event) {
            event.preventDefault();

            // 同步Markdown编辑器内容到隐藏字段
            syncMarkdownContent();

            // 验证表单
            if (!validateForm()) {
                return;
            }

            const examId = document.getElementById('examId').value;
            // 安全获取DOM元素值，添加null检查
            const allowRetakeElement = document.getElementById('allowRetake');

            const formData = {
                name: document.getElementById('examName').value,
                description: document.getElementById('examDescription').value,
                examType: parseInt(document.getElementById('examType').value),
                totalScore: parseFloat(document.getElementById('totalScore').value),
                durationMinutes: parseInt(document.getElementById('durationMinutes').value),
                passingScore: parseFloat(document.getElementById('passingScore').value),
                allowRetake: allowRetakeElement ? allowRetakeElement.checked : false,
                maxRetakeCount: parseInt(document.getElementById('maxRetakeCount').value),
                randomizeQuestions: false, // 默认不随机题目顺序
                showScore: true, // 默认显示分数
                showAnswers: false, // 默认不显示答案
                tags: document.getElementById('examTags').value,
                startTime: document.getElementById('startTime').value || null,
                endTime: document.getElementById('endTime').value || null
            };

            try {
                showLoading();
                const response = await fetch(`/api/Exam/${examId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    const exam = await response.json();
                    showNotification('试卷更新成功！', 'success');

                    // 2秒后跳转到试卷详情页
                    setTimeout(() => {
                        window.location.href = `@Url.Action("ExamDetails", "ExamManagement")?id=${examId}`;
                    }, 2000);
                } else {
                    const error = await response.text();
                    showNotification(`更新失败: ${error}`, 'danger');
                }
            } catch (error) {
                console.error('更新试卷失败:', error);
                showNotification('更新试卷失败', 'danger');
            } finally {
                hideLoading();
            }
        }

        // 保存并继续编辑
        async function saveAndContinue() {
            // 验证表单
            if (!validateForm()) {
                return;
            }

            const examId = document.getElementById('examId').value;

            // 安全获取DOM元素值，添加null检查
            const allowRetakeElement = document.getElementById('allowRetake');

            const formData = {
                name: document.getElementById('examName').value,
                description: document.getElementById('examDescription').value,
                examType: parseInt(document.getElementById('examType').value),
                totalScore: parseFloat(document.getElementById('totalScore').value),
                durationMinutes: parseInt(document.getElementById('durationMinutes').value),
                passingScore: parseFloat(document.getElementById('passingScore').value),
                allowRetake: allowRetakeElement ? allowRetakeElement.checked : false,
                maxRetakeCount: parseInt(document.getElementById('maxRetakeCount').value),
                randomizeQuestions: false, // 默认不随机题目顺序
                showScore: true, // 默认显示分数
                showAnswers: false, // 默认不显示答案
                tags: document.getElementById('examTags').value,
                startTime: document.getElementById('startTime').value || null,
                endTime: document.getElementById('endTime').value || null
            };

            try {
                showLoading();
                const response = await fetch(`/api/Exam/${examId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    showNotification('试卷保存成功！', 'success');
                } else {
                    const error = await response.text();
                    showNotification(`保存失败: ${error}`, 'danger');
                }
            } catch (error) {
                console.error('保存试卷失败:', error);
                showNotification('保存试卷失败', 'danger');
            } finally {
                hideLoading();
            }
        }

        // 同步Markdown编辑器内容
        function syncMarkdownContent() {
            const markdownTextarea = document.getElementById('examDescription');
            const hiddenField = document.getElementById('examDescriptionHidden');

            if (markdownTextarea && hiddenField) {
                hiddenField.value = markdownTextarea.value;
            }
        }

        // 保存并继续编辑
        function saveAndContinue() {
            // 同步内容
            syncMarkdownContent();

            // 触发表单提交，但不跳转
            const form = document.getElementById('edit-exam-form');
            if (form) {
                // 添加一个标记表示这是"保存并继续"操作
                const continueInput = document.createElement('input');
                continueInput.type = 'hidden';
                continueInput.name = 'continueEditing';
                continueInput.value = 'true';
                form.appendChild(continueInput);

                handleUpdateExam({ preventDefault: () => {} });
            }
        }

        // 重置表单
        function resetForm() {
            if (confirm('确定要重置表单吗？所有未保存的更改将丢失。')) {
                document.getElementById('edit-exam-form').reset();

                // 重置Markdown编辑器
                const markdownTextarea = document.getElementById('examDescription');
                if (markdownTextarea) {
                    markdownTextarea.value = '@Model.Description';
                    // 触发input事件以更新预览
                    markdownTextarea.dispatchEvent(new Event('input', { bubbles: true }));
                }

                showNotification('表单已重置', 'info');
            }
        }

        // 验证表单
        function validateForm() {
            // 验证必填项
            const requiredFields = ['examName', 'examType', 'totalScore', 'durationMinutes', 'passingScore'];
            for (const fieldId of requiredFields) {
                const field = document.getElementById(fieldId);
                if (!field.value.trim()) {
                    showNotification(`请填写${field.previousElementSibling.textContent.replace(' *', '')}`, 'warning');
                    field.focus();
                    return false;
                }
            }

            // 验证试卷名称长度
            const examName = document.getElementById('examName').value.trim();
            if (examName.length < 2 || examName.length > 200) {
                showNotification('试卷名称长度应在2-200个字符之间', 'warning');
                document.getElementById('examName').focus();
                return false;
            }

            // 验证数值范围
            const totalScore = parseFloat(document.getElementById('totalScore').value);
            if (totalScore < 0.1 || totalScore > 9999.99) {
                showNotification('总分应在0.1-9999.99之间', 'warning');
                document.getElementById('totalScore').focus();
                return false;
            }

            const durationMinutes = parseInt(document.getElementById('durationMinutes').value);
            if (durationMinutes < 1 || durationMinutes > 600) {
                showNotification('考试时长应在1-600分钟之间', 'warning');
                document.getElementById('durationMinutes').focus();
                return false;
            }

            // 验证及格分数不能超过总分
            const passingScore = parseFloat(document.getElementById('passingScore').value);
            if (passingScore > totalScore) {
                showNotification('及格分数不能超过总分', 'warning');
                document.getElementById('passingScore').focus();
                return false;
            }

            // 验证时间范围
            if (!validateTimeRange()) {
                return false;
            }

            return true;
        }

        // 验证时间范围
        function validateTimeRange() {
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;

            if (startTime && endTime) {
                const start = new Date(startTime);
                const end = new Date(endTime);

                if (start >= end) {
                    showNotification('考试结束时间必须晚于开始时间', 'warning');
                    document.getElementById('endTime').focus();
                    return false;
                }

                // 检查时间间隔是否合理（至少要有考试时长的时间）
                const durationMinutes = parseInt(document.getElementById('durationMinutes').value);
                const timeDiff = (end - start) / (1000 * 60); // 转换为分钟

                if (timeDiff < durationMinutes) {
                    showNotification(`考试时间窗口（${Math.round(timeDiff)}分钟）不能小于考试时长（${durationMinutes}分钟）`, 'warning');
                    document.getElementById('endTime').focus();
                    return false;
                }
            }

            return true;
        }

        // 重置表单
        function resetForm() {
            if (confirm('确定要重置表单吗？所有未保存的修改将丢失。')) {
                location.reload();
            }
        }

        // 验证并发布试卷
        async function validateAndPublish() {
            if (confirm('确定要验证并发布此试卷吗？发布后将无法修改核心配置。')) {
                try {
                    const examId = document.getElementById('examId').value;
                    showLoading();

                    const response = await fetch(`/api/Exam/${examId}/validate`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        showNotification('试卷验证通过，正在发布...', 'success');
                        // 这里可以添加发布逻辑
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    } else {
                        const error = await response.text();
                        showNotification(`验证失败: ${error}`, 'danger');
                    }
                } catch (error) {
                    console.error('验证试卷失败:', error);
                    showNotification('验证试卷失败', 'danger');
                } finally {
                    hideLoading();
                }
            }
        }

        // 复制试卷
        async function duplicateExam() {
            const examName = document.getElementById('examName').value;
            const newName = prompt(`请输入新试卷名称:`, `${examName} - 副本`);

            if (newName && newName.trim()) {
                try {
                    const examId = document.getElementById('examId').value;
                    showLoading();

                    const response = await fetch(`/api/Exam/${examId}/duplicate`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            newName: newName.trim(),
                            createdBy: 1 // 假设当前用户ID为1
                        })
                    });

                    if (response.ok) {
                        const newExam = await response.json();
                        showNotification('试卷复制成功！', 'success');

                        setTimeout(() => {
                            window.location.href = `@Url.Action("EditExam", "ExamManagement")?id=${newExam.id}`;
                        }, 2000);
                    } else {
                        const error = await response.text();
                        showNotification(`复制失败: ${error}`, 'danger');
                    }
                } catch (error) {
                    console.error('复制试卷失败:', error);
                    showNotification('复制试卷失败', 'danger');
                } finally {
                    hideLoading();
                }
            }
        }

        // 显示加载状态
        function showLoading() {
            document.getElementById('loading').style.display = 'block';
        }

        // 隐藏加载状态
        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }
    </script>
}

@functions {
    private string GetStatusText(ExaminaWebApplication.Models.Exam.ExamStatus status)
    {
        return status switch
        {
            ExaminaWebApplication.Models.Exam.ExamStatus.Draft => "草稿",
            ExaminaWebApplication.Models.Exam.ExamStatus.UnderReview => "审核中",
            ExaminaWebApplication.Models.Exam.ExamStatus.Published => "已发布",
            ExaminaWebApplication.Models.Exam.ExamStatus.InProgress => "进行中",
            ExaminaWebApplication.Models.Exam.ExamStatus.Completed => "已结束",
            ExaminaWebApplication.Models.Exam.ExamStatus.Suspended => "已暂停",
            ExaminaWebApplication.Models.Exam.ExamStatus.Cancelled => "已取消",
            ExaminaWebApplication.Models.Exam.ExamStatus.Archived => "已归档",
            _ => "未知"
        };
    }

    private string GetStatusBadgeClass(ExaminaWebApplication.Models.Exam.ExamStatus status)
    {
        return status switch
        {
            ExaminaWebApplication.Models.Exam.ExamStatus.Draft => "bg-secondary",
            ExaminaWebApplication.Models.Exam.ExamStatus.UnderReview => "bg-warning",
            ExaminaWebApplication.Models.Exam.ExamStatus.Published => "bg-success",
            ExaminaWebApplication.Models.Exam.ExamStatus.InProgress => "bg-primary",
            ExaminaWebApplication.Models.Exam.ExamStatus.Completed => "bg-info",
            ExaminaWebApplication.Models.Exam.ExamStatus.Suspended => "bg-warning",
            ExaminaWebApplication.Models.Exam.ExamStatus.Cancelled => "bg-danger",
            ExaminaWebApplication.Models.Exam.ExamStatus.Archived => "bg-dark",
            _ => "bg-secondary"
        };
    }
}

<!-- Markdown帮助模态框 -->
<div class="modal fade" id="markdownHelpModal" tabindex="-1" aria-labelledby="markdownHelpModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title" id="markdownHelpModalLabel">
                    <i class="bi bi-markdown me-2"></i>Markdown语法帮助
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6><i class="bi bi-type me-2"></i>文本格式</h6>
                        <div class="markdown-help-item">
                            <code>**粗体文本**</code>
                            <div class="help-result"><strong>粗体文本</strong></div>
                        </div>
                        <div class="markdown-help-item">
                            <code>*斜体文本*</code>
                            <div class="help-result"><em>斜体文本</em></div>
                        </div>
                        <div class="markdown-help-item">
                            <code>`代码文本`</code>
                            <div class="help-result"><code>代码文本</code></div>
                        </div>

                        <h6 class="mt-4"><i class="bi bi-type-h1 me-2"></i>标题</h6>
                        <div class="markdown-help-item">
                            <code># 一级标题</code>
                            <div class="help-result"><h1 style="font-size: 1.5rem; margin: 0;">一级标题</h1></div>
                        </div>
                        <div class="markdown-help-item">
                            <code>## 二级标题</code>
                            <div class="help-result"><h2 style="font-size: 1.3rem; margin: 0;">二级标题</h2></div>
                        </div>
                        <div class="markdown-help-item">
                            <code>### 三级标题</code>
                            <div class="help-result"><h3 style="font-size: 1.1rem; margin: 0;">三级标题</h3></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="bi bi-list-ul me-2"></i>列表</h6>
                        <div class="markdown-help-item">
                            <code>- 无序列表项<br>- 另一个项目</code>
                            <div class="help-result">
                                <ul style="margin: 0;">
                                    <li>无序列表项</li>
                                    <li>另一个项目</li>
                                </ul>
                            </div>
                        </div>
                        <div class="markdown-help-item">
                            <code>1. 有序列表项<br>2. 另一个项目</code>
                            <div class="help-result">
                                <ol style="margin: 0;">
                                    <li>有序列表项</li>
                                    <li>另一个项目</li>
                                </ol>
                            </div>
                        </div>

                        <h6 class="mt-4"><i class="bi bi-link me-2"></i>链接和其他</h6>
                        <div class="markdown-help-item">
                            <code>[链接文本](URL)</code>
                            <div class="help-result"><a href="#">链接文本</a></div>
                        </div>
                        <div class="markdown-help-item">
                            <code>---</code>
                            <div class="help-result"><hr style="margin: 8px 0;"></div>
                        </div>
                        <div class="markdown-help-item">
                            <code>&gt; 引用文本</code>
                            <div class="help-result">
                                <blockquote style="margin: 0; padding-left: 12px; border-left: 3px solid #ccc; color: #666;">
                                    引用文本
                                </blockquote>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">关闭</button>
            </div>
        </div>
    </div>
}
