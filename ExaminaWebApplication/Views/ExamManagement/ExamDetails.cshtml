@model ExaminaWebApplication.Models.ImportedExam.ImportedExam
@{
    ViewData["Title"] = $"考试详情 - {Model.Name}";
}

<!-- 页面标题横幅 -->
<div class="glass-card glass-card-primary py-4 mb-4">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-6 fw-bold mb-2">
                    <i class="bi bi-eye me-3"></i>考试详情
                </h1>
                <p class="lead mb-0">@Model.Name</p>
            </div>
            <div class="col-md-4 text-end">
                <a asp-action="Index" class="glass-btn me-2">
                    <i class="bi bi-arrow-left me-1"></i>返回列表
                </a>
                <a asp-action="ExamSchedule" asp-route-id="@Model.Id" class="glass-btn glass-btn-success me-2">
                    <i class="bi bi-calendar-event me-1"></i>设置时间
                </a>
                <button type="button" class="glass-btn glass-btn-danger"
                        onclick="deleteExam(@Model.Id, '@Model.Name')">
                    <i class="bi bi-trash me-1"></i>删除考试
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 防伪令牌 -->
@Html.AntiForgeryToken()

<!-- 主要内容区域 -->
<div class="container">
    <!-- 考试基本信息 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="glass-card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-info-circle me-2"></i>基本信息
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <h3 class="mb-3">@Model.Name</h3>
                            @if (!string.IsNullOrEmpty(Model.Description))
                            {
                                <p class="text-muted mb-3">@Model.Description</p>
                            }
                            @if (!string.IsNullOrEmpty(Model.Tags))
                            {
                                <div class="mb-3">
                                    <strong>标签：</strong>
                                    @foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <span class="badge bg-light text-dark me-1">@tag.Trim()</span>
                                    }
                                </div>
                            }
                        </div>
                        <div class="col-md-4">
                            <div class="text-end">
                                <div class="mb-2">
                                    <span class="badge bg-secondary fs-6">@Model.ExamType</span>
                                </div>
                                <div>
                                    @switch (Model.Status)
                                    {
                                        case "Draft":
                                            <span class="badge bg-warning fs-6">草稿</span>
                                            break;
                                        case "Published":
                                            <span class="badge bg-success fs-6">已发布</span>
                                            break;
                                        case "Archived":
                                            <span class="badge bg-secondary fs-6">已归档</span>
                                            break;
                                        default:
                                            <span class="badge bg-light text-dark fs-6">@Model.Status</span>
                                            break;
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 考试设置 -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="glass-card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-gear me-2"></i>考试设置
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-6">
                            <div class="border rounded p-3 text-center">
                                <h4 class="text-primary mb-1">@Model.TotalScore</h4>
                                <small class="text-muted">总分</small>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="border rounded p-3 text-center">
                                <h4 class="text-info mb-1">@Model.DurationMinutes</h4>
                                <small class="text-muted">时长(分钟)</small>
                            </div>
                        </div>

                        <div class="col-6">
                            <div class="border rounded p-3 text-center">
                                <h4 class="text-warning mb-1">@Model.MaxRetakeCount</h4>
                                <small class="text-muted">重考次数</small>
                            </div>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <!-- 考试模式设置 -->
                    <div class="row">
                        <div class="col-12">
                            <h6 class="mb-3">
                                <i class="bi bi-gear me-2"></i>考试模式设置
                            </h6>
                        </div>
                    </div>

                    <div class="row g-4 mb-4">
                        <!-- 允许重考设置 -->
                        <div class="col-md-6">
                            <div class="glass-card h-100">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <i class="bi bi-arrow-repeat text-primary me-3" style="font-size: 1.5rem;"></i>
                                        <div>
                                            <h6 class="mb-1">允许重考</h6>
                                            <small class="text-muted">学生可以重新参加考试，成绩将被记录和排名</small>
                                        </div>
                                    </div>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="allowRetakeSwitch"
                                               @(Model.AllowRetake ? "checked" : "")
                                               onchange="updateExamSetting('AllowRetake', this.checked)">
                                        <label class="form-check-label" for="allowRetakeSwitch">
                                            <span id="allowRetakeLabel">@(Model.AllowRetake ? "已启用" : "已禁用")</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 允许重做设置 -->
                        <div class="col-md-6">
                            <div class="glass-card h-100">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <i class="bi bi-play-circle text-success me-3" style="font-size: 1.5rem;"></i>
                                        <div>
                                            <h6 class="mb-1">允许重做</h6>
                                            <small class="text-muted">学生可以练习考试，但不记录分数和排名</small>
                                        </div>
                                    </div>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="allowPracticeSwitch"
                                               @(Model.AllowPractice ? "checked" : "")
                                               onchange="updateExamSetting('AllowPractice', this.checked)">
                                        <label class="form-check-label" for="allowPracticeSwitch">
                                            <span id="allowPracticeLabel">@(Model.AllowPractice ? "已启用" : "已禁用")</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <hr>

                    <!-- 考试类型设置 -->
                    <div class="row">
                        <div class="col-12">
                            <div class="glass-card glass-card-secondary">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-1 text-white">
                                                <i class="bi bi-building me-2"></i>考试类型
                                            </h6>
                                            <small class="text-white-50">设置考试的组织级别</small>
                                        </div>
                                        <div>
                                            <div class="btn-group glass-btn-group" role="group" aria-label="考试类型选择">
                                                <input type="radio" class="btn-check" name="examCategory" id="examCategorySchool"
                                                       value="0" @(Model.ExamCategory == ExaminaWebApplication.Models.ImportedExam.ExamCategory.School ? "checked" : "")
                                                       onchange="updateExamCategory(@Model.Id, this.value)">
                                                <label class="glass-btn glass-btn-outline" for="examCategorySchool">学校统考</label>

                                                <input type="radio" class="btn-check" name="examCategory" id="examCategoryProvincial"
                                                       value="1" @(Model.ExamCategory == ExaminaWebApplication.Models.ImportedExam.ExamCategory.Provincial ? "checked" : "")
                                                       onchange="updateExamCategory(@Model.Id, this.value)">
                                                <label class="glass-btn glass-btn-outline" for="examCategoryProvincial">全省统考</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- 时间信息 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="glass-card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-clock me-2"></i>时间信息
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>导入时间：</strong><br>
                            <span class="text-muted">@Model.ImportedAt.ToString("yyyy-MM-dd HH:mm:ss")</span>
                        </div>
                        <div class="col-md-3">
                            <strong>原始创建时间：</strong><br>
                            <span class="text-muted">@Model.OriginalCreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</span>
                        </div>
                        @if (Model.OriginalUpdatedAt.HasValue)
                        {
                            <div class="col-md-3">
                                <strong>原始更新时间：</strong><br>
                                <span class="text-muted">@Model.OriginalUpdatedAt.Value.ToString("yyyy-MM-dd HH:mm:ss")</span>
                            </div>
                        }
                        @if (Model.OriginalPublishedAt.HasValue)
                        {
                            <div class="col-md-3">
                                <strong>原始发布时间：</strong><br>
                                <span class="text-muted">@Model.OriginalPublishedAt.Value.ToString("yyyy-MM-dd HH:mm:ss")</span>
                            </div>
                        }
                    </div>
                    
                    @if (Model.StartTime.HasValue || Model.EndTime.HasValue)
                    {
                        <hr>
                        <div class="row">
                            @if (Model.StartTime.HasValue)
                            {
                                <div class="col-md-6">
                                    <strong>考试开始时间：</strong><br>
                                    <span class="text-muted">@Model.StartTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</span>
                                </div>
                            }
                            @if (Model.EndTime.HasValue)
                            {
                                <div class="col-md-6">
                                    <strong>考试结束时间：</strong><br>
                                    <span class="text-muted">@Model.EndTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</span>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- 导入信息 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="glass-card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-download me-2"></i>导入信息
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>原始考试ID：</strong><br>
                            <span class="text-muted">@Model.OriginalExamId</span>
                        </div>
                        <div class="col-md-3">
                            <strong>导入文件：</strong><br>
                            <span class="text-muted">@Model.ImportFileName</span>
                        </div>
                        <div class="col-md-3">
                            <strong>文件大小：</strong><br>
                            <span class="text-muted">@((Model.ImportFileSize / 1024.0).ToString("F1")) KB</span>
                        </div>
                        <div class="col-md-3">
                            <strong>导入版本：</strong><br>
                            <span class="text-muted">@Model.ImportVersion</span>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <strong>导入状态：</strong>
                            @switch (Model.ImportStatus)
                            {
                                case "Success":
                                    <span class="badge bg-success">导入成功</span>
                                    break;
                                case "Failed":
                                    <span class="badge bg-danger">导入失败</span>
                                    break;
                                default:
                                    <span class="badge bg-warning">@Model.ImportStatus</span>
                                    break;
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(Model.ImportErrorMessage))
                        {
                            <div class="col-md-6">
                                <strong>错误信息：</strong><br>
                                <span class="text-danger">@Model.ImportErrorMessage</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 文件管理 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="glass-card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-files me-2"></i>文件管理
                    </h5>
                </div>
                <div class="card-body">
                    <!-- 文件上传组件 -->
                    @{
                        ViewData["ContainerId"] = "exam-file-upload";
                        ViewData["Multiple"] = true;
                        ViewData["AutoUpload"] = false;
                    }
                    @await Html.PartialAsync("_FileUpload")

                    <!-- 已关联的文件列表 -->
                    <div id="associated-files-section" style="margin-top: 30px;">
                        <h6><i class="bi bi-link-45deg me-2"></i>已关联的文件</h6>
                        <div id="associated-files-list">
                            <div class="text-center text-muted py-3">
                                <i class="bi bi-inbox display-4 mb-2"></i>
                                <p>暂无关联文件</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // 文件上传完成后的回调
        window.onFilesUploaded = function(uploadedFiles, failedFiles) {
            // 自动关联上传的文件到当前考试
            uploadedFiles.forEach(file => {
                associateFileToExam(file.fileId, 'Attachment');
            });

            // 刷新已关联文件列表
            loadAssociatedFiles();
        };

        // 关联文件到考试
        function associateFileToExam(fileId, fileType = 'Attachment', purpose = '') {
            const formData = new FormData();
            formData.append('fileType', fileType);
            if (purpose) {
                formData.append('purpose', purpose);
            }

            fetch(`/api/fileupload/associate/exam/@Model.Id/file/${fileId}`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    console.log('文件关联成功');
                } else {
                    console.error('文件关联失败:', result.message);
                }
            })
            .catch(error => {
                console.error('文件关联过程中发生错误:', error);
            });
        }

        // 加载已关联的文件列表
        function loadAssociatedFiles() {
            fetch(`/api/fileupload/exam/@Model.Id/files`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        displayAssociatedFiles(result.data);
                    } else {
                        console.error('加载文件列表失败:', result.message);
                    }
                })
                .catch(error => {
                    console.error('加载文件列表过程中发生错误:', error);
                });
        }

        // 显示已关联的文件列表
        function displayAssociatedFiles(files) {
            const container = document.getElementById('associated-files-list');

            if (files.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-muted py-3">
                        <i class="bi bi-inbox display-4 mb-2"></i>
                        <p>暂无关联文件</p>
                    </div>
                `;
                return;
            }

            const filesHtml = files.map(file => `
                <div class="file-item d-flex justify-content-between align-items-center p-3 border rounded mb-2">
                    <div class="file-info d-flex align-items-center">
                        <i class="bi ${getFileIcon(file.originalFileName)} me-3 text-primary" style="font-size: 1.5rem;"></i>
                        <div>
                            <div class="fw-medium">${file.originalFileName}</div>
                            <small class="text-muted">${formatFileSize(file.fileSize)} • ${new Date(file.uploadedAt).toLocaleString()}</small>
                        </div>
                    </div>
                    <div class="file-actions">
                        <a href="${file.downloadUrl}" class="btn btn-sm btn-outline-primary me-2" download>
                            <i class="bi bi-download"></i> 下载
                        </a>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFileAssociation(${file.fileId})">
                            <i class="bi bi-unlink"></i> 取消关联
                        </button>
                    </div>
                </div>
            `).join('');

            container.innerHTML = filesHtml;
        }

        // 取消文件关联
        async function removeFileAssociation(fileId) {
            if (!confirm('确定要取消关联这个文件吗？文件本身不会被删除，只是取消与当前考试的关联。')) {
                return;
            }

            try {
                const examId = @Model.Id;
                const response = await fetch(`/api/fileupload/disassociate/exam/${examId}/file/${fileId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showToast('文件关联已取消', 'success');
                    await loadAssociatedFiles(); // 重新加载文件列表
                } else {
                    showToast(result.message || '取消关联失败', 'error');
                }
            } catch (error) {
                console.error('取消文件关联时发生错误:', error);
                showToast('取消文件关联时发生错误', 'error');
            }
        }

        // 获取文件图标
        function getFileIcon(fileName) {
            const extension = fileName.split('.').pop().toLowerCase();
            const iconMap = {
                'pdf': 'bi-file-earmark-pdf',
                'doc': 'bi-file-earmark-word',
                'docx': 'bi-file-earmark-word',
                'xls': 'bi-file-earmark-excel',
                'xlsx': 'bi-file-earmark-excel',
                'ppt': 'bi-file-earmark-ppt',
                'pptx': 'bi-file-earmark-ppt',
                'zip': 'bi-file-earmark-zip',
                'rar': 'bi-file-earmark-zip',
                '7z': 'bi-file-earmark-zip',
                'jpg': 'bi-file-earmark-image',
                'jpeg': 'bi-file-earmark-image',
                'png': 'bi-file-earmark-image',
                'gif': 'bi-file-earmark-image',
                'bmp': 'bi-file-earmark-image',
                'mp4': 'bi-file-earmark-play',
                'avi': 'bi-file-earmark-play',
                'mov': 'bi-file-earmark-play',
                'wmv': 'bi-file-earmark-play',
                'mp3': 'bi-file-earmark-music',
                'wav': 'bi-file-earmark-music',
                'wma': 'bi-file-earmark-music',
                'txt': 'bi-file-earmark-text',
                'rtf': 'bi-file-earmark-text',
                'json': 'bi-file-earmark-code',
                'xml': 'bi-file-earmark-code'
            };
            return iconMap[extension] || 'bi-file-earmark';
        }

        // 格式化文件大小
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 页面加载完成后加载已关联的文件
        document.addEventListener('DOMContentLoaded', function() {
            loadAssociatedFiles();
        });

        function deleteExam(examId, examName) {
            if (confirm(`确定要删除考试"${examName}"吗？此操作不可撤销。`)) {
                // 获取防伪令牌
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement) {
                    alert('页面配置错误，请刷新页面重试');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("DeleteExam")',
                    type: 'POST',
                    data: {
                        id: examId,
                        __RequestVerificationToken: tokenElement.value
                    },
                    success: function(result) {
                        if (result.success) {
                            window.location.href = '@Url.Action("ExamList")';
                        } else {
                            alert('删除失败: ' + result.message);
                        }
                    },
                    error: function() {
                        alert('删除失败，请稍后重试');
                    }
                });
            }
        }

        function updateExamCategory(examId, categoryValue) {
            // 显示加载状态
            const radioButtons = document.querySelectorAll('input[name="examCategory"]');
            radioButtons.forEach(radio => radio.disabled = true);

            // 获取防伪令牌
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenElement) {
                console.error('防伪令牌未找到');
                showToast('error', '页面配置错误，请刷新页面重试');
                radioButtons.forEach(radio => radio.disabled = false);
                return;
            }

            // 创建表单数据
            const formData = new FormData();
            formData.append('id', examId);
            formData.append('examCategory', categoryValue);
            formData.append('__RequestVerificationToken', tokenElement.value);

            // 发送AJAX请求
            fetch('@Url.Action("UpdateExamCategory")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // 显示成功提示
                    showToast('success', data.message);
                } else {
                    // 更新失败，恢复原来的选择
                    const originalValue = categoryValue === '0' ? '1' : '0';
                    document.querySelector(`input[name="examCategory"][value="${originalValue}"]`).checked = true;

                    // 显示错误提示
                    showToast('error', data.message || '更新失败');
                }
            })
            .catch(error => {
                console.error('更新考试类型失败:', error);

                // 恢复原来的选择
                const originalValue = categoryValue === '0' ? '1' : '0';
                document.querySelector(`input[name="examCategory"][value="${originalValue}"]`).checked = true;

                // 显示错误提示
                showToast('error', '网络错误，请稍后重试');
            })
            .finally(() => {
                // 恢复单选按钮可用状态
                radioButtons.forEach(radio => radio.disabled = false);
            });
        }

        // 更新考试设置（重考和重做）
        function updateExamSetting(settingName, value) {
            const examId = @Model.Id;

            // 禁用开关防止重复点击
            const switchElement = document.getElementById(settingName === 'AllowRetake' ? 'allowRetakeSwitch' : 'allowPracticeSwitch');
            const labelElement = document.getElementById(settingName === 'AllowRetake' ? 'allowRetakeLabel' : 'allowPracticeLabel');

            switchElement.disabled = true;

            fetch(`/ExamManagement/update-setting/${examId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    settingName: settingName,
                    value: value
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // 更新标签文本
                    labelElement.textContent = value ? '已启用' : '已禁用';

                    // 显示成功提示
                    const settingDisplayName = settingName === 'AllowRetake' ? '重考设置' : '重做设置';
                    showToast('success', `${settingDisplayName}已${value ? '启用' : '禁用'}`);
                } else {
                    // 更新失败，恢复开关状态
                    switchElement.checked = !value;

                    // 显示错误提示
                    showToast('error', data.message || '更新失败');
                }
            })
            .catch(error => {
                console.error('更新考试设置失败:', error);

                // 恢复开关状态
                switchElement.checked = !value;

                // 显示错误提示
                showToast('error', '网络错误，请稍后重试');
            })
            .finally(() => {
                // 恢复开关可用状态
                switchElement.disabled = false;
            });
        }

        function showToast(type, message) {
            // 使用玻璃拟态通知系统
            if (typeof showNotification === 'function') {
                showNotification(message, type);
            } else if (typeof glassNotification !== 'undefined') {
                glassNotification.show(message, type);
            } else {
                // 降级到简单的提示框
                const toast = document.createElement('div');
                toast.className = `glass-notification glass-alert-${type} alert-dismissible fade show position-fixed`;
                toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                toast.innerHTML = `
                    <div class="glass-notification-content">
                        <i class="bi ${type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="glass-btn-close" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                `;

                document.body.appendChild(toast);

                // 添加显示动画
                requestAnimationFrame(() => {
                    toast.classList.add('show');
                });

                // 添加关闭事件
                const closeBtn = toast.querySelector('.glass-btn-close');
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        toast.classList.add('fade-out');
                        setTimeout(() => {
                            if (toast.parentNode) {
                                toast.parentNode.removeChild(toast);
                            }
                        }, 300);
                    });
                }

                // 3秒后自动移除
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.classList.add('fade-out');
                        setTimeout(() => {
                            if (toast.parentNode) {
                                toast.parentNode.removeChild(toast);
                            }
                        }, 300);
                    }
                }, 3000);
            }
        }
    </script>
}
