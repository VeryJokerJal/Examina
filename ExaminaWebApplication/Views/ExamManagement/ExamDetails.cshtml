@model ExaminaWebApplication.Models.Exam.Exam
@{
	ViewData["Title"] = $"试卷详情 - {Model.Name}";
}

<!-- 页面标题和操作按钮 -->
<div class="d-flex justify-content-between align-items-center mb-4">
	<div>
		<h1 class="h3 mb-0">
			<i class="bi bi-file-earmark-text me-2"></i>@Model.Name
		</h1>
		<p class="text-muted mb-0">试卷详细信息</p>
	</div>
	<div>
		<a href="@Url.Action("ExamList", "ExamManagement")" class="glass-btn">
			<i class="bi bi-arrow-left"></i> 返回列表
		</a>

		@if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Draft)
		{
			<a href="@Url.Action("EditExam", "ExamManagement", new { id = Model.Id })" class="glass-btn glass-btn-warning">
				<i class="bi bi-pencil"></i> 编辑试卷
			</a>
			<a href="@Url.Action("ValidateExam", "ExamManagement", new { id = Model.Id })" class="glass-btn glass-btn-success">
				<i class="bi bi-check-circle"></i> 验证发布
			</a>
		}
		else if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Published)
		{
			<a href="@Url.Action("EditExam", "ExamManagement", new { id = Model.Id })" class="glass-btn glass-btn-warning">
				<i class="bi bi-pencil"></i> 编辑信息
			</a>
		}

		@if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Published)
		{
			<button class="glass-btn glass-btn-primary" onclick="startExam(@Model.Id)">
				<i class="bi bi-play-circle"></i> 开始考试
			</button>
		}

		<div class="btn-group">
			<button type="button" class="glass-btn glass-btn-primary dropdown-toggle" data-bs-toggle="dropdown">
				<i class="bi bi-three-dots"></i> 更多操作
			</button>
			<ul class="dropdown-menu glass-dropdown-menu">
				<li>
					<a class="dropdown-item glass-dropdown-item" href="#" onclick="copyExam(@Model.Id)">
						<i class="bi bi-copy me-2"></i>复制试卷
					</a>
				</li>
				<li>
					<a class="dropdown-item glass-dropdown-item" href="#" onclick="exportExam(@Model.Id)">
						<i class="bi bi-download me-2"></i>导出试卷
					</a>
				</li>
				<li><hr class="dropdown-divider"></li>
				@if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Draft)
				{
					<li>
						<a class="dropdown-item glass-dropdown-item text-danger" href="#" onclick="deleteExam(@Model.Id, '@Model.Name')">
							<i class="bi bi-trash me-2"></i>删除试卷
						</a>
					</li>
				}
			</ul>
		</div>
	</div>
</div>

<!-- 试卷状态标识 -->
<div class="row mb-4">
	<div class="col-md-12">
		<div class="glass-alert @GetStatusAlertClass(Model.Status)" role="alert">
			<div class="d-flex align-items-center">
				<i class="bi @GetStatusIcon(Model.Status) me-2"></i>
				<div>
					<strong>试卷状态：@GetStatusText(Model.Status)</strong>
					@if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Published && Model.PublishedAt.HasValue)
					{
						<span class="ms-2">发布时间：@Model.PublishedAt.Value.ToString("yyyy-MM-dd HH:mm")</span>
					}
				</div>
			</div>
		</div>
	</div>
</div>

<!-- 试卷基本信息 -->
<div class="row mb-4">
	<div class="col-md-8">
		<div class="glass-card">
			<div class="card-header">
				<h5 class="mb-0">
					<i class="bi bi-info-circle me-2"></i>基本信息
				</h5>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-md-6">
						<table class="table-borderless glass-table">
							<tr>
								<td class="text-muted" style="width: 120px;">试卷名称：</td>
								<td><strong>@Model.Name</strong></td>
							</tr>
							<tr>
								<td class="text-muted">试卷类型：</td>
								<td>
									<span class="badge @GetTypeBadgeClass(Model.ExamType)">
										@GetTypeText(Model.ExamType)
									</span>
								</td>
							</tr>
							<tr>
								<td class="text-muted">总分：</td>
								<td><strong class="text-primary">@Model.TotalScore 分</strong></td>
							</tr>
							<tr>
								<td class="text-muted">考试时长：</td>
								<td><strong class="text-info">@Model.DurationMinutes 分钟</strong></td>
							</tr>
							<tr>
								<td class="text-muted">及格分数：</td>
								<td><strong class="text-success">@Model.PassingScore 分</strong></td>
							</tr>
						</table>
					</div>
					<div class="col-md-6">
						<table class="table-borderless glass-table">
							<tr>
								<td class="text-muted" style="width: 120px;">创建时间：</td>
								<td>@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
							</tr>
							@if (Model.UpdatedAt.HasValue)
							{
								<tr>
									<td class="text-muted">更新时间：</td>
									<td>@Model.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm")</td>
								</tr>
							}
							<tr>
								<td class="text-muted">允许重考：</td>
								<td>
									@if (Model.AllowRetake)
									{
										<span class="text-success">是（最多 @Model.MaxRetakeCount 次）</span>
									}
									else
									{
										<span class="text-muted">否</span>
									}
								</td>
							</tr>
							<tr>
								<td class="text-muted">随机题目：</td>
								<td>
									@if (Model.RandomizeQuestions)
									{
										<span class="text-warning">是</span>
									}
									else
									{
										<span class="text-muted">否</span>
									}
								</td>
							</tr>
							<tr>
								<td class="text-muted">显示分数：</td>
								<td>
									@if (Model.ShowScore)
									{
										<span class="text-success">是</span>
									}
									else
									{
										<span class="text-muted">否</span>
									}
								</td>
							</tr>
						</table>
					</div>
				</div>

				@if (!string.IsNullOrEmpty(Model.Description))
				{
					<div class="mt-3">
						<h6>试卷描述：</h6>
						<p class="text-muted">@Model.Description</p>
					</div>
				}

				@if (!string.IsNullOrEmpty(Model.Tags))
				{
					<div class="mt-3">
						<h6>标签：</h6>
						@foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
						{
							<span class="badge bg-secondary me-1">@tag.Trim()</span>
						}
					</div>
				}
			</div>
		</div>
	</div>

	<div class="col-md-4">
		<div class="glass-card">
			<div class="card-header">
				<h5 class="mb-0">
					<i class="bi bi-bar-chart me-2"></i>统计信息
				</h5>
			</div>
			<div class="card-body text-center">
				<div class="row g-0">
					<div class="col-6">
						<div class="border-end pe-3">
							<div class="glass-stat-item">
								<h4 class="text-primary mb-1 fw-bold">@Model.Subjects.Count</h4>
								<small class="text-muted d-block">科目数量</small>
							</div>
						</div>
					</div>
					<div class="col-6">
						<div class="ps-3">
							<div class="glass-stat-item">
								<h4 class="text-success mb-1 fw-bold">@Model.TotalScore</h4>
								<small class="text-muted d-block">试卷总分</small>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		@if (Model.StartTime.HasValue || Model.EndTime.HasValue)
		{
			<div class="glass-card mt-3">
				<div class="card-header">
					<h6 class="mb-0">
						<i class="bi bi-calendar me-2"></i>考试时间
					</h6>
				</div>
				<div class="card-body">
					@if (Model.StartTime.HasValue)
					{
						<p class="mb-1">
							<strong>开始时间：</strong><br>
							<span class="text-success">@Model.StartTime.Value.ToString("yyyy-MM-dd HH:mm")</span>
						</p>
					}
					@if (Model.EndTime.HasValue)
					{
						<p class="mb-0">
							<strong>结束时间：</strong><br>
							<span class="text-danger">@Model.EndTime.Value.ToString("yyyy-MM-dd HH:mm")</span>
						</p>
					}
				</div>
			</div>
		}
	</div>
</div>

<!-- 科目列表 -->
<div class="glass-card mb-4">
	<div class="card-header d-flex justify-content-between align-items-center">
		<h5 class="mb-0">
			<i class="bi bi-list-ul me-2"></i>科目列表 (@Model.Subjects.Count)
		</h5>
		@if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Draft)
		{

		}
	</div>
	<div class="card-body">
		@if (Model.Subjects.Any())
		{
			<div class="row">
				@foreach (var subject in Model.Subjects.OrderBy(s => s.SortOrder))
				{
					<div class="col-md-6 mb-3">
						<div class="glass-card glass-subject-card border-start border-4 @GetSubjectBorderClass(subject.SubjectType)">
							<div class="card-body p-3">
								<div class="d-flex justify-content-between align-items-start mb-3">
									<div class="flex-grow-1">
										<h6 class="card-title mb-2 fw-semibold">
											<i class="bi @GetSubjectIcon(subject.SubjectType) me-2 text-primary"></i>
											@subject.SubjectName
										</h6>
										@if (!string.IsNullOrEmpty(subject.Description))
										{
											<p class="card-text text-muted small mb-0 lh-sm">@subject.Description</p>
										}
									</div>
									<div class="text-end ms-2">
										@if (subject.IsEnabled)
										{
											<span class="badge bg-success glass-badge">启用</span>
										}
										else
										{
											<span class="badge bg-secondary glass-badge">禁用</span>
										}
									</div>
								</div>

								<div class="row text-center g-0 glass-stats-row">
									<div class="col-12">
										<div class="glass-stat-mini">
											<small class="text-muted d-block mb-1">分值</small>
											<div class="fw-bold text-primary h6 mb-0">@subject.Score</div>
										</div>
									</div>
								</div>

								@if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Draft)
								{
									<div class="mt-2">
										<a href="@Url.Action("QuestionManagement", "ExamManagement", new { subjectId = subject.Id })"
										   class="glass-btn glass-btn-primary btn-sm">
											<i class="bi bi-question-circle"></i> 管理题目
										</a>
									</div>
								}
							</div>
						</div>
					</div>
				}
			</div>
		}
		else
		{
			<div class="text-center py-4">
				<i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
				<h5 class="text-muted mt-2">暂无科目</h5>
				<p class="text-muted">请先添加科目，然后为每个科目创建题目</p>
				@if (Model.Status == ExaminaWebApplication.Models.Exam.ExamStatus.Draft)
				{
					<a href="@Url.Action("ExamDetails", "ExamManagement", new { id = Model.Id })" class="glass-btn glass-btn-primary">
						<i class="bi bi-plus"></i> 添加科目
					</a>
				}
			</div>
		}
	</div>
</div>



@functions {
	private string GetStatusAlertClass(ExaminaWebApplication.Models.Exam.ExamStatus status)
	{
		return status switch
		{
			ExaminaWebApplication.Models.Exam.ExamStatus.Draft => "alert-warning",
			ExaminaWebApplication.Models.Exam.ExamStatus.Published => "alert-success",
			ExaminaWebApplication.Models.Exam.ExamStatus.Archived => "alert-secondary",
			_ => "alert-info"
		};
	}

	private string GetStatusIcon(ExaminaWebApplication.Models.Exam.ExamStatus status)
	{
		return status switch
		{
			ExaminaWebApplication.Models.Exam.ExamStatus.Draft => "bi-pencil-square",
			ExaminaWebApplication.Models.Exam.ExamStatus.Published => "bi-check-circle-fill",
			ExaminaWebApplication.Models.Exam.ExamStatus.Archived => "bi-archive",
			_ => "bi-info-circle"
		};
	}

	private string GetStatusText(ExaminaWebApplication.Models.Exam.ExamStatus status)
	{
		return status switch
		{
			ExaminaWebApplication.Models.Exam.ExamStatus.Draft => "草稿",
			ExaminaWebApplication.Models.Exam.ExamStatus.Published => "已发布",
			ExaminaWebApplication.Models.Exam.ExamStatus.Archived => "已归档",
			_ => "未知"
		};
	}

	private string GetTypeBadgeClass(ExaminaWebApplication.Models.Exam.ExamType type)
	{
		return type switch
		{
			ExaminaWebApplication.Models.Exam.ExamType.UnifiedExam => "bg-primary",
			ExaminaWebApplication.Models.Exam.ExamType.MockExam => "bg-success",
			_ => "bg-secondary"
		};
	}

	private string GetTypeText(ExaminaWebApplication.Models.Exam.ExamType type)
	{
		return type switch
		{
			ExaminaWebApplication.Models.Exam.ExamType.UnifiedExam => "统一考试",
			ExaminaWebApplication.Models.Exam.ExamType.MockExam => "综合实训",
			_ => "未知类型"
		};
	}

	private string GetSubjectBorderClass(ExaminaWebApplication.Models.Exam.SubjectType type)
	{
		return type switch
		{
			ExaminaWebApplication.Models.Exam.SubjectType.Excel => "border-success",
			ExaminaWebApplication.Models.Exam.SubjectType.PowerPoint => "border-warning",
			ExaminaWebApplication.Models.Exam.SubjectType.Word => "border-info",
			ExaminaWebApplication.Models.Exam.SubjectType.Windows => "border-primary",
			ExaminaWebApplication.Models.Exam.SubjectType.CSharp => "border-danger",
			_ => "border-secondary"
		};
	}

	private string GetSubjectIcon(ExaminaWebApplication.Models.Exam.SubjectType type)
	{
		return type switch
		{
			ExaminaWebApplication.Models.Exam.SubjectType.Excel => "bi-table",
			ExaminaWebApplication.Models.Exam.SubjectType.PowerPoint => "bi-easel",
			ExaminaWebApplication.Models.Exam.SubjectType.Word => "bi-file-text",
			ExaminaWebApplication.Models.Exam.SubjectType.Windows => "bi-window",
			ExaminaWebApplication.Models.Exam.SubjectType.CSharp => "bi-code-slash",
			_ => "bi-book"
		};
	}

	private string GetSubjectBadgeClass(ExaminaWebApplication.Models.Exam.SubjectType type)
	{
		return type switch
		{
			ExaminaWebApplication.Models.Exam.SubjectType.Excel => "bg-success",
			ExaminaWebApplication.Models.Exam.SubjectType.PowerPoint => "bg-warning",
			ExaminaWebApplication.Models.Exam.SubjectType.Word => "bg-info",
			ExaminaWebApplication.Models.Exam.SubjectType.Windows => "bg-primary",
			ExaminaWebApplication.Models.Exam.SubjectType.CSharp => "bg-danger",
			_ => "bg-secondary"
		};
	}

	private string GetQuestionTypeText(ExaminaWebApplication.Models.Exam.QuestionType type)
	{
		return type switch
		{
			ExaminaWebApplication.Models.Exam.QuestionType.ExcelOperation => "Excel操作",
			ExaminaWebApplication.Models.Exam.QuestionType.PowerPointOperation => "PPT操作",
			ExaminaWebApplication.Models.Exam.QuestionType.WordOperation => "Word操作",
			ExaminaWebApplication.Models.Exam.QuestionType.WindowsOperation => "Windows操作",
			ExaminaWebApplication.Models.Exam.QuestionType.CSharpProgramming => "C#编程",
			ExaminaWebApplication.Models.Exam.QuestionType.MultipleChoice => "选择题",
			ExaminaWebApplication.Models.Exam.QuestionType.FillInBlank => "填空题",
			ExaminaWebApplication.Models.Exam.QuestionType.ShortAnswer => "简答题",
			ExaminaWebApplication.Models.Exam.QuestionType.Comprehensive => "综合题",
			_ => "未知类型"
		};
	}
}

@section Scripts {
	<script>


		// 开始考试
		function startExam(examId) {
			if (confirm('确定要开始考试吗？')) {
				window.location.href = `/Exam/Start/${examId}`;
			}
		}

		// 复制试卷
		function copyExam(examId) {
			if (confirm('确定要复制这份试卷吗？')) {
				fetch(`/api/Exam/${examId}/copy`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					}
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						alert('试卷复制成功！');
						window.location.href = `/ExamManagement/ExamDetails/${data.newExamId}`;
					} else {
						alert('复制失败：' + data.message);
					}
				})
				.catch(error => {
					console.error('Error:', error);
					alert('复制失败，请稍后重试');
				});
			}
		}

		// 导出试卷
		function exportExam(examId) {
			window.location.href = `/api/Exam/${examId}/export`;
		}

		// 删除试卷
		function deleteExam(examId, examName) {
			if (confirm(`确定要删除试卷"${examName}"吗？此操作不可撤销！`)) {
				fetch(`/api/Exam/${examId}`, {
					method: 'DELETE',
					headers: {
						'Content-Type': 'application/json',
					}
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						alert('试卷删除成功！');
						window.location.href = '/ExamManagement/ExamList';
					} else {
						alert('删除失败：' + data.message);
					}
				})
				.catch(error => {
					console.error('Error:', error);
					alert('删除失败，请稍后重试');
				});
			}
		}

		// 页面加载完成后的初始化
		document.addEventListener('DOMContentLoaded', function() {
			// 添加工具提示
			var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
			var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
				return new bootstrap.Tooltip(tooltipTriggerEl);
			});

			// 检查试卷状态并显示相应提示
			const examStatus = '@Model.Status';
			if (examStatus === 'Draft') {
				console.log('试卷处于草稿状态，可以进行编辑');
			} else if (examStatus === 'Published') {
				console.log('试卷已发布，可以开始考试');
			}
		});
	</script>
}
