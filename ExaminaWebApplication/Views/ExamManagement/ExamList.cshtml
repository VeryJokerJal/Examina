@model List<ExaminaWebApplication.Models.ImportedExam.ImportedExam>
@{
	ViewData["Title"] = "考试列表";
}

<!-- 页面标题横幅 -->
<div class="glass-card glass-card-primary py-4 mb-4">
	<div class="container">
		<div class="row align-items-center">
			<div class="col-md-8">
				<h1 class="display-6 fw-bold mb-2">
					<i class="bi bi-list-ul me-3"></i>考试列表
				</h1>
				<p class="lead mb-0">管理和查看所有导入的考试</p>
			</div>
			<div class="col-md-4 text-end">
				<a asp-action="ImportExam" class="glass-btn glass-btn-primary me-2">
					<i class="bi bi-upload me-1"></i>导入考试
				</a>
				<a asp-action="Index" class="glass-btn">
					<i class="bi bi-speedometer2 me-1"></i>管理面板
				</a>
			</div>
		</div>
	</div>
</div>

<!-- 搜索和筛选 -->
<div class="container mb-4">
	<div class="glass-card">
		<div class="card-header">
			<h5 class="card-title mb-0">
				<i class="bi bi-funnel me-2"></i>搜索和筛选
			</h5>
		</div>
		<div class="card-body">
			<div class="row g-3">
				<div class="col-md-4">
					<label for="searchInput" class="form-label">搜索考试</label>
					<input type="text" class="form-control glass-input" id="searchInput" placeholder="输入考试名称或描述...">
				</div>
				<div class="col-md-3">
					<label for="statusFilter" class="form-label">状态筛选</label>
					<select class="form-select" id="statusFilter">
						<option value="">全部状态</option>
						<option value="Draft">草稿</option>
						<option value="Published">已发布</option>
						<option value="Archived">已归档</option>
					</select>
				</div>
				<div class="col-md-3">
					<label for="typeFilter" class="form-label">类型筛选</label>
					<select class="form-select" id="typeFilter">
						<option value="">全部类型</option>
						<option value="UnifiedExam">统一考试</option>
						<option value="PracticeExam">练习考试</option>
						<option value="MockExam">模拟考试</option>
					</select>
				</div>
				<div class="col-md-2">
					<label class="form-label">&nbsp;</label>
					<div>
						<button type="button" class="glass-btn w-100" onclick="clearFilters()">
							<i class="bi bi-arrow-clockwise me-1"></i>重置
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- 考试列表 -->
<div class="container">
	<div class="glass-card">
		<div class="card-header">
			<h5 class="card-title mb-0">
				<i class="bi bi-file-earmark-text me-2"></i>
				已导入的考试
				<span class="badge bg-primary ms-2">@Model.Count</span>
			</h5>
		</div>
		<div class="card-body">
			@if (Model.Any())
			{
				<div>
					<table class="table glass-table" data-glass-table id="examTable">
						<thead>
							<tr>
								<th>考试信息</th>
								<th>类型/状态</th>
								<th>考试设置</th>
								<th>导入信息</th>
								<th>操作</th>
							</tr>
						</thead>
						<tbody>
							@foreach (ExaminaWebApplication.Models.ImportedExam.ImportedExam exam in Model.OrderByDescending(e => e.ImportedAt))
							{
								<tr data-exam-name="@exam.Name.ToLower()"
									data-exam-description="@(exam.Description?.ToLower() ?? "")"
									data-exam-status="@exam.Status"
									data-exam-type="@exam.ExamType">
									<td>
										<div>
											<h6 class="mb-1 exam-name-display" data-exam-id="@exam.Id" ondblclick="startEditExamName(@exam.Id, '@exam.Name')">
												@exam.Name
												<button type="button" class="btn btn-sm btn-outline-secondary ms-2 edit-name-btn"
														onclick="startEditExamName(@exam.Id, '@exam.Name')" title="编辑试卷名称">
													<i class="bi bi-pencil"></i>
												</button>
											</h6>
											<div class="exam-name-edit d-none" data-exam-id="@exam.Id">
												<div class="input-group input-group-sm">
													<input type="text" class="form-control exam-name-input" value="@exam.Name" maxlength="200">
													<button type="button" class="btn btn-success btn-sm" onclick="saveExamName(@exam.Id)" title="保存">
														<i class="bi bi-check"></i>
													</button>
													<button type="button" class="btn btn-secondary btn-sm" onclick="cancelEditExamName(@exam.Id)" title="取消">
														<i class="bi bi-x"></i>
													</button>
												</div>
												<small class="text-muted">按Enter保存，按Esc取消</small>
											</div>
											@if (!string.IsNullOrEmpty(exam.Description))
											{
												<small class="text-muted">@exam.Description</small>
											}
											@if (!string.IsNullOrEmpty(exam.Tags))
											{
												<div class="mt-1">
													@foreach (string tag in exam.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
													{
														<span class="badge bg-light text-dark me-1">@tag.Trim()</span>
													}
												</div>
											}
										</div>
									</td>
									<td>
										<div>
											<span class="badge bg-secondary mb-1">@exam.ExamType</span>
											<br>
											@switch (exam.Status)
											{
												case "Draft":
													<span class="badge bg-warning">草稿</span>
													break;
												case "Published":
													<span class="badge bg-success">已发布</span>
													break;
												case "Archived":
													<span class="badge bg-secondary">已归档</span>
													break;
												default:
													<span class="badge bg-light text-dark">@exam.Status</span>
													break;
											}
										</div>
									</td>
									<td>
										<div class="small">
											<div><strong>总分:</strong> @exam.TotalScore 分</div>
											<div><strong>时长:</strong> @exam.DurationMinutes 分钟</div>
											<div><strong>及格:</strong> @exam.PassingScore 分</div>
											@if (exam.AllowRetake)
											{
												<div><strong>重考:</strong> 最多 @exam.MaxRetakeCount 次</div>
											}
										</div>
									</td>
									<td>
										<div class="small">
											<div><strong>文件:</strong> @exam.ImportFileName</div>
											<div><strong>大小:</strong> @((exam.ImportFileSize / 1024.0).ToString("F1")) KB</div>
											<div><strong>时间:</strong> @exam.ImportedAt.ToString("yyyy-MM-dd HH:mm")</div>
											<div>
												@switch (exam.ImportStatus)
												{
													case "Success":
														<span class="badge bg-success">导入成功</span>
														break;
													case "Failed":
														<span class="badge bg-danger">导入失败</span>
														break;
													default:
														<span class="badge bg-warning">@exam.ImportStatus</span>
														break;
												}
											</div>
										</div>
									</td>
									<td>
										<div class="btn-group-vertical btn-group-sm" role="group">
											<a asp-action="ExamDetails" asp-route-id="@exam.Id"
											   class="glass-btn glass-btn-primary" title="查看详情">
												<i class="bi bi-eye me-1"></i>详情
											</a>
											<button type="button" class="glass-btn glass-btn-danger"
													onclick="deleteExam(@exam.Id, '@exam.Name')" title="删除考试">
												<i class="bi bi-trash me-1"></i>删除
											</button>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
			else
			{
				<div class="text-center py-5">
					<i class="bi bi-inbox display-1 text-muted"></i>
					<h4 class="mt-3 text-muted">暂无导入的考试</h4>
					<p class="text-muted">点击上方"导入考试"按钮开始导入您的第一个考试</p>
					<a asp-action="ImportExam" class="glass-btn glass-btn-primary">
						<i class="bi bi-upload me-1"></i>立即导入
					</a>
				</div>
			}
		</div>
	</div>
</div>
</div>

<!-- 防伪令牌 -->
@Html.AntiForgeryToken()

@section Scripts {
	<script>
		// 搜索和筛选功能
		function filterExams() {
			const searchTerm = document.getElementById('searchInput').value.toLowerCase();
			const statusFilter = document.getElementById('statusFilter').value;
			const typeFilter = document.getElementById('typeFilter').value;
			const rows = document.querySelectorAll('#examTable tbody tr');

			rows.forEach(row => {
				const examName = row.getAttribute('data-exam-name') || '';
				const examDescription = row.getAttribute('data-exam-description') || '';
				const examStatus = row.getAttribute('data-exam-status') || '';
				const examType = row.getAttribute('data-exam-type') || '';

				const matchesSearch = examName.includes(searchTerm) || examDescription.includes(searchTerm);
				const matchesStatus = !statusFilter || examStatus === statusFilter;
				const matchesType = !typeFilter || examType === typeFilter;

				if (matchesSearch && matchesStatus && matchesType) {
					row.style.display = '';
				} else {
					row.style.display = 'none';
				}
			});
		}

		function clearFilters() {
			document.getElementById('searchInput').value = '';
			document.getElementById('statusFilter').value = '';
			document.getElementById('typeFilter').value = '';
			filterExams();
		}

		function deleteExam(examId, examName) {
			if (confirm(`确定要删除考试"${examName}"吗？此操作不可撤销。`)) {
				$.ajax({
					url: '@Url.Action("DeleteExam")',
					type: 'POST',
					data: {
						id: examId,
						__RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
					},
					success: function(result) {
						if (result.success) {
							location.reload();
						} else {
							alert('删除失败: ' + result.message);
						}
					},
					error: function() {
						alert('删除失败，请稍后重试');
					}
				});
			}
		}

		// 试卷名称编辑功能
		function startEditExamName(examId, currentName) {
			const displayElement = document.querySelector(`.exam-name-display[data-exam-id="${examId}"]`);
			const editElement = document.querySelector(`.exam-name-edit[data-exam-id="${examId}"]`);
			const inputElement = editElement.querySelector('.exam-name-input');

			// 隐藏显示元素，显示编辑元素
			displayElement.classList.add('d-none');
			editElement.classList.remove('d-none');

			// 设置输入框值并聚焦
			inputElement.value = currentName;
			inputElement.focus();
			inputElement.select();

			// 绑定键盘事件
			inputElement.onkeydown = function(e) {
				if (e.key === 'Enter') {
					e.preventDefault();
					saveExamName(examId);
				} else if (e.key === 'Escape') {
					e.preventDefault();
					cancelEditExamName(examId);
				}
			};
		}

		function saveExamName(examId) {
			const editElement = document.querySelector(`.exam-name-edit[data-exam-id="${examId}"]`);
			const inputElement = editElement.querySelector('.exam-name-input');
			const newName = inputElement.value.trim();

			// 输入验证
			if (!newName) {
				alert('试卷名称不能为空');
				inputElement.focus();
				return;
			}

			if (newName.length > 200) {
				alert('试卷名称长度不能超过200个字符');
				inputElement.focus();
				return;
			}

			// 检查非法字符
			const forbiddenChars = ['<', '>', '"', "'", '&', '\\', '/', '?', '*', '|', ':', ';', '%'];
			if (forbiddenChars.some(char => newName.includes(char))) {
				alert('试卷名称包含非法字符，请避免使用: < > " \' & \\ / ? * | : ; %');
				inputElement.focus();
				return;
			}

			// 发送AJAX请求
			$.ajax({
				url: `/api/admin/exam-management/${examId}/name`,
				type: 'PUT',
				contentType: 'application/json',
				data: JSON.stringify({ name: newName }),
				headers: {
					'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
				},
				success: function(response) {
					if (response.success) {
						// 更新显示
						const displayElement = document.querySelector(`.exam-name-display[data-exam-id="${examId}"]`);
						const nameText = displayElement.childNodes[0];
						nameText.textContent = response.updatedName;

						// 切换回显示模式
						cancelEditExamName(examId);

						// 显示成功消息
						showMessage('试卷名称更新成功', 'success');
					} else {
						alert('更新失败: ' + response.message);
					}
				},
				error: function(xhr) {
					let errorMessage = '更新失败，请稍后重试';
					if (xhr.responseJSON && xhr.responseJSON.message) {
						errorMessage = xhr.responseJSON.message;
					}
					alert(errorMessage);
				}
			});
		}

		function cancelEditExamName(examId) {
			const displayElement = document.querySelector(`.exam-name-display[data-exam-id="${examId}"]`);
			const editElement = document.querySelector(`.exam-name-edit[data-exam-id="${examId}"]`);

			// 显示原始元素，隐藏编辑元素
			displayElement.classList.remove('d-none');
			editElement.classList.add('d-none');

			// 清除键盘事件绑定
			const inputElement = editElement.querySelector('.exam-name-input');
			inputElement.onkeydown = null;
		}

		function showMessage(message, type) {
			// 创建临时消息提示
			const alertDiv = document.createElement('div');
			alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
			alertDiv.style.top = '20px';
			alertDiv.style.right = '20px';
			alertDiv.style.zIndex = '9999';
			alertDiv.innerHTML = `
				${message}
				<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
			`;
			document.body.appendChild(alertDiv);

			// 3秒后自动移除
			setTimeout(() => {
				if (alertDiv.parentNode) {
					alertDiv.parentNode.removeChild(alertDiv);
				}
			}, 3000);
		}

		// 绑定事件
		document.getElementById('searchInput').addEventListener('input', filterExams);
		document.getElementById('statusFilter').addEventListener('change', filterExams);
		document.getElementById('typeFilter').addEventListener('change', filterExams);
	</script>
}
