@model IEnumerable<ExaminaWebApplication.Models.Exam.ExamQuestion>
@{
    var subject = ViewBag.Subject as ExaminaWebApplication.Models.Exam.ExamSubject;
    ViewData["Title"] = ViewData["Title"]?.ToString() ?? "Word题目管理";
}

<!-- 页面标题和操作按钮 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-file-word me-2 text-primary"></i>Word题目管理
        </h1>
        @if (subject != null)
        {
            <p class="text-muted mb-0">
                <i class="bi bi-folder me-1"></i>
                @subject.SubjectName - 管理Word段落操作题目
            </p>
        }
    </div>
    <div>
        @if (subject != null)
        {
            <a href="@Url.Action("ExamDetails", "ExamManagement", new { id = subject.ExamId })" class="glass-btn me-2">
                <i class="bi bi-file-earmark-text"></i> 试卷详情
            </a>

            <!-- 导入导出按钮组 -->
            <div class="btn-group me-2" role="group">
                <button type="button" class="glass-btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-download"></i> 导出
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" onclick="exportWordQuestions(false)">
                        <i class="bi bi-file-earmark-excel me-2"></i>导出所有题目
                    </a></li>
                    <li><a class="dropdown-item" href="#" onclick="exportWordQuestions(true)">
                        <i class="bi bi-file-earmark-excel me-2"></i>仅导出启用题目
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" onclick="downloadImportTemplate()">
                        <i class="bi bi-file-earmark-arrow-down me-2"></i>下载导入模板
                    </a></li>
                </ul>
            </div>

            <button class="glass-btn me-2" onclick="showImportModal()">
                <i class="bi bi-upload"></i> 导入题目
            </button>

            <button class="glass-btn glass-btn-primary" onclick="showCreateWordQuestionModal()">
                <i class="bi bi-plus"></i> 创建Word题目
            </button>
        }
    </div>
</div>

<!-- 科目信息概览 -->
@if (subject != null)
{
    <div class="glass-card mb-4">
        <div class="card-header glass-card-header">
            <h5 class="mb-0">
                <i class="bi bi-info-circle me-2"></i>科目信息
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <strong>科目名称：</strong>@subject.SubjectName
                </div>
                <div class="col-md-2">
                    <strong>科目分值：</strong><span class="text-primary">@subject.Score 分</span>
                </div>
                <div class="col-md-2">
                    <strong>考试时长：</strong><span class="text-info">@subject.DurationMinutes 分钟</span>
                </div>
                <div class="col-md-3">
                    <strong>状态：</strong>
                    <span class="badge @(subject.IsEnabled ? "bg-success" : "bg-secondary") me-2">
                        @(subject.IsEnabled ? "启用" : "禁用")
                    </span>
                    @if (subject.IsRequired)
                    {
                        <span class="badge bg-warning">必考</span>
                    }
                </div>
                <div class="col-md-2">
                    <strong>创建时间：</strong>
                    <small class="text-muted">@subject.CreatedAt.ToString("yyyy-MM-dd")</small>
                </div>
            </div>
        </div>
    </div>
}

<!-- 题目统计信息 -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-success mb-0" id="enabledQuestionCount">0</h4>
                <small class="text-muted">启用题目</small>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-info mb-0" id="totalQuestionScore">0</h4>
                <small class="text-muted">题目总分</small>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-warning mb-0" id="averageOperationPoints">0</h4>
                <small class="text-muted">平均操作点数</small>
            </div>
        </div>
    </div>
</div>

<!-- 题目列表管理卡片 -->
<div class="glass-card mb-4">
    <div class="card-header glass-card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-list-ul me-2"></i>题目列表管理
        </h5>
        <div class="d-flex gap-2">
            <button class="glass-btn glass-btn-primary" onclick="showCreateWordQuestionModal()">
                <i class="bi bi-plus-circle me-1"></i>创建题目
            </button>
            <button class="glass-btn glass-btn-info" onclick="refreshQuestionList()">
                <i class="bi bi-arrow-clockwise me-1"></i>刷新
            </button>
        </div>
    </div>
    <div class="card-body">
        <!-- 题目搜索和筛选 -->
        <div class="row mb-3">
            <div class="col-md-4">
                <input type="text" class="glass-input" id="questionSearch" placeholder="搜索题目要求...">
            </div>
            <div class="col-md-2">
                <select class="glass-select-input" id="questionStatusFilter">
                    <option value="">全部状态</option>
                    <option value="enabled">启用</option>
                    <option value="disabled">禁用</option>
                </select>
            </div>
            <div class="col-md-2">
                <input type="number" class="glass-input" id="minScoreFilter" placeholder="最低分值" min="0" step="0.1">
            </div>
            <div class="col-md-2">
                <input type="number" class="glass-input" id="maxScoreFilter" placeholder="最高分值" min="0" step="0.1">
            </div>
            <div class="col-md-2">
                <button class="glass-btn glass-btn-primary w-100" onclick="applyQuestionFilters()">
                    <i class="bi bi-funnel"></i> 筛选
                </button>
            </div>
        </div>

        <!-- 选中数量显示和批量操作 -->
        <div class="d-flex justify-content-between align-items-center mb-3" id="batchOperationBar" style="display: none !important;">
            <div>
                <span id="selectedCountDisplay" class="text-muted"></span>
            </div>
            <div class="btn-group">
                <button type="button" class="glass-btn glass-btn-primary batch-operation-btn"
                        onclick="showBatchAddOperationPointsToQuestionsModal()" disabled>
                    <i class="bi bi-plus-square"></i> 批量添加操作点
                </button>
                <button type="button" class="glass-btn glass-btn-warning batch-operation-btn"
                        onclick="batchToggleQuestionStatus()" disabled>
                    <i class="bi bi-toggle-on"></i> 批量切换状态
                </button>
                <button type="button" class="glass-btn glass-btn-danger batch-operation-btn"
                        onclick="batchDeleteQuestions()" disabled>
                    <i class="bi bi-trash"></i> 批量删除
                </button>
            </div>
        </div>

        <!-- 题目表格 -->
        <div class="table-responsive">
            <table class="glass-table" id="questionTable">
                <thead>
                    <tr>
                        <th class="col-select">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAllQuestions">
                                <label class="form-check-label visually-hidden" for="selectAllQuestions">全选</label>
                            </div>
                        </th>
                        <th data-sortable="requirements">题目要求</th>
                        <th data-sortable="operationCount">操作点数</th>
                        <th data-sortable="totalScore">总分值</th>
                        <th data-sortable="status">状态</th>
                        <th data-sortable="createdAt">创建时间</th>
                        <th width="200">操作</th>
                    </tr>
                </thead>
                <tbody id="questionTableBody">
                    <!-- 题目数据将通过JavaScript动态加载 -->
                </tbody>
            </table>
        </div>

        <!-- 题目分页 -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div class="text-muted">
                显示第 <span id="questionPageStart">1</span> - <span id="questionPageEnd">10</span> 条，
                共 <span id="questionTotalCount">0</span> 条记录
            </div>
            <nav>
                <ul class="pagination pagination-sm mb-0" id="questionPagination">
                    <!-- 分页按钮将通过JavaScript生成 -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- 操作点列表管理卡片 -->
<div class="glass-card">
    <div class="card-header glass-card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-gear me-2"></i>操作点列表管理
        </h5>
        <div class="d-flex gap-2">
            <!-- 操作点分类筛选 -->
            <div class="dropdown">
                <button class="glass-btn glass-btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <span id="currentCategoryFilter">全部分类</span>
                </button>
                <ul class="dropdown-menu glass-dropdown">
                    <li><a class="dropdown-item active" href="#" onclick="filterOperationPoints('all')">全部分类</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><h6 class="dropdown-header">段落操作</h6></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('1')">文字样式</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('2')">段落格式</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('3')">间距边框</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('4')">背景设置</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><h6 class="dropdown-header">页面设置</h6></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('5')">页面设置</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('6')">页眉页脚</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('7')">页码背景</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('8')">页面边框</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><h6 class="dropdown-header">其他功能</h6></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('9')">水印设置</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('10')">项目编号</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('11')">表格操作</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('12,13,14')">图形操作</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('15,16')">图片操作</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('17')">文本框</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filterOperationPoints('18')">其他操作</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="card-body">
        <!-- 操作点列表 -->
        <div class="row" id="wordOperationPointsList">
            <!-- 操作点将通过JavaScript动态加载 -->
        </div>
    </div>
</div>

<!-- 题目详情编辑区域 -->
<div id="questionDetailsArea" class="glass-card" style="display: none;">
    <div class="card-header glass-card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-pencil-square me-2"></i>题目详情编辑
        </h5>
        <div>
            <button class="glass-btn glass-btn-sm" onclick="hideQuestionDetails()">
                <i class="bi bi-x"></i> 关闭
            </button>
        </div>
    </div>
    <div class="card-body">
        <form id="questionDetailsForm">
            <input type="hidden" id="questionId" />

            <!-- 基本信息 -->
            <div class="row mb-3">
                <div class="col-md-8">
                    <label for="questionRequirements" class="form-label">题目要求 <span class="text-danger">*</span></label>
                    <textarea class="glass-input" id="questionRequirements" rows="6" placeholder="请输入题目要求内容..." required></textarea>
                    <div class="form-text text-muted mt-2">
                        <i class="bi bi-info-circle me-1"></i>
                        题目要求将作为学生看到的考试内容，请详细描述需要完成的Word操作。
                    </div>
                </div>
                <div class="col-md-4">
                    <label for="questionTotalScore" class="form-label">总分值</label>
                    <input type="number" class="glass-input" id="questionTotalScore" step="0.5" min="0" readonly>
                    <small class="text-muted">根据操作点自动计算</small>
                </div>
            </div>

            <!-- 操作点管理 -->
            <div class="mb-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <label class="form-label mb-0">操作点配置</label>
                    <div class="btn-group">
                        <button type="button" class="glass-btn glass-btn-primary glass-btn-sm" onclick="showAddOperationPointModal()">
                            <i class="bi bi-plus"></i> 添加操作点
                        </button>
                        <button type="button" class="glass-btn glass-btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
                            <span class="visually-hidden">更多操作</span>
                        </button>
                        <ul class="dropdown-menu glass-dropdown">
                            <li><a class="dropdown-item" href="#" onclick="showBatchAddOperationPointsModal()">
                                <i class="bi bi-plus-square me-2"></i>批量添加
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="clearAllOperationPoints()">
                                <i class="bi bi-trash me-2"></i>清空所有
                            </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="exportOperationPointsConfig()">
                                <i class="bi bi-download me-2"></i>导出配置
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="showImportOperationPointsModal()">
                                <i class="bi bi-upload me-2"></i>导入配置
                            </a></li>
                        </ul>
                    </div>
                </div>
                <div id="questionOperationPoints" class="glass-card">
                    <div class="card-body">
                        <!-- 操作点列表将通过JavaScript动态加载 -->
                    </div>
                </div>
            </div>

            <!-- 操作按钮 -->
            <div class="d-flex justify-content-end gap-2">
                <button type="button" class="glass-btn" onclick="hideQuestionDetails()">
                    <i class="bi bi-x"></i> 取消
                </button>
                <button type="submit" class="glass-btn glass-btn-primary">
                    <i class="bi bi-check"></i> 保存题目
                </button>
            </div>
        </form>
    </div>
</div>

<!-- 创建Word题目模态框 -->
<div class="modal fade glass-modal" id="createWordQuestionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-circle me-2"></i>创建Word题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createWordQuestionForm">
                    <div class="row">
                        <div class="col-md-9">
                            <label for="newQuestionRequirements" class="form-label">题目要求 <span class="text-danger">*</span></label>
                            <textarea class="glass-input" id="newQuestionRequirements" rows="6" placeholder="请输入题目要求内容..." required></textarea>
                            <div class="form-text text-muted mt-2">
                                <i class="bi bi-info-circle me-1"></i>
                                题目要求将作为学生看到的考试内容，请详细描述需要完成的Word操作。
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label for="newQuestionScore" class="form-label">题目分值 <span class="text-danger">*</span></label>
                            <input type="number" class="glass-input" id="newQuestionScore" min="0.1" max="100" step="0.1" value="10" required>
                            <div class="form-text text-muted mt-2">
                                <i class="bi bi-info-circle me-1"></i>
                                设置题目的总分值
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer glass-card-header">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i> 取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="createWordQuestion()">
                    <i class="bi bi-check"></i> 创建题目
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 添加/编辑操作点模态框 -->
<div class="modal fade glass-modal" id="operationPointModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title" id="operationPointModalTitle">
                    <i class="bi bi-plus-circle me-2"></i>添加操作点
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="operationPointForm">
                    <input type="hidden" id="operationPointId" value="">
                    <input type="hidden" id="operationPointMode" value="add">

                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="operationPointType" class="form-label">操作类型 <span class="text-danger">*</span></label>
                            <select class="glass-select-input" id="operationPointType" required onchange="loadOperationPointParameters()">
                                <option value="">请选择操作类型</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="operationPointScore" class="form-label">分值 <span class="text-danger">*</span></label>
                            <input type="number" class="glass-input" id="operationPointScore" step="0.5" min="0" value="5" required>
                        </div>
                    </div>

                    <!-- 操作点参数配置区域 -->
                    <div id="operationPointParameters" class="glass-card">
                        <div class="card-body">
                            <div class="text-center text-muted py-3">
                                <i class="bi bi-gear" style="font-size: 2rem;"></i>
                                <p class="mt-2 mb-0">请先选择操作类型</p>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer glass-card-header">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i> 取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="saveOperationPoint()">
                    <i class="bi bi-check"></i> <span id="operationPointSaveText">添加操作点</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 删除操作点确认模态框 -->
<div class="modal fade glass-modal" id="deleteOperationPointModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle me-2 text-warning"></i>确认删除
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>确定要删除这个操作点吗？</p>
                <div class="glass-card">
                    <div class="card-body">
                        <div id="deleteOperationPointInfo">
                            <!-- 操作点信息将通过JavaScript填充 -->
                        </div>
                    </div>
                </div>
                <p class="text-muted mt-3 mb-0">
                    <i class="bi bi-info-circle me-1"></i>
                    删除后将无法恢复，题目总分值会自动重新计算。
                </p>
            </div>
            <div class="modal-footer glass-card-header">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i> 取消
                </button>
                <button type="button" class="glass-btn glass-btn-danger" onclick="confirmDeleteOperationPoint()">
                    <i class="bi bi-trash"></i> 确认删除
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 批量添加操作点模态框 -->
<div class="modal fade glass-modal" id="batchAddOperationPointsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-square me-2"></i>批量添加操作点
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="mb-3">
                            <i class="bi bi-list-check me-2"></i>可选操作点
                        </h6>
                        <div class="glass-card">
                            <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                                <div id="batchOperationPointsList">
                                    <!-- 操作点列表将通过JavaScript生成 -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="mb-3">
                            <i class="bi bi-cart-check me-2"></i>已选操作点
                        </h6>
                        <div class="glass-card">
                            <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                                <div id="selectedOperationPointsList">
                                    <div class="text-center text-muted py-3">
                                        <i class="bi bi-cart" style="font-size: 2rem;"></i>
                                        <p class="mt-2 mb-0">请从左侧选择操作点</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-muted">总分值：</span>
                                <span class="fw-bold text-primary" id="batchTotalScore">0分</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-header">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i> 取消
                </button>
                <button type="button" class="glass-btn glass-btn-warning" onclick="clearBatchSelection()">
                    <i class="bi bi-arrow-clockwise"></i> 清空选择
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="confirmBatchAddOperationPoints()">
                    <i class="bi bi-check"></i> 批量添加
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 批量添加操作点到多个题目模态框 -->
<div class="modal fade glass-modal" id="batchAddOperationPointsToQuestionsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-square me-2"></i>批量添加操作点到多个题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info glass-card mb-3">
                    <i class="bi bi-info-circle me-2"></i>
                    <strong>批量操作说明：</strong>
                    <span id="batchTargetInfo">将对选中的题目批量添加操作点</span>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <h6 class="mb-3">
                            <i class="bi bi-list-check me-2"></i>选择操作点
                        </h6>
                        <div id="batchMultiOperationPointsList" style="max-height: 400px; overflow-y: auto;">
                            <!-- 操作点列表将在这里动态生成 -->
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="mb-3">
                            <i class="bi bi-cart me-2"></i>已选操作点
                        </h6>
                        <div id="selectedMultiOperationPointsList" style="max-height: 400px; overflow-y: auto;">
                            <!-- 已选操作点列表将在这里动态生成 -->
                        </div>
                        <div class="mt-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-muted">每个题目增加分值：</span>
                                <span class="fw-bold text-primary" id="batchMultiTotalScore">0分</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-header">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i> 取消
                </button>
                <button type="button" class="glass-btn glass-btn-warning" onclick="clearBatchMultiSelection()">
                    <i class="bi bi-arrow-clockwise"></i> 清空选择
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="confirmBatchAddOperationPointsToQuestions()">
                    <i class="bi bi-check"></i> 批量添加到所有选中题目
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 导入题目模态框 -->
<div class="modal fade glass-modal" id="importModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-upload me-2"></i>导入Word题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12">
                        <div class="alert alert-info glass-card mb-3">
                            <i class="bi bi-info-circle me-2"></i>
                            <strong>导入说明：</strong>
                            <ul class="mb-0 mt-2">
                                <li>支持Excel文件格式（.xlsx, .xls）</li>
                                <li>文件大小不能超过10MB</li>
                                <li>请先下载导入模板，按照模板格式填写数据</li>
                                <li>每个题目最多可以包含3个操作点</li>
                            </ul>
                        </div>

                        <div class="mb-3">
                            <label for="importFile" class="form-label">选择Excel文件 <span class="text-danger">*</span></label>
                            <input type="file" class="glass-input" id="importFile" accept=".xlsx,.xls" required>
                            <div class="form-text text-muted">
                                <i class="bi bi-file-earmark-excel me-1"></i>
                                请选择要导入的Excel文件
                            </div>
                        </div>

                        <!-- 导入进度 -->
                        <div id="importProgress" style="display: none;">
                            <div class="mb-2">
                                <div class="d-flex justify-content-between">
                                    <span>导入进度</span>
                                    <span id="importProgressText">0%</span>
                                </div>
                                <div class="progress glass-progress">
                                    <div class="progress-bar" id="importProgressBar" role="progressbar" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>

                        <!-- 导入结果 -->
                        <div id="importResult" style="display: none;">
                            <div class="alert glass-card" id="importResultAlert">
                                <div id="importResultContent"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-header">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i> 取消
                </button>
                <button type="button" class="glass-btn glass-btn-secondary me-2" onclick="downloadImportTemplate()">
                    <i class="bi bi-download"></i> 下载模板
                </button>
                <button type="button" class="glass-btn glass-btn-primary" id="importBtn" onclick="importWordQuestions()">
                    <i class="bi bi-upload"></i> 开始导入
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 题目选择模态框 -->
<div class="modal fade glass-modal" id="questionSelectionModal" tabindex="-1" aria-labelledby="questionSelectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title" id="questionSelectionModalLabel">
                    <i class="bi bi-list-check me-2"></i>选择题目
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="关闭"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <p class="text-muted mb-3">请选择要添加操作点的题目：</p>

                    <!-- 搜索框 -->
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text glass-input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control glass-input" id="questionSelectionSearch"
                                   placeholder="搜索题目要求..." onkeyup="filterQuestionsInModal()">
                        </div>
                    </div>

                    <!-- 题目列表 -->
                    <div class="question-selection-list" style="max-height: 400px; overflow-y: auto;">
                        <div id="questionSelectionList">
                            <!-- 题目列表将在这里动态生成 -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-header">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i> 取消
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 加载中提示 -->
<div id="loadingOverlay" class="glass-loading-overlay" style="display: none;">
    <div class="glass-loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">加载中...</span>
        </div>
        <div class="mt-2">加载中...</div>
    </div>
</div>

<style>
/* Word题目管理页面专用样式 */
.glass-table-empty {
    padding: 3rem 2rem;
    text-align: center;
    color: var(--glass-text-muted);
}

.glass-table-empty i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.glass-table-empty h5, .glass-table-empty h6 {
    margin-bottom: 0.5rem;
    color: var(--glass-text-primary);
}

.glass-table-empty p {
    margin-bottom: 1rem;
    color: var(--glass-text-muted);
}

.glass-badge {
    display: inline-block;
    padding: 0.35em 0.65em;
    font-size: 0.75em;
    font-weight: 700;
    line-height: 1;
    color: #fff;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 0.375rem;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.glass-badge.bg-primary {
    background: rgba(13, 110, 253, 0.8);
    border-color: rgba(13, 110, 253, 0.3);
}

.glass-badge.bg-success {
    background: rgba(25, 135, 84, 0.8);
    border-color: rgba(25, 135, 84, 0.3);
}

.glass-badge.bg-info {
    background: rgba(13, 202, 240, 0.8);
    border-color: rgba(13, 202, 240, 0.3);
}

.glass-badge.bg-warning {
    background: rgba(255, 193, 7, 0.8);
    border-color: rgba(255, 193, 7, 0.3);
    color: #000;
}

.glass-badge.bg-danger {
    background: rgba(220, 53, 69, 0.8);
    border-color: rgba(220, 53, 69, 0.3);
}

.glass-badge.bg-secondary {
    background: rgba(108, 117, 125, 0.8);
    border-color: rgba(108, 117, 125, 0.3);
}

.glass-badge.bg-light {
    background: rgba(248, 249, 250, 0.8);
    border-color: rgba(248, 249, 250, 0.3);
    color: #000;
}

.glass-loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.glass-loading-spinner {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;
    color: white;
}

.glass-progress {
    height: 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.375rem;
    overflow: hidden;
}

.glass-progress .progress-bar {
    background: linear-gradient(90deg, rgba(13, 110, 253, 0.8), rgba(13, 202, 240, 0.8));
    border-radius: 0.375rem;
    transition: width 0.3s ease;
}

.operation-point-item {
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
}

.operation-point-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    background: rgba(255, 255, 255, 0.15);
}

.operation-point-item:active {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

/* 确保卡片内的按钮在hover时有不同的样式 */
.operation-point-item .glass-btn:hover {
    transform: none;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

.glass-btn.active {
    background: rgba(13, 110, 253, 0.8);
    border-color: rgba(13, 110, 253, 0.5);
    color: white;
}

.glass-btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    border-radius: 0.375rem;
}

.glass-btn-primary {
    background: rgba(13, 110, 253, 0.8);
    border-color: rgba(13, 110, 253, 0.5);
    color: white;
}

.glass-btn-success {
    background: rgba(25, 135, 84, 0.8);
    border-color: rgba(25, 135, 84, 0.5);
    color: white;
}

.glass-btn-warning {
    background: rgba(255, 193, 7, 0.8);
    border-color: rgba(255, 193, 7, 0.5);
    color: #000;
}

.glass-btn-danger {
    background: rgba(220, 53, 69, 0.8);
    border-color: rgba(220, 53, 69, 0.5);
    color: white;
}

.glass-btn-info {
    background: rgba(13, 202, 240, 0.8);
    border-color: rgba(13, 202, 240, 0.5);
    color: white;
}

.glass-dropdown {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.5rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.glass-dropdown .dropdown-item {
    color: var(--glass-text-primary);
    transition: all 0.3s ease;
}

.glass-dropdown .dropdown-item:hover {
    background: rgba(255, 255, 255, 0.1);
    color: var(--glass-text-primary);
}

.glass-dropdown .dropdown-divider {
    border-color: rgba(255, 255, 255, 0.2);
}

/* 响应式调整 */
@@media (max-width: 768px) {
    .operation-point-item .card-body {
        padding: 1rem;
    }

    .glass-table-empty {
        padding: 2rem 1rem;
    }

    .glass-table-empty i {
        font-size: 2rem;
    }
}

/* 题目要求显示样式 */
.question-requirements {
    max-width: 300px;
    max-height: 60px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    line-height: 1.4;
}

/* 题目选择模态框样式 */
.question-selection-item {
    padding: 1rem;
    margin-bottom: 0.5rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.05);
    cursor: pointer;
    transition: all 0.3s ease;
}

.question-selection-item:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
}

.question-selection-item.selected {
    background: rgba(var(--bs-primary-rgb), 0.2);
    border-color: var(--bs-primary);
}

.question-selection-item h6 {
    margin-bottom: 0.5rem;
    color: var(--glass-text-primary);
}

.question-selection-item p {
    margin-bottom: 0.5rem;
    color: var(--glass-text-muted);
    font-size: 0.9rem;
}

.question-selection-item .question-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
    color: var(--glass-text-muted);
}

.question-selection-item .question-score {
    background: rgba(var(--bs-success-rgb), 0.2);
    color: var(--bs-success);
    padding: 0.2rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: 500;
}
</style>

<script>
// 全局变量
let currentSubjectId = @(subject?.Id ?? 0);
let wordOperationPoints = [];
let wordEnumTypes = [];
let currentQuestions = [];
let currentQuestionId = null;
let selectedQuestionIds = []; // 选中的题目ID列表

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', function() {
    // 全局初始化Glassmorphism Select组件
    if (typeof initializeGlassSelectsNative === 'function') {
        initializeGlassSelectsNative();
    }

    if (currentSubjectId > 0) {
        initializePage();
    }
});

// 初始化页面
async function initializePage() {
    showLoading();
    try {
        await Promise.all([
            loadWordOperationPoints(),
            loadWordEnumTypes(),
            loadWordQuestions()
        ]);
        renderOperationPointsList();
        renderQuestionsList();

        // 初始化批量操作状态
        selectedQuestionIds = [];
        updateBatchOperationButtons();
    } catch (error) {
        console.error('页面初始化失败:', error);
        showAlert('页面初始化失败，请刷新页面重试', 'danger');
    } finally {
        hideLoading();
    }
}

// 加载Word操作点
async function loadWordOperationPoints() {
    const response = await fetch('/api/word/operation/points');
    if (!response.ok) {
        throw new Error('加载操作点失败');
    }
    wordOperationPoints = await response.json();
}

// 加载Word枚举类型
async function loadWordEnumTypes() {
    const response = await fetch('/api/word/operation/enum-types');
    if (!response.ok) {
        throw new Error('加载枚举类型失败');
    }
    wordEnumTypes = await response.json();
}

// 加载Word题目
async function loadWordQuestions() {
    const response = await fetch(`/api/word/question?subjectId=${currentSubjectId}`);
    if (!response.ok) {
        throw new Error('加载题目失败');
    }
    currentQuestions = await response.json();
}

// 渲染操作点列表
function renderOperationPointsList() {
    const container = document.getElementById('wordOperationPointsList');
    if (!container) return;

    container.innerHTML = '';

    wordOperationPoints.forEach(point => {
        const categoryClass = getCategoryClass(point.category);
        const col = document.createElement('div');
        col.className = 'col-md-6 col-lg-4 mb-3';

        const card = document.createElement('div');
        card.className = `glass-card operation-point-item h-100`;
        card.setAttribute('data-category', point.category);
        card.setAttribute('data-operation-number', point.operationNumber);

        // 添加点击事件到整个卡片
        card.style.cursor = 'pointer';
        card.addEventListener('click', function(e) {
            // 如果点击的是按钮，不触发卡片点击事件
            if (e.target.closest('.glass-btn')) {
                return;
            }
            selectOperationPoint(point.operationNumber);
        });

        card.innerHTML = `
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <span class="badge ${categoryClass}">${point.operationNumber}</span>
                    <button class="glass-btn glass-btn-sm glass-btn-primary" onclick="event.stopPropagation(); selectOperationPoint(${point.operationNumber})" title="快速添加">
                        <i class="bi bi-plus"></i>
                    </button>
                </div>
                <h6 class="card-title mb-2">${point.name}</h6>
                <p class="card-text text-muted small mb-2">${point.description || ''}</p>
                <small class="text-muted">${getCategoryName(point.category)}</small>
            </div>
        `;

        col.appendChild(card);
        container.appendChild(col);
    });
}

// 渲染题目列表
function renderQuestionsList() {
    const tbody = document.getElementById('questionTableBody');
    if (!tbody) return;

    // 更新统计信息
    updateQuestionStatistics();

    if (currentQuestions.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center py-5">
                    <div class="glass-table-empty">
                        <i class="bi bi-journal-x"></i>
                        <h5>暂无Word题目</h5>
                    </div>
                </td>
            </tr>
        `;
        return;
    }

    tbody.innerHTML = currentQuestions.map(question => `
        <tr>
            <td class="col-select">
                <div class="form-check table-checkbox">
                    <input class="form-check-input question-checkbox" type="checkbox" value="${question.id}"
                           onchange="toggleQuestionSelection(${question.id})">
                </div>
            </td>
            <td>
                <div class="fw-medium question-requirements">${question.requirements || '暂无要求'}</div>
                <small class="text-muted">ID: ${question.id}</small>
            </td>
            <td>
                <span class="glass-badge bg-info">${question.operationPoints?.length || 0}个</span>
            </td>
            <td>
                <span class="glass-badge bg-primary">${question.totalScore}分</span>
            </td>
            <td>
                ${question.isEnabled
                    ? '<span class="glass-badge bg-success">已启用</span>'
                    : '<span class="glass-badge bg-secondary">已禁用</span>'}
            </td>
            <td>
                <small class="text-muted">${new Date(question.createdAt).toLocaleString()}</small>
            </td>
            <td>
                <div class="btn-group">
                    <button class="glass-btn glass-btn-sm" onclick="editQuestion(${question.id})" title="编辑">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="glass-btn glass-btn-sm glass-btn-${question.isEnabled ? 'warning' : 'success'}"
                            onclick="toggleQuestionStatus(${question.id})"
                            title="${question.isEnabled ? '禁用' : '启用'}">
                        <i class="bi bi-${question.isEnabled ? 'pause' : 'play'}"></i>
                    </button>
                    <button class="glass-btn glass-btn-sm glass-btn-danger" onclick="deleteQuestion(${question.id})" title="删除">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </td>
        </tr>
    `).join('');

    // 更新选中状态
    updateQuestionSelectionState();

    // 添加全选功能
    setupSelectAllFunctionality();
}

// 更新题目统计信息
function updateQuestionStatistics() {
    const enabledCount = currentQuestions.filter(q => q.isEnabled).length;
    const totalScore = currentQuestions.filter(q => q.isEnabled).reduce((sum, q) => sum + q.totalScore, 0);
    const avgOperationPoints = currentQuestions.length > 0
        ? (currentQuestions.reduce((sum, q) => sum + (q.operationPoints?.length || 0), 0) / currentQuestions.length).toFixed(1)
        : 0;

    document.getElementById('enabledQuestionCount').textContent = enabledCount;
    document.getElementById('totalQuestionScore').textContent = totalScore;
    document.getElementById('averageOperationPoints').textContent = avgOperationPoints;
}

// ==================== 题目选择功能 ====================

// 切换题目选择状态
function toggleQuestionSelection(questionId) {
    const index = selectedQuestionIds.indexOf(questionId);
    if (index > -1) {
        selectedQuestionIds.splice(index, 1);
    } else {
        selectedQuestionIds.push(questionId);
    }

    updateQuestionSelectionState();
    updateBatchOperationButtons();
}

// 更新题目选择状态
function updateQuestionSelectionState() {
    // 更新各个复选框的选中状态
    const checkboxes = document.querySelectorAll('.question-checkbox');
    checkboxes.forEach(checkbox => {
        const questionId = parseInt(checkbox.value);
        checkbox.checked = selectedQuestionIds.includes(questionId);
    });

    // 更新全选复选框状态
    const selectAllCheckbox = document.getElementById('selectAllQuestions');
    if (selectAllCheckbox) {
        const totalQuestions = currentQuestions.length;
        const selectedCount = selectedQuestionIds.length;

        if (selectedCount === 0) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        } else if (selectedCount === totalQuestions) {
            selectAllCheckbox.checked = true;
            selectAllCheckbox.indeterminate = false;
        } else {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = true;
        }
    }

    // 更新选中数量显示
    updateSelectedCountDisplay();
}

// 设置全选功能
function setupSelectAllFunctionality() {
    const selectAllCheckbox = document.getElementById('selectAllQuestions');
    if (selectAllCheckbox) {
        // 移除之前的事件监听器
        selectAllCheckbox.removeEventListener('change', handleSelectAll);
        // 添加新的事件监听器
        selectAllCheckbox.addEventListener('change', handleSelectAll);
    }
}

// 处理全选/取消全选
function handleSelectAll(event) {
    const isChecked = event.target.checked;

    if (isChecked) {
        // 全选
        selectedQuestionIds = currentQuestions.map(q => q.id);
    } else {
        // 取消全选
        selectedQuestionIds = [];
    }

    updateQuestionSelectionState();
    updateBatchOperationButtons();
}

// 更新选中数量显示
function updateSelectedCountDisplay() {
    const selectedCount = selectedQuestionIds.length;
    const totalCount = currentQuestions.length;

    // 更新页面上的选中数量显示
    const countDisplay = document.getElementById('selectedCountDisplay');
    if (countDisplay) {
        if (selectedCount > 0) {
            countDisplay.textContent = `已选中 ${selectedCount} / ${totalCount} 个题目`;
            countDisplay.style.display = 'block';
        } else {
            countDisplay.style.display = 'none';
        }
    }
}

// 更新批量操作按钮状态
function updateBatchOperationButtons() {
    const hasSelection = selectedQuestionIds.length > 0;

    // 显示/隐藏批量操作栏
    const batchOperationBar = document.getElementById('batchOperationBar');
    if (batchOperationBar) {
        if (hasSelection) {
            batchOperationBar.style.display = 'flex';
        } else {
            batchOperationBar.style.display = 'none';
        }
    }

    // 更新批量操作按钮状态
    const batchButtons = document.querySelectorAll('.batch-operation-btn');
    batchButtons.forEach(btn => {
        btn.disabled = !hasSelection;
        if (hasSelection) {
            btn.classList.remove('disabled');
            btn.title = `对 ${selectedQuestionIds.length} 个题目执行批量操作`;
        } else {
            btn.classList.add('disabled');
            btn.title = '请先选择要操作的题目';
        }
    });
}

// 获取类别样式类
function getCategoryClass(category) {
    const classes = {
        1: 'bg-primary',      // 段落文字样式
        2: 'bg-success',      // 段落格式设置
        3: 'bg-warning',      // 段落间距与边框
        4: 'bg-info',         // 段落背景设置
        5: 'bg-dark',         // 页面设置
        6: 'bg-primary',      // 页眉页脚设置
        7: 'bg-success',      // 页码与背景设置
        8: 'bg-warning',      // 页面边框设置
        9: 'bg-info',         // 水印设置
        10: 'bg-dark',        // 项目符号与编号
        11: 'bg-primary',     // 表格操作
        12: 'bg-success',     // 自选图形
        13: 'bg-warning',     // 自选图形文字
        14: 'bg-info',        // 自选图形位置
        15: 'bg-dark',        // 图片设置
        16: 'bg-primary',     // 图片尺寸
        17: 'bg-success',     // 文本框设置
        18: 'bg-danger'       // 其他操作
    };
    return classes[category] || 'bg-secondary';
}

// 获取类别名称
function getCategoryName(category) {
    const names = {
        1: '段落文字样式',
        2: '段落格式设置',
        3: '段落间距与边框',
        4: '段落背景设置',
        5: '页面设置',
        6: '页眉页脚设置',
        7: '页码与背景设置',
        8: '页面边框设置',
        9: '水印设置',
        10: '项目符号与编号',
        11: '表格操作',
        12: '自选图形',
        13: '自选图形文字',
        14: '自选图形位置',
        15: '图片设置',
        16: '图片尺寸',
        17: '文本框设置',
        18: '其他操作'
    };
    return names[category] || '未知类别';
}

// 过滤操作点
function filterOperationPoints(category) {
    // 更新下拉菜单状态
    document.querySelectorAll('.dropdown-item').forEach(item => {
        item.classList.remove('active');
    });

    // 设置当前筛选文本
    const currentFilterElement = document.getElementById('currentCategoryFilter');
    let filterText = '全部分类';

    if (category === 'all') {
        filterText = '全部分类';
        document.querySelector('.dropdown-item[onclick="filterOperationPoints(\'all\')"]').classList.add('active');
    } else {
        // 处理多分类筛选（如 '12,13,14'）
        const categories = category.split(',');
        if (categories.length > 1) {
            filterText = '图形操作'; // 或其他组合名称
        } else {
            filterText = getCategoryName(parseInt(category));
        }
        document.querySelector(`.dropdown-item[onclick="filterOperationPoints('${category}')"]`)?.classList.add('active');
    }

    currentFilterElement.textContent = filterText;

    // 过滤操作点
    const items = document.querySelectorAll('.operation-point-item');
    items.forEach(item => {
        const parentCol = item.closest('.col-md-6');
        const itemCategory = item.getAttribute('data-category');

        if (category === 'all') {
            parentCol.style.display = 'block';
        } else {
            // 支持多分类筛选
            const categories = category.split(',');
            const shouldShow = categories.includes(itemCategory);
            parentCol.style.display = shouldShow ? 'block' : 'none';
        }
    });
}

// 显示创建题目模态框
function showCreateWordQuestionModal() {
    const modal = new bootstrap.Modal(document.getElementById('createWordQuestionModal'));
    document.getElementById('createWordQuestionForm').reset();
    modal.show();

    // 等待模态框完全显示后初始化glass-select组件
    setTimeout(() => {
        if (typeof initializeGlassSelectsNative === 'function') {
            initializeGlassSelectsNative(document.getElementById('createWordQuestionModal'));
        }
    }, 300);
}

// 创建Word题目
async function createWordQuestion() {
    const requirements = document.getElementById('newQuestionRequirements').value.trim();
    const score = parseFloat(document.getElementById('newQuestionScore').value);

    if (!requirements) {
        showAlert('请输入题目要求', 'warning');
        return;
    }

    if (!score || score <= 0) {
        showAlert('请输入有效的题目分值', 'warning');
        return;
    }

    try {
        // 生成题目标题（基于时间戳）
        const timestamp = Date.now();
        const title = `Word题目-${timestamp}`;
        const description = `题目要求：${requirements}`;

        const response = await fetch('/api/word/question', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                subjectId: currentSubjectId,
                title: title,
                description: description,
                requirements: requirements,
                totalScore: score
            })
        });

        if (!response.ok) {
            throw new Error('创建题目失败');
        }

        const newQuestion = await response.json();
        showAlert('题目创建成功', 'success');

        // 关闭模态框
        bootstrap.Modal.getInstance(document.getElementById('createWordQuestionModal')).hide();

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

        // 自动编辑新创建的题目
        editQuestion(newQuestion.id);

    } catch (error) {
        console.error('创建题目失败:', error);
        showAlert('创建题目失败，请稍后重试', 'danger');
    }
}

// 编辑题目
async function editQuestion(questionId) {
    try {
        const response = await fetch(`/api/word/question/${questionId}`);
        if (!response.ok) {
            throw new Error('获取题目详情失败');
        }

        const question = await response.json();
        currentQuestionId = questionId;

        // 填充表单
        document.getElementById('questionId').value = question.id;
        document.getElementById('questionRequirements').value = question.requirements || '';
        document.getElementById('questionTotalScore').value = question.totalScore;

        // 渲染操作点列表
        renderQuestionOperationPoints(question.operationPoints || []);

        // 显示详情区域
        document.getElementById('questionDetailsArea').style.display = 'block';
        document.getElementById('questionDetailsArea').scrollIntoView({ behavior: 'smooth' });

    } catch (error) {
        console.error('编辑题目失败:', error);
        showAlert('获取题目详情失败，请稍后重试', 'danger');
    }
}

// 渲染题目操作点
function renderQuestionOperationPoints(operationPoints) {
    const container = document.getElementById('questionOperationPoints');
    if (!container) return;

    const cardBody = container.querySelector('.card-body');
    if (!cardBody) return;

    if (operationPoints.length === 0) {
        cardBody.innerHTML = `
            <div class="glass-table-empty">
                <i class="bi bi-plus-circle"></i>
                <h6>暂无操作点</h6>
                <p>点击"添加操作点"开始配置题目的操作要求</p>
            </div>
        `;
        return;
    }

    const html = operationPoints.map((op, index) => {
        const operationPoint = wordOperationPoints.find(p => p.operationNumber.toString() === op.operationType);
        const operationName = operationPoint ? operationPoint.name : `操作点${op.operationType}`;
        const categoryClass = operationPoint ? getCategoryClass(operationPoint.category) : 'bg-secondary';

        return `
            <div class="glass-card mb-3 operation-point-config" data-operation-id="${op.id}">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center mb-2">
                                <span class="glass-badge ${categoryClass} me-2">${index + 1}</span>
                                <h6 class="mb-0">${operationName}</h6>
                            </div>
                            <div class="row mb-2">
                                <div class="col-md-4">
                                    <small class="text-muted">分值：<span class="fw-medium text-primary">${op.score}分</span></small>
                                </div>
                                <div class="col-md-4">
                                    <small class="text-muted">类型：<span class="fw-medium">${op.operationType}</span></small>
                                </div>
                                <div class="col-md-4">
                                    <small class="text-muted">状态：<span class="glass-badge bg-success">启用</span></small>
                                </div>
                            </div>
                            ${renderOperationConfig(op.operationConfig)}
                        </div>
                        <div class="btn-group">
                            <button class="glass-btn glass-btn-sm" onclick="moveOperationPointUp(${op.id})" title="上移" ${index === 0 ? 'disabled' : ''}>
                                <i class="bi bi-arrow-up"></i>
                            </button>
                            <button class="glass-btn glass-btn-sm" onclick="moveOperationPointDown(${op.id})" title="下移" ${index === operationPoints.length - 1 ? 'disabled' : ''}>
                                <i class="bi bi-arrow-down"></i>
                            </button>
                            <button class="glass-btn glass-btn-sm" onclick="showEditOperationPointModal(${op.id})" title="编辑">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="glass-btn glass-btn-sm glass-btn-danger" onclick="showDeleteOperationPointModal(${op.id})" title="删除">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');

    cardBody.innerHTML = html;
}

// 渲染操作配置
function renderOperationConfig(configJson) {
    try {
        const config = JSON.parse(configJson);
        const configItems = Object.entries(config)
            .filter(([key, value]) => value !== null && value !== undefined && value !== '')
            .map(([key, value]) => {
                const displayName = getParameterDisplayName(key);
                const displayValue = formatParameterValue(key, value);
                return `<span class="glass-badge bg-light text-dark me-1 mb-1">${displayName}: ${displayValue}</span>`;
            })
            .join('');

        return configItems ? `<div class="mt-2">${configItems}</div>` : '';
    } catch {
        return '';
    }
}

// 获取参数显示名称
function getParameterDisplayName(key) {
    const names = {
        'ParagraphIndex': '段落序号',
        'FontFamily': '字体',
        'FontSize': '字号',
        'FontStyle': '字形',
        'CharacterSpacing': '字间距',
        'FontColor': '文字颜色',
        'ParagraphAlignment': '对齐方式',
        'LeftIndent': '左缩进',
        'RightIndent': '右缩进',
        'FirstLineIndent': '首行缩进',
        'LineSpacingType': '行距类型',
        'LineSpacingValue': '行距值',
        'DropCapEnabled': '首字下沉',
        'DropCapLines': '下沉行数',
        'DropCapDistance': '距正文距离',
        'SpaceBefore': '段前间距',
        'SpaceAfter': '段后间距',
        'BorderColor': '边框颜色',
        'BorderStyle': '边框线型',
        'BorderWidth': '边框线宽',
        'ShadingColor': '底纹颜色',
        'ShadingPattern': '底纹图案'
    };
    return names[key] || key;
}

// 格式化参数值
function formatParameterValue(key, value) {
    if (key.includes('Color')) {
        return `<span style="display:inline-block;width:12px;height:12px;background:${value};border:1px solid #ccc;margin-right:2px;"></span>${value}`;
    }
    if (key === 'DropCapEnabled') {
        return value ? '是' : '否';
    }
    return value;
}

// 显示/隐藏题目详情
function hideQuestionDetails() {
    document.getElementById('questionDetailsArea').style.display = 'none';
    currentQuestionId = null;
}

// 刷新题目列表
async function refreshQuestionList() {
    try {
        await loadWordQuestions();
        renderQuestionsList();
        showAlert('题目列表已刷新', 'success');
    } catch (error) {
        console.error('刷新失败:', error);
        showAlert('刷新失败，请稍后重试', 'danger');
    }
}

// 显示/隐藏加载状态
function showLoading() {
    document.getElementById('loadingOverlay').style.display = 'flex';
}

function hideLoading() {
    document.getElementById('loadingOverlay').style.display = 'none';
}

// 显示添加操作点模态框
function showAddOperationPointModal() {
    if (!currentQuestionId) {
        showAlert('请先选择一个题目', 'warning');
        return;
    }

    showOperationPointModal('add');
}

// 显示编辑操作点模态框
function showEditOperationPointModal(operationPointId) {
    if (!currentQuestionId) {
        showAlert('请先选择一个题目', 'warning');
        return;
    }

    // 获取当前题目的操作点数据
    const currentQuestion = currentQuestions.find(q => q.id === currentQuestionId);
    if (!currentQuestion || !currentQuestion.operationPoints) {
        showAlert('无法获取题目操作点数据', 'danger');
        return;
    }

    const operationPoint = currentQuestion.operationPoints.find(op => op.id === operationPointId);
    if (!operationPoint) {
        showAlert('操作点不存在', 'danger');
        return;
    }

    showOperationPointModal('edit', operationPoint);
}

// 通用的操作点模态框显示函数
function showOperationPointModal(mode, operationPoint = null) {
    const modal = document.getElementById('operationPointModal');
    const modalTitle = document.getElementById('operationPointModalTitle');
    const saveText = document.getElementById('operationPointSaveText');
    const form = document.getElementById('operationPointForm');
    const modeInput = document.getElementById('operationPointMode');
    const idInput = document.getElementById('operationPointId');

    // 设置模态框模式
    modeInput.value = mode;

    if (mode === 'add') {
        modalTitle.innerHTML = '<i class="bi bi-plus-circle me-2"></i>添加操作点';
        saveText.textContent = '添加操作点';
        idInput.value = '';
        form.reset();
        document.getElementById('operationPointScore').value = '5';
    } else {
        modalTitle.innerHTML = '<i class="bi bi-pencil-square me-2"></i>编辑操作点';
        saveText.textContent = '保存修改';
        idInput.value = operationPoint.id;

        // 填充表单数据
        document.getElementById('operationPointType').value = operationPoint.operationType;
        document.getElementById('operationPointScore').value = operationPoint.score;
    }

    // 填充操作类型选项
    const select = document.getElementById('operationPointType');
    select.innerHTML = '<option value="">请选择操作类型</option>';

    wordOperationPoints.forEach(point => {
        const option = document.createElement('option');
        option.value = point.operationNumber;
        option.textContent = `${point.operationNumber}. ${point.name}`;
        if (mode === 'edit' && point.operationNumber.toString() === operationPoint.operationType) {
            option.selected = true;
        }
        select.appendChild(option);
    });

    // 加载参数配置
    if (mode === 'edit') {
        loadOperationPointParameters();
        // 延迟填充参数值，等待参数表单生成完成
        setTimeout(() => {
            fillOperationPointParameters(operationPoint.operationConfig);
        }, 100);
    } else {
        resetOperationPointParameters();
    }

    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // 等待模态框完全显示后初始化glass-select组件
    setTimeout(() => {
        if (typeof initializeGlassSelectsNative === 'function') {
            initializeGlassSelectsNative(modal);
        }
    }, 300);
}

// 加载操作点参数
function loadOperationPointParameters() {
    const operationNumber = document.getElementById('operationPointType').value;
    const container = document.getElementById('operationPointParameters');
    const cardBody = container.querySelector('.card-body');

    if (!operationNumber) {
        cardBody.innerHTML = `
            <div class="text-center text-muted py-3">
                <i class="bi bi-gear" style="font-size: 2rem;"></i>
                <p class="mt-2 mb-0">请先选择操作类型</p>
            </div>
        `;
        return;
    }

    const operationPoint = wordOperationPoints.find(p => p.operationNumber.toString() === operationNumber);
    if (!operationPoint || !operationPoint.parameters) {
        cardBody.innerHTML = `
            <div class="text-center text-muted py-3">
                <i class="bi bi-exclamation-triangle" style="font-size: 2rem;"></i>
                <p class="mt-2 mb-0">该操作点暂无参数配置</p>
            </div>
        `;
        return;
    }

    const parametersHtml = operationPoint.parameters.map(param => {
        return generateParameterInput(param);
    }).join('');

    cardBody.innerHTML = `
        <div class="border-bottom pb-3 mb-3">
            <h6 class="mb-0">
                <i class="bi bi-sliders me-2"></i>参数配置
            </h6>
            <small class="text-muted">请配置操作点的具体参数</small>
        </div>
        ${parametersHtml}
    `;

    // 重新初始化Glass Select组件
    setTimeout(() => {
        if (typeof initializeGlassSelectsNative === 'function') {
            initializeGlassSelectsNative(container);
        }
    }, 100);
}

// 生成参数输入控件
function generateParameterInput(param) {
    const isRequired = param.isRequired ? 'required' : '';
    const requiredMark = param.isRequired ? '<span class="text-danger">*</span>' : '';

    switch (param.dataType) {
        case 5: // Enum
            return generateEnumInput(param, isRequired, requiredMark);
        case 6: // Color
            return generateColorInput(param, isRequired, requiredMark);
        case 4: // Boolean
            return generateBooleanInput(param, isRequired, requiredMark);
        case 2: // Integer
            return generateIntegerInput(param, isRequired, requiredMark);
        case 3: // Decimal
            return generateDecimalInput(param, isRequired, requiredMark);
        default: // String
            return generateStringInput(param, isRequired, requiredMark);
    }
}

// 生成枚举输入
function generateEnumInput(param, isRequired, requiredMark) {
    const enumType = wordEnumTypes.find(et => et.id === param.enumTypeId);
    if (!enumType || !enumType.enumValues) {
        return generateStringInput(param, isRequired, requiredMark);
    }

    const options = enumType.enumValues.map(ev =>
        `<option value="${ev.value}" ${ev.isDefault ? 'selected' : ''}>${ev.displayName}</option>`
    ).join('');

    return `
        <div class="mb-3">
            <label for="param_${param.parameterKey}" class="form-label">
                ${param.parameterName} ${requiredMark}
            </label>
            <select class="glass-select-native" id="param_${param.parameterKey}" name="${param.parameterKey}" data-glass-select-native="true" ${isRequired}>
                ${options}
            </select>
            ${param.description ? `<small class="text-muted">${param.description}</small>` : ''}
        </div>
    `;
}

// 生成颜色输入
function generateColorInput(param, isRequired, requiredMark) {
    return `
        <div class="mb-3">
            <label for="param_${param.parameterKey}" class="form-label">
                ${param.parameterName} ${requiredMark}
            </label>
            <div class="input-group">
                <input type="color" class="glass-input"
                       id="param_${param.parameterKey}" name="${param.parameterKey}"
                       value="${param.defaultValue || '#000000'}" ${isRequired}
                       style="width: 60px; padding: 0.375rem 0.5rem;">
                <input type="text" class="glass-input"
                       id="param_${param.parameterKey}_text"
                       value="${param.defaultValue || '#000000'}"
                       placeholder="#000000"
                       onchange="document.getElementById('param_${param.parameterKey}').value = this.value">
            </div>
            ${param.description ? `<small class="text-muted">${param.description}</small>` : ''}
        </div>
    `;
}

// 生成布尔输入
function generateBooleanInput(param, isRequired, requiredMark) {
    const checked = param.defaultValue === 'true' ? 'checked' : '';
    return `
        <div class="mb-3">
            <div class="form-check">
                <input class="form-check-input" type="checkbox"
                       id="param_${param.parameterKey}" name="${param.parameterKey}"
                       value="true" ${checked}>
                <label class="form-check-label" for="param_${param.parameterKey}">
                    ${param.parameterName} ${requiredMark}
                </label>
            </div>
            ${param.description ? `<small class="text-muted">${param.description}</small>` : ''}
        </div>
    `;
}

// 生成整数输入
function generateIntegerInput(param, isRequired, requiredMark) {
    return `
        <div class="mb-3">
            <label for="param_${param.parameterKey}" class="form-label">
                ${param.parameterName} ${requiredMark}
            </label>
            <input type="number" class="glass-input"
                   id="param_${param.parameterKey}" name="${param.parameterKey}"
                   value="${param.defaultValue || ''}" step="1" ${isRequired}
                   placeholder="请输入整数值">
            ${param.description ? `<small class="text-muted">${param.description}</small>` : ''}
        </div>
    `;
}

// 生成小数输入
function generateDecimalInput(param, isRequired, requiredMark) {
    return `
        <div class="mb-3">
            <label for="param_${param.parameterKey}" class="form-label">
                ${param.parameterName} ${requiredMark}
            </label>
            <input type="number" class="glass-input"
                   id="param_${param.parameterKey}" name="${param.parameterKey}"
                   value="${param.defaultValue || ''}" step="0.1" ${isRequired}
                   placeholder="请输入数值">
            ${param.description ? `<small class="text-muted">${param.description}</small>` : ''}
        </div>
    `;
}

// 生成字符串输入
function generateStringInput(param, isRequired, requiredMark) {
    return `
        <div class="mb-3">
            <label for="param_${param.parameterKey}" class="form-label">
                ${param.parameterName} ${requiredMark}
            </label>
            <input type="text" class="glass-input"
                   id="param_${param.parameterKey}" name="${param.parameterKey}"
                   value="${param.defaultValue || ''}" ${isRequired}
                   placeholder="请输入文本">
            ${param.description ? `<small class="text-muted">${param.description}</small>` : ''}
        </div>
    `;
}

// 填充操作点参数值（编辑模式）
function fillOperationPointParameters(configJson) {
    try {
        const config = JSON.parse(configJson);

        Object.entries(config).forEach(([key, value]) => {
            const input = document.getElementById(`param_${key}`);
            if (input) {
                if (input.type === 'checkbox') {
                    input.checked = value === true || value === 'true';
                } else if (input.type === 'color') {
                    input.value = value;
                    const textInput = document.getElementById(`param_${key}_text`);
                    if (textInput) {
                        textInput.value = value;
                    }
                } else {
                    input.value = value;
                }
            }
        });
    } catch (error) {
        console.error('填充参数值失败:', error);
    }
}

// 重置操作点参数区域
function resetOperationPointParameters() {
    const container = document.getElementById('operationPointParameters');
    const cardBody = container.querySelector('.card-body');

    cardBody.innerHTML = `
        <div class="text-center text-muted py-3">
            <i class="bi bi-gear" style="font-size: 2rem;"></i>
            <p class="mt-2 mb-0">请先选择操作类型</p>
        </div>
    `;
}

// 操作点排序功能
async function moveOperationPointUp(operationPointId) {
    await reorderOperationPoint(operationPointId, 'up');
}

async function moveOperationPointDown(operationPointId) {
    await reorderOperationPoint(operationPointId, 'down');
}

async function reorderOperationPoint(operationPointId, direction) {
    const currentQuestion = currentQuestions.find(q => q.id === currentQuestionId);
    if (!currentQuestion || !currentQuestion.operationPoints) {
        showAlert('无法获取题目操作点数据', 'danger');
        return;
    }

    const operationPoints = [...currentQuestion.operationPoints].sort((a, b) => a.orderIndex - b.orderIndex);
    const currentIndex = operationPoints.findIndex(op => op.id === operationPointId);

    if (currentIndex === -1) {
        showAlert('操作点不存在', 'danger');
        return;
    }

    let newIndex;
    if (direction === 'up' && currentIndex > 0) {
        newIndex = currentIndex - 1;
    } else if (direction === 'down' && currentIndex < operationPoints.length - 1) {
        newIndex = currentIndex + 1;
    } else {
        return; // 无法移动
    }

    // 交换位置
    [operationPoints[currentIndex], operationPoints[newIndex]] = [operationPoints[newIndex], operationPoints[currentIndex]];

    // 构建新的排序映射
    const orderMapping = {};
    operationPoints.forEach((op, index) => {
        orderMapping[op.id] = index + 1;
    });

    try {
        const response = await fetch(`/api/word/question/${currentQuestionId}/reorder`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderMapping)
        });

        if (!response.ok) {
            throw new Error('调整顺序失败');
        }

        showAlert('操作点顺序调整成功', 'success');

        // 刷新题目详情
        await editQuestion(currentQuestionId);

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error('调整操作点顺序失败:', error);
        showAlert('调整顺序失败，请稍后重试', 'danger');
    }
}

// 批量操作功能
let batchSelectedOperationPoints = [];

// 显示批量添加操作点模态框
function showBatchAddOperationPointsModal() {
    if (!currentQuestionId) {
        showAlert('请先选择一个题目', 'warning');
        return;
    }

    batchSelectedOperationPoints = [];
    renderBatchOperationPointsList();
    renderSelectedOperationPointsList();

    const modal = new bootstrap.Modal(document.getElementById('batchAddOperationPointsModal'));
    modal.show();
}

// 渲染批量操作点列表
function renderBatchOperationPointsList() {
    const container = document.getElementById('batchOperationPointsList');

    const html = wordOperationPoints.map(point => {
        const categoryClass = getCategoryClass(point.category);
        const isSelected = batchSelectedOperationPoints.some(sp => sp.operationNumber === point.operationNumber);

        return `
            <div class="form-check mb-2 p-2 border rounded ${isSelected ? 'bg-light' : ''}">
                <input class="form-check-input" type="checkbox"
                       id="batch_op_${point.operationNumber}"
                       ${isSelected ? 'checked' : ''}
                       onchange="toggleBatchOperationPoint(${point.operationNumber})">
                <label class="form-check-label w-100" for="batch_op_${point.operationNumber}">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge ${categoryClass} me-2">${point.operationNumber}</span>
                            <strong>${point.name}</strong>
                        </div>
                        <small class="text-muted">${getCategoryName(point.category)}</small>
                    </div>
                    <small class="text-muted d-block mt-1">${point.description || ''}</small>
                </label>
            </div>
        `;
    }).join('');

    container.innerHTML = html;
}

// 渲染已选操作点列表
function renderSelectedOperationPointsList() {
    const container = document.getElementById('selectedOperationPointsList');
    const totalScoreElement = document.getElementById('batchTotalScore');

    if (batchSelectedOperationPoints.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-3">
                <i class="bi bi-cart" style="font-size: 2rem;"></i>
                <p class="mt-2 mb-0">请从左侧选择操作点</p>
            </div>
        `;
        totalScoreElement.textContent = '0分';
        return;
    }

    const html = batchSelectedOperationPoints.map((point, index) => {
        const categoryClass = getCategoryClass(point.category);

        return `
            <div class="glass-card mb-2">
                <div class="card-body py-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge ${categoryClass} me-2">${point.operationNumber}</span>
                            <strong>${point.name}</strong>
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <input type="number" class="form-control form-control-sm"
                                   style="width: 80px;" step="0.5" min="0"
                                   value="${point.score}"
                                   onchange="updateBatchOperationPointScore(${point.operationNumber}, this.value)">
                            <button class="btn btn-outline-danger btn-sm"
                                    onclick="removeBatchOperationPoint(${point.operationNumber})"
                                    title="移除">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');

    container.innerHTML = html;

    // 更新总分值
    const totalScore = batchSelectedOperationPoints.reduce((sum, point) => sum + point.score, 0);
    totalScoreElement.textContent = `${totalScore}分`;
}

// 切换批量操作点选择
function toggleBatchOperationPoint(operationNumber) {
    const point = wordOperationPoints.find(p => p.operationNumber === operationNumber);
    if (!point) return;

    const existingIndex = batchSelectedOperationPoints.findIndex(sp => sp.operationNumber === operationNumber);

    if (existingIndex >= 0) {
        batchSelectedOperationPoints.splice(existingIndex, 1);
    } else {
        batchSelectedOperationPoints.push({
            operationNumber: point.operationNumber,
            name: point.name,
            category: point.category,
            score: 5.0 // 默认分值
        });
    }

    renderSelectedOperationPointsList();
}

// 移除批量操作点
function removeBatchOperationPoint(operationNumber) {
    const index = batchSelectedOperationPoints.findIndex(sp => sp.operationNumber === operationNumber);
    if (index >= 0) {
        batchSelectedOperationPoints.splice(index, 1);
        renderBatchOperationPointsList();
        renderSelectedOperationPointsList();
    }
}

// 更新批量操作点分值
function updateBatchOperationPointScore(operationNumber, newScore) {
    const point = batchSelectedOperationPoints.find(sp => sp.operationNumber === operationNumber);
    if (point) {
        point.score = parseFloat(newScore) || 0;
        renderSelectedOperationPointsList();
    }
}

// 清空批量选择
function clearBatchSelection() {
    batchSelectedOperationPoints = [];
    renderBatchOperationPointsList();
    renderSelectedOperationPointsList();
}

// 确认批量添加操作点
async function confirmBatchAddOperationPoints() {
    if (batchSelectedOperationPoints.length === 0) {
        showAlert('请至少选择一个操作点', 'warning');
        return;
    }

    try {
        const promises = batchSelectedOperationPoints.map(point => {
            const operationConfig = getDefaultOperationConfig(point.operationNumber);
            return addOperationPoint(point.operationNumber.toString(), point.score, operationConfig);
        });

        const results = await Promise.all(promises);
        const failedCount = results.filter(r => !r.ok).length;

        if (failedCount === 0) {
            showAlert(`成功添加${batchSelectedOperationPoints.length}个操作点`, 'success');
        } else {
            showAlert(`添加完成，${batchSelectedOperationPoints.length - failedCount}个成功，${failedCount}个失败`, 'warning');
        }

        // 关闭模态框
        bootstrap.Modal.getInstance(document.getElementById('batchAddOperationPointsModal')).hide();

        // 刷新题目详情
        await editQuestion(currentQuestionId);

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error('批量添加操作点失败:', error);
        showAlert('批量添加操作点失败，请稍后重试', 'danger');
    }
}

// 获取默认操作配置
function getDefaultOperationConfig(operationNumber) {
    const operationPoint = wordOperationPoints.find(p => p.operationNumber === operationNumber);
    if (!operationPoint || !operationPoint.parameters) {
        return {};
    }

    const config = {};
    operationPoint.parameters.forEach(param => {
        if (param.defaultValue !== null && param.defaultValue !== undefined) {
            config[param.parameterKey] = param.defaultValue;
        }
    });

    return config;
}

// 清空所有操作点
async function clearAllOperationPoints() {
    if (!currentQuestionId) {
        showAlert('请先选择一个题目', 'warning');
        return;
    }

    const currentQuestion = currentQuestions.find(q => q.id === currentQuestionId);
    if (!currentQuestion || !currentQuestion.operationPoints || currentQuestion.operationPoints.length === 0) {
        showAlert('当前题目没有操作点', 'info');
        return;
    }

    if (!confirm(`确定要清空所有${currentQuestion.operationPoints.length}个操作点吗？此操作不可恢复。`)) {
        return;
    }

    try {
        const promises = currentQuestion.operationPoints.map(op =>
            fetch(`/api/word/question/operation-points/${op.id}`, { method: 'DELETE' })
        );

        const results = await Promise.all(promises);
        const failedCount = results.filter(r => !r.ok).length;

        if (failedCount === 0) {
            showAlert('所有操作点已清空', 'success');
        } else {
            showAlert(`清空完成，${results.length - failedCount}个成功，${failedCount}个失败`, 'warning');
        }

        // 刷新题目详情
        await editQuestion(currentQuestionId);

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error('清空操作点失败:', error);
        showAlert('清空操作点失败，请稍后重试', 'danger');
    }
}

// ==================== 多题目批量操作功能 ====================

let batchMultiSelectedOperationPoints = [];

// 显示批量添加操作点到多个题目的模态框
function showBatchAddOperationPointsToQuestionsModal() {
    if (selectedQuestionIds.length === 0) {
        showAlert('请先选择要操作的题目', 'warning');
        return;
    }

    batchMultiSelectedOperationPoints = [];
    renderBatchMultiOperationPointsList();
    renderSelectedMultiOperationPointsList();

    // 更新目标信息
    const targetInfo = document.getElementById('batchTargetInfo');
    if (targetInfo) {
        targetInfo.textContent = `将对选中的 ${selectedQuestionIds.length} 个题目批量添加操作点`;
    }

    const modal = new bootstrap.Modal(document.getElementById('batchAddOperationPointsToQuestionsModal'));
    modal.show();
}

// 渲染批量多题目操作点列表
function renderBatchMultiOperationPointsList() {
    const container = document.getElementById('batchMultiOperationPointsList');

    const html = wordOperationPoints.map(point => {
        const categoryClass = getCategoryClass(point.category);
        const isSelected = batchMultiSelectedOperationPoints.some(sp => sp.operationNumber === point.operationNumber);

        return `
            <div class="form-check mb-2 p-2 border rounded ${isSelected ? 'bg-light' : ''}">
                <input class="form-check-input" type="checkbox"
                       id="batch_multi_op_${point.operationNumber}"
                       ${isSelected ? 'checked' : ''}
                       onchange="toggleBatchMultiOperationPoint(${point.operationNumber})">
                <label class="form-check-label w-100" for="batch_multi_op_${point.operationNumber}">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge ${categoryClass} me-2">${point.operationNumber}</span>
                            <strong>${point.name}</strong>
                        </div>
                        <small class="text-muted">${getCategoryName(point.category)}</small>
                    </div>
                    <small class="text-muted d-block mt-1">${point.description || ''}</small>
                </label>
            </div>
        `;
    }).join('');

    container.innerHTML = html;
}

// 渲染已选多题目操作点列表
function renderSelectedMultiOperationPointsList() {
    const container = document.getElementById('selectedMultiOperationPointsList');
    const totalScoreElement = document.getElementById('batchMultiTotalScore');

    if (batchMultiSelectedOperationPoints.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-3">
                <i class="bi bi-cart" style="font-size: 2rem;"></i>
                <p class="mt-2 mb-0">请从左侧选择操作点</p>
            </div>
        `;
        totalScoreElement.textContent = '0分';
        return;
    }

    const html = batchMultiSelectedOperationPoints.map((point, index) => {
        const categoryClass = getCategoryClass(point.category);

        return `
            <div class="glass-card mb-2">
                <div class="card-body py-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge ${categoryClass} me-2">${point.operationNumber}</span>
                            <strong>${point.name}</strong>
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <input type="number" class="form-control form-control-sm"
                                   style="width: 80px;" step="0.5" min="0"
                                   value="${point.score}"
                                   onchange="updateBatchMultiOperationPointScore(${point.operationNumber}, this.value)">
                            <button class="btn btn-outline-danger btn-sm"
                                    onclick="removeBatchMultiOperationPoint(${point.operationNumber})"
                                    title="移除">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');

    container.innerHTML = html;

    // 更新总分值
    const totalScore = batchMultiSelectedOperationPoints.reduce((sum, point) => sum + point.score, 0);
    totalScoreElement.textContent = `${totalScore}分`;
}

// 切换批量多题目操作点选择
function toggleBatchMultiOperationPoint(operationNumber) {
    const point = wordOperationPoints.find(p => p.operationNumber === operationNumber);
    if (!point) return;

    const existingIndex = batchMultiSelectedOperationPoints.findIndex(sp => sp.operationNumber === operationNumber);

    if (existingIndex >= 0) {
        batchMultiSelectedOperationPoints.splice(existingIndex, 1);
    } else {
        batchMultiSelectedOperationPoints.push({
            operationNumber: point.operationNumber,
            name: point.name,
            category: point.category,
            score: 5.0 // 默认分值
        });
    }

    renderSelectedMultiOperationPointsList();
}

// 移除批量多题目操作点
function removeBatchMultiOperationPoint(operationNumber) {
    const index = batchMultiSelectedOperationPoints.findIndex(sp => sp.operationNumber === operationNumber);
    if (index >= 0) {
        batchMultiSelectedOperationPoints.splice(index, 1);
        renderBatchMultiOperationPointsList();
        renderSelectedMultiOperationPointsList();
    }
}

// 更新批量多题目操作点分值
function updateBatchMultiOperationPointScore(operationNumber, newScore) {
    const point = batchMultiSelectedOperationPoints.find(sp => sp.operationNumber === operationNumber);
    if (point) {
        point.score = parseFloat(newScore) || 0;
        renderSelectedMultiOperationPointsList();
    }
}

// 清空批量多题目选择
function clearBatchMultiSelection() {
    batchMultiSelectedOperationPoints = [];
    renderBatchMultiOperationPointsList();
    renderSelectedMultiOperationPointsList();
}

// 确认批量添加操作点到多个题目
async function confirmBatchAddOperationPointsToQuestions() {
    if (selectedQuestionIds.length === 0) {
        showAlert('请先选择要操作的题目', 'warning');
        return;
    }

    if (batchMultiSelectedOperationPoints.length === 0) {
        showAlert('请至少选择一个操作点', 'warning');
        return;
    }

    const confirmMessage = `确定要对 ${selectedQuestionIds.length} 个题目批量添加 ${batchMultiSelectedOperationPoints.length} 个操作点吗？`;
    if (!confirm(confirmMessage)) {
        return;
    }

    try {
        let totalSuccess = 0;
        let totalFailed = 0;
        const errors = [];

        // 显示进度
        showAlert('正在批量添加操作点...', 'info');

        // 对每个选中的题目添加操作点
        for (const questionId of selectedQuestionIds) {
            try {
                for (const point of batchMultiSelectedOperationPoints) {
                    const operationConfig = getDefaultOperationConfig(point.operationNumber);

                    const response = await fetch('/api/word/question/operation-points', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            questionId: questionId,
                            operationType: point.operationNumber.toString(),
                            score: point.score,
                            operationConfig: JSON.stringify(operationConfig)
                        })
                    });

                    if (response.ok) {
                        totalSuccess++;
                    } else {
                        totalFailed++;
                        const errorData = await response.json();
                        errors.push(`题目${questionId}-操作点${point.operationNumber}: ${errorData.message || '添加失败'}`);
                    }
                }
            } catch (error) {
                totalFailed += batchMultiSelectedOperationPoints.length;
                errors.push(`题目${questionId}: ${error.message}`);
            }
        }

        // 显示结果
        if (totalFailed === 0) {
            showAlert(`批量添加成功！共添加了 ${totalSuccess} 个操作点`, 'success');
        } else {
            showAlert(`批量添加完成：${totalSuccess} 个成功，${totalFailed} 个失败`, 'warning');
            if (errors.length > 0) {
                console.error('批量添加错误详情:', errors);
            }
        }

        // 关闭模态框
        bootstrap.Modal.getInstance(document.getElementById('batchAddOperationPointsToQuestionsModal')).hide();

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

        // 清空选择
        selectedQuestionIds = [];
        updateQuestionSelectionState();
        updateBatchOperationButtons();

    } catch (error) {
        console.error('批量添加操作点失败:', error);
        showAlert('批量添加操作点失败，请稍后重试', 'danger');
    }
}

// 批量切换题目状态
async function batchToggleQuestionStatus() {
    if (selectedQuestionIds.length === 0) {
        showAlert('请先选择要操作的题目', 'warning');
        return;
    }

    const confirmMessage = `确定要批量切换 ${selectedQuestionIds.length} 个题目的启用状态吗？`;
    if (!confirm(confirmMessage)) {
        return;
    }

    try {
        let successCount = 0;
        let failedCount = 0;

        showAlert('正在批量切换状态...', 'info');

        for (const questionId of selectedQuestionIds) {
            try {
                const response = await fetch(`/api/word/question/${questionId}/toggle-status`, {
                    method: 'PUT'
                });

                if (response.ok) {
                    successCount++;
                } else {
                    failedCount++;
                }
            } catch (error) {
                failedCount++;
            }
        }

        if (failedCount === 0) {
            showAlert(`批量切换状态成功！共处理了 ${successCount} 个题目`, 'success');
        } else {
            showAlert(`批量切换完成：${successCount} 个成功，${failedCount} 个失败`, 'warning');
        }

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

        // 清空选择
        selectedQuestionIds = [];
        updateQuestionSelectionState();
        updateBatchOperationButtons();

    } catch (error) {
        console.error('批量切换状态失败:', error);
        showAlert('批量切换状态失败，请稍后重试', 'danger');
    }
}

// 批量删除题目
async function batchDeleteQuestions() {
    if (selectedQuestionIds.length === 0) {
        showAlert('请先选择要删除的题目', 'warning');
        return;
    }

    const confirmMessage = `确定要删除选中的 ${selectedQuestionIds.length} 个题目吗？此操作不可恢复！`;
    if (!confirm(confirmMessage)) {
        return;
    }

    try {
        let successCount = 0;
        let failedCount = 0;

        showAlert('正在批量删除题目...', 'info');

        for (const questionId of selectedQuestionIds) {
            try {
                const response = await fetch(`/api/word/question/${questionId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    successCount++;
                } else {
                    failedCount++;
                }
            } catch (error) {
                failedCount++;
            }
        }

        if (failedCount === 0) {
            showAlert(`批量删除成功！共删除了 ${successCount} 个题目`, 'success');
        } else {
            showAlert(`批量删除完成：${successCount} 个成功，${failedCount} 个失败`, 'warning');
        }

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

        // 清空选择
        selectedQuestionIds = [];
        updateQuestionSelectionState();
        updateBatchOperationButtons();

    } catch (error) {
        console.error('批量删除题目失败:', error);
        showAlert('批量删除题目失败，请稍后重试', 'danger');
    }
}

// 导出操作点配置
function exportOperationPointsConfig() {
    if (!currentQuestionId) {
        showAlert('请先选择一个题目', 'warning');
        return;
    }

    const currentQuestion = currentQuestions.find(q => q.id === currentQuestionId);
    if (!currentQuestion || !currentQuestion.operationPoints || currentQuestion.operationPoints.length === 0) {
        showAlert('当前题目没有操作点可导出', 'info');
        return;
    }

    const config = {
        questionTitle: currentQuestion.requirements || `Word题目-${currentQuestion.id}`,
        exportTime: new Date().toISOString(),
        operationPoints: currentQuestion.operationPoints.map(op => ({
            operationType: op.operationType,
            score: op.score,
            operationConfig: JSON.parse(op.operationConfig),
            orderIndex: op.orderIndex
        }))
    };

    const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `word-question-${currentQuestion.id}-config.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showAlert('操作点配置已导出', 'success');
}

// 显示导入操作点配置模态框
function showImportOperationPointsModal() {
    showAlert('导入功能开发中，敬请期待', 'info');
}

// 保存操作点（添加或编辑）
async function saveOperationPoint() {
    const mode = document.getElementById('operationPointMode').value;
    const operationType = document.getElementById('operationPointType').value;
    const score = parseFloat(document.getElementById('operationPointScore').value);

    if (!operationType) {
        showAlert('请选择操作类型', 'warning');
        return;
    }

    if (!score || score <= 0) {
        showAlert('请输入有效的分值', 'warning');
        return;
    }

    // 收集参数配置
    const operationConfig = collectOperationPointParameters();

    try {
        let response;
        if (mode === 'add') {
            response = await addOperationPoint(operationType, score, operationConfig);
        } else {
            const operationPointId = parseInt(document.getElementById('operationPointId').value);
            response = await updateOperationPoint(operationPointId, operationType, score, operationConfig);
        }

        if (!response.ok) {
            throw new Error(`${mode === 'add' ? '添加' : '更新'}操作点失败`);
        }

        showAlert(`操作点${mode === 'add' ? '添加' : '更新'}成功`, 'success');

        // 关闭模态框
        bootstrap.Modal.getInstance(document.getElementById('operationPointModal')).hide();

        // 刷新题目详情
        await editQuestion(currentQuestionId);

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error(`${mode === 'add' ? '添加' : '更新'}操作点失败:`, error);
        showAlert(`${mode === 'add' ? '添加' : '更新'}操作点失败，请稍后重试`, 'danger');
    }
}

// 添加操作点
async function addOperationPoint(operationType, score, operationConfig) {
    return await fetch(`/api/word/question/${currentQuestionId}/operation-points`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            questionId: currentQuestionId,
            operationType: operationType,
            score: score,
            operationConfig: JSON.stringify(operationConfig),
            isEnabled: true
        })
    });
}

// 更新操作点
async function updateOperationPoint(operationPointId, operationType, score, operationConfig) {
    return await fetch(`/api/word/question/operation-points/${operationPointId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            id: operationPointId,
            questionId: currentQuestionId,
            operationType: operationType,
            score: score,
            operationConfig: JSON.stringify(operationConfig)
        })
    });
}

// 收集操作点参数
function collectOperationPointParameters() {
    const operationConfig = {};
    const form = document.getElementById('operationPointForm');
    const formData = new FormData(form);

    for (const [key, value] of formData.entries()) {
        if (key !== 'operationPointType' && key !== 'operationPointScore' &&
            key !== 'operationPointId' && key !== 'operationPointMode') {
            operationConfig[key] = value;
        }
    }

    // 处理复选框（布尔值）
    const checkboxes = form.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        if (!formData.has(checkbox.name)) {
            operationConfig[checkbox.name] = false;
        } else {
            operationConfig[checkbox.name] = true;
        }
    });

    return operationConfig;
}

// 显示删除操作点确认模态框
function showDeleteOperationPointModal(operationPointId) {
    const currentQuestion = currentQuestions.find(q => q.id === currentQuestionId);
    if (!currentQuestion || !currentQuestion.operationPoints) {
        showAlert('无法获取题目操作点数据', 'danger');
        return;
    }

    const operationPoint = currentQuestion.operationPoints.find(op => op.id === operationPointId);
    if (!operationPoint) {
        showAlert('操作点不存在', 'danger');
        return;
    }

    // 获取操作点详细信息
    const wordOperationPoint = wordOperationPoints.find(p => p.operationNumber.toString() === operationPoint.operationType);
    const operationName = wordOperationPoint ? wordOperationPoint.name : `操作点${operationPoint.operationType}`;

    // 填充删除确认信息
    const infoContainer = document.getElementById('deleteOperationPointInfo');
    infoContainer.innerHTML = `
        <div class="d-flex justify-content-between align-items-center mb-2">
            <strong>${operationName}</strong>
            <span class="glass-badge bg-primary">${operationPoint.score}分</span>
        </div>
        <div class="text-muted small">
            操作类型：${operationPoint.operationType} |
            配置参数：${getOperationConfigSummary(operationPoint.operationConfig)}
        </div>
    `;

    // 存储要删除的操作点ID
    document.getElementById('deleteOperationPointModal').setAttribute('data-operation-point-id', operationPointId);

    const modal = new bootstrap.Modal(document.getElementById('deleteOperationPointModal'));
    modal.show();
}

// 确认删除操作点
async function confirmDeleteOperationPoint() {
    const modal = document.getElementById('deleteOperationPointModal');
    const operationPointId = parseInt(modal.getAttribute('data-operation-point-id'));

    if (!operationPointId) {
        showAlert('无效的操作点ID', 'danger');
        return;
    }

    try {
        const response = await fetch(`/api/word/question/operation-points/${operationPointId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('删除操作点失败');
        }

        showAlert('操作点删除成功', 'success');

        // 关闭模态框
        bootstrap.Modal.getInstance(modal).hide();

        // 刷新题目详情
        if (currentQuestionId) {
            await editQuestion(currentQuestionId);
        }

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error('删除操作点失败:', error);
        showAlert('删除操作点失败，请稍后重试', 'danger');
    }
}

// 获取操作配置摘要
function getOperationConfigSummary(configJson) {
    try {
        const config = JSON.parse(configJson);
        const keys = Object.keys(config).filter(key => config[key] !== null && config[key] !== undefined && config[key] !== '');
        return keys.length > 0 ? `${keys.length}个参数` : '无参数';
    } catch {
        return '配置错误';
    }
}

// 删除操作点（保留原函数名以兼容现有调用）
async function deleteOperationPoint(operationPointId) {
    showDeleteOperationPointModal(operationPointId);
}

// 切换题目状态
async function toggleQuestionStatus(questionId) {
    try {
        const response = await fetch(`/api/word/question/${questionId}/toggle-status`, {
            method: 'POST'
        });

        if (!response.ok) {
            throw new Error('切换状态失败');
        }

        showAlert('状态切换成功', 'success');

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error('切换状态失败:', error);
        showAlert('切换状态失败，请稍后重试', 'danger');
    }
}

// 删除题目
async function deleteQuestion(questionId) {
    if (!confirm('确定要删除这个题目吗？此操作不可恢复。')) {
        return;
    }

    try {
        const response = await fetch(`/api/word/question/${questionId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('删除题目失败');
        }

        showAlert('题目删除成功', 'success');

        // 如果正在编辑被删除的题目，隐藏详情区域
        if (currentQuestionId === questionId) {
            hideQuestionDetails();
        }

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error('删除题目失败:', error);
        showAlert('删除题目失败，请稍后重试', 'danger');
    }
}

// 应用题目筛选
function applyQuestionFilters() {
    const searchTerm = document.getElementById('questionSearch').value.toLowerCase();
    const statusFilter = document.getElementById('questionStatusFilter').value;
    const minScore = parseFloat(document.getElementById('minScoreFilter').value) || 0;
    const maxScore = parseFloat(document.getElementById('maxScoreFilter').value) || Infinity;

    const filteredQuestions = currentQuestions.filter(question => {
        const matchesSearch = !searchTerm || (question.requirements && question.requirements.toLowerCase().includes(searchTerm));
        const matchesStatus = !statusFilter ||
            (statusFilter === 'enabled' && question.isEnabled) ||
            (statusFilter === 'disabled' && !question.isEnabled);
        const matchesScore = question.totalScore >= minScore && question.totalScore <= maxScore;

        return matchesSearch && matchesStatus && matchesScore;
    });

    renderFilteredQuestionsList(filteredQuestions);
}

// 渲染筛选后的题目列表
function renderFilteredQuestionsList(filteredQuestions) {
    const tbody = document.getElementById('questionTableBody');
    if (!tbody) return;

    if (filteredQuestions.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center py-5">
                    <div class="glass-table-empty">
                        <i class="bi bi-search"></i>
                        <h5>未找到匹配的题目</h5>
                        <p>请调整筛选条件或清空搜索框</p>
                        <button class="glass-btn glass-btn-primary" onclick="clearFilters()">
                            <i class="bi bi-x-circle"></i> 清空筛选
                        </button>
                    </div>
                </td>
            </tr>
        `;
        return;
    }

    tbody.innerHTML = filteredQuestions.map(question => `
        <tr>
            <td class="col-select">
                <div class="form-check table-checkbox">
                    <input class="form-check-input" type="checkbox" value="${question.id}">
                </div>
            </td>
            <td>
                <div class="fw-medium question-requirements">${question.requirements || '暂无要求'}</div>
                <small class="text-muted">ID: ${question.id}</small>
            </td>
            <td>
                <span class="glass-badge bg-info">${question.operationPoints?.length || 0}个</span>
            </td>
            <td>
                <span class="glass-badge bg-primary">${question.totalScore}分</span>
            </td>
            <td>
                ${question.isEnabled
                    ? '<span class="glass-badge bg-success">已启用</span>'
                    : '<span class="glass-badge bg-secondary">已禁用</span>'}
            </td>
            <td>
                <small class="text-muted">${new Date(question.createdAt).toLocaleString()}</small>
            </td>
            <td>
                <div class="btn-group">
                    <button class="glass-btn glass-btn-sm" onclick="editQuestion(${question.id})" title="编辑">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="glass-btn glass-btn-sm glass-btn-${question.isEnabled ? 'warning' : 'success'}"
                            onclick="toggleQuestionStatus(${question.id})"
                            title="${question.isEnabled ? '禁用' : '启用'}">
                        <i class="bi bi-${question.isEnabled ? 'pause' : 'play'}"></i>
                    </button>
                    <button class="glass-btn glass-btn-sm glass-btn-danger" onclick="deleteQuestion(${question.id})" title="删除">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

// 清空筛选条件
function clearFilters() {
    document.getElementById('questionSearch').value = '';
    document.getElementById('questionStatusFilter').value = '';
    document.getElementById('minScoreFilter').value = '';
    document.getElementById('maxScoreFilter').value = '';
    renderQuestionsList();
}

// 快速选择操作点
function selectOperationPoint(operationNumber) {
    if (!currentQuestionId) {
        // 如果没有选中题目，显示题目选择对话框
        showQuestionSelectionModal(operationNumber);
        return;
    }

    // 自动填充操作点类型并打开模态框
    showAddOperationPointModal();
    document.getElementById('operationPointType').value = operationNumber;
    loadOperationPointParameters();
}

// 保存题目详情
document.getElementById('questionDetailsForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    if (!currentQuestionId) {
        showAlert('无效的题目ID', 'danger');
        return;
    }

    const requirements = document.getElementById('questionRequirements').value.trim();

    if (!requirements) {
        showAlert('请输入题目要求', 'warning');
        return;
    }

    try {
        // 生成题目标题和描述
        const title = `Word题目-${currentQuestionId}`;
        const description = `题目要求：${requirements}`;

        const response = await fetch(`/api/word/question/${currentQuestionId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: currentQuestionId,
                subjectId: currentSubjectId,
                title: title,
                description: description,
                requirements: requirements
            })
        });

        if (!response.ok) {
            throw new Error('保存题目失败');
        }

        showAlert('题目保存成功', 'success');

        // 刷新题目列表
        await loadWordQuestions();
        renderQuestionsList();

    } catch (error) {
        console.error('保存题目失败:', error);
        showAlert('保存题目失败，请稍后重试', 'danger');
    }
});

// ==================== 导入导出功能 ====================

// 显示导入模态框
function showImportModal() {
    // 重置表单
    document.getElementById('importFile').value = '';
    document.getElementById('importProgress').style.display = 'none';
    document.getElementById('importResult').style.display = 'none';
    document.getElementById('importBtn').disabled = false;

    // 显示模态框
    const modal = new bootstrap.Modal(document.getElementById('importModal'));
    modal.show();
}

// 导出Word题目
async function exportWordQuestions(enabledOnly = false) {
    try {
        showAlert('正在导出题目...', 'info');

        const url = `/api/word/question/export?subjectId=${currentSubjectId}&enabledOnly=${enabledOnly}`;
        const response = await fetch(url);

        if (!response.ok) {
            throw new Error('导出失败');
        }

        // 获取文件名
        const contentDisposition = response.headers.get('Content-Disposition');
        let fileName = `WordQuestions_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;
        if (contentDisposition) {
            const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
            if (fileNameMatch) {
                fileName = fileNameMatch[1];
            }
        }

        // 下载文件
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(downloadUrl);

        showAlert('导出成功', 'success');
    } catch (error) {
        console.error('导出失败:', error);
        showAlert('导出失败，请稍后重试', 'danger');
    }
}

// 下载导入模板
async function downloadImportTemplate() {
    try {
        showAlert('正在生成模板...', 'info');

        const response = await fetch('/api/word/question/import-template');

        if (!response.ok) {
            throw new Error('生成模板失败');
        }

        // 获取文件名
        const contentDisposition = response.headers.get('Content-Disposition');
        let fileName = `WordQuestions_ImportTemplate_${new Date().toISOString().slice(0, 10)}.xlsx`;
        if (contentDisposition) {
            const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
            if (fileNameMatch) {
                fileName = fileNameMatch[1];
            }
        }

        // 下载文件
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(downloadUrl);

        showAlert('模板下载成功', 'success');
    } catch (error) {
        console.error('下载模板失败:', error);
        showAlert('下载模板失败，请稍后重试', 'danger');
    }
}

// 导入Word题目
async function importWordQuestions() {
    const fileInput = document.getElementById('importFile');
    const file = fileInput.files[0];

    if (!file) {
        showAlert('请选择要导入的Excel文件', 'warning');
        return;
    }

    // 验证文件类型
    const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel'
    ];
    if (!allowedTypes.includes(file.type)) {
        showAlert('仅支持Excel文件格式（.xlsx, .xls）', 'warning');
        return;
    }

    // 验证文件大小（10MB）
    if (file.size > 10 * 1024 * 1024) {
        showAlert('文件大小不能超过10MB', 'warning');
        return;
    }

    try {
        // 显示进度
        document.getElementById('importProgress').style.display = 'block';
        document.getElementById('importResult').style.display = 'none';
        document.getElementById('importBtn').disabled = true;

        updateImportProgress(0, '准备导入...');

        // 创建FormData
        const formData = new FormData();
        formData.append('file', file);

        updateImportProgress(25, '上传文件...');

        // 发送请求
        const response = await fetch(`/api/word/question/import?subjectId=${currentSubjectId}`, {
            method: 'POST',
            body: formData
        });

        updateImportProgress(75, '处理数据...');

        const result = await response.json();

        updateImportProgress(100, '导入完成');

        // 显示结果
        setTimeout(() => {
            document.getElementById('importProgress').style.display = 'none';
            showImportResult(result);

            if (result.success && result.successCount > 0) {
                // 刷新题目列表
                loadWordQuestions().then(() => {
                    renderQuestionsList();
                });
            }
        }, 500);

    } catch (error) {
        console.error('导入失败:', error);
        document.getElementById('importProgress').style.display = 'none';
        document.getElementById('importBtn').disabled = false;
        showAlert('导入失败，请稍后重试', 'danger');
    }
}

// 更新导入进度
function updateImportProgress(percentage, text) {
    const progressBar = document.getElementById('importProgressBar');
    const progressText = document.getElementById('importProgressText');

    progressBar.style.width = percentage + '%';
    progressText.textContent = text;
}

// 显示导入结果
function showImportResult(result) {
    const resultDiv = document.getElementById('importResult');
    const alertDiv = document.getElementById('importResultAlert');
    const contentDiv = document.getElementById('importResultContent');

    let alertClass = 'alert-success';
    let icon = 'bi-check-circle';

    if (result.failCount > 0 && result.successCount === 0) {
        alertClass = 'alert-danger';
        icon = 'bi-x-circle';
    } else if (result.failCount > 0) {
        alertClass = 'alert-warning';
        icon = 'bi-exclamation-triangle';
    }

    alertDiv.className = `alert glass-card ${alertClass}`;

    let content = `
        <div class="d-flex align-items-center mb-2">
            <i class="${icon} me-2"></i>
            <strong>导入完成</strong>
        </div>
        <div class="row">
            <div class="col-md-6">
                <p class="mb-1"><i class="bi bi-check-circle text-success me-1"></i>成功导入：${result.successCount} 个题目</p>
                <p class="mb-1"><i class="bi bi-x-circle text-danger me-1"></i>导入失败：${result.failCount} 个题目</p>
            </div>
        </div>
    `;

    if (result.errors && result.errors.length > 0) {
        content += `
            <div class="mt-3">
                <strong>错误详情：</strong>
                <ul class="mb-0 mt-2">
        `;
        result.errors.slice(0, 10).forEach(error => {
            content += `<li>${error}</li>`;
        });
        if (result.errors.length > 10) {
            content += `<li>... 还有 ${result.errors.length - 10} 个错误</li>`;
        }
        content += `</ul></div>`;
    }

    contentDiv.innerHTML = content;
    resultDiv.style.display = 'block';

    // 重新启用导入按钮
    document.getElementById('importBtn').disabled = false;
}

// 显示提示消息
function showAlert(message, type = 'info') {
    // 创建提示元素
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

    document.body.appendChild(alertDiv);

    // 3秒后自动移除
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.parentNode.removeChild(alertDiv);
        }
    }, 3000);
}

// 题目选择相关功能
let selectedOperationNumber = null; // 存储当前选择的操作点编号

// 显示题目选择模态框
function showQuestionSelectionModal(operationNumber) {
    selectedOperationNumber = operationNumber;

    // 渲染题目列表
    renderQuestionSelectionList();

    // 显示模态框
    const modal = new bootstrap.Modal(document.getElementById('questionSelectionModal'));
    modal.show();
}

// 渲染题目选择列表
function renderQuestionSelectionList() {
    const container = document.getElementById('questionSelectionList');
    const searchTerm = document.getElementById('questionSelectionSearch').value.toLowerCase();

    if (!currentQuestions || currentQuestions.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-inbox fs-1 mb-3 d-block"></i>
                <h6>暂无题目</h6>
                <p>请先创建一些题目</p>
            </div>
        `;
        return;
    }

    // 过滤题目
    const filteredQuestions = currentQuestions.filter(question => {
        if (!searchTerm) return true;
        return question.requirements?.toLowerCase().includes(searchTerm) ||
               question.id.toString().includes(searchTerm);
    });

    if (filteredQuestions.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-search fs-1 mb-3 d-block"></i>
                <h6>未找到匹配的题目</h6>
                <p>请尝试其他搜索条件</p>
            </div>
        `;
        return;
    }

    container.innerHTML = filteredQuestions.map(question => `
        <div class="question-selection-item" onclick="selectQuestionForOperationPoint(${question.id})">
            <h6>题目 #${question.id}</h6>
            <p class="question-requirements">${question.requirements || '暂无要求'}</p>
            <div class="question-meta">
                <span>操作点: ${question.operationPoints?.length || 0}个</span>
                <span class="question-score">${question.totalScore}分</span>
            </div>
        </div>
    `).join('');
}

// 选择题目并添加操作点
function selectQuestionForOperationPoint(questionId) {
    // 设置当前题目ID
    currentQuestionId = questionId;

    // 关闭题目选择模态框
    const modal = bootstrap.Modal.getInstance(document.getElementById('questionSelectionModal'));
    modal.hide();

    // 延迟一下再打开操作点添加模态框，确保题目选择模态框完全关闭
    setTimeout(() => {
        // 自动填充操作点类型并打开模态框
        showAddOperationPointModal();
        document.getElementById('operationPointType').value = selectedOperationNumber;
        loadOperationPointParameters();
    }, 300);
}

// 过滤题目选择列表
function filterQuestionsInModal() {
    renderQuestionSelectionList();
}
</script>

@section Scripts {
    <!-- 引入增强的玻璃表格组件 -->
    <script src="~/js/glass-table.js"></script>
    <!-- glassmorphism-select组件已在_Layout.cshtml中全局引入，无需重复引入 -->
}
