@model List<ExaminaWebApplication.Models.Api.Admin.AdminExamDto>
@{
    ViewData["Title"] = "考试管理";
}

<!-- 欢迎横幅 -->
<div class="glass-card glass-card-primary py-5 mb-5">
    <div class="container text-center">
        <h1 class="display-4 fw-bold">
            <i class="bi bi-clipboard-check me-3"></i>
            考试管理中心
        </h1>
        <p class="lead mb-4">导入和管理来自 ExamLab 的考试数据</p>
        <div class="row justify-content-center">
            <div class="col-md-8">
                <p class="mb-4">支持从 ExamLab 项目导入的 JSON 和 XML 格式考试文件，提供完整的考试查看、管理和统计功能。</p>
                <a asp-action="ImportExam" class="glass-btn glass-btn-primary btn-lg me-3">
                    <i class="bi bi-upload me-2"></i>导入考试
                </a>
                <a asp-action="ExamList" class="glass-btn btn-lg">
                    <i class="bi bi-list-ul me-2"></i>查看所有考试
                </a>
            </div>
        </div>
    </div>
</div>

<!-- 系统统计 -->
<div class="container mb-5">
    <div class="row text-center mb-4">
        <div class="col-md-12">
            <h2 class="fw-bold mb-3">导入统计</h2>
            <p class="text-muted">已导入考试数据概览</p>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-3">
            <div class="glass-card text-center">
                <div class="card-body">
                    <i class="bi bi-clipboard-check text-primary mb-2" style="font-size: 2rem;"></i>
                    <h4 class="fw-bold text-primary">@Model.Count</h4>
                    <p class="text-muted mb-0">总考试数</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card text-center">
                <div class="card-body">
                    <i class="bi bi-collection text-success mb-2" style="font-size: 2rem;"></i>
                    <h4 class="fw-bold text-success">@Model.Sum(e => e.Subjects.Count)</h4>
                    <p class="text-muted mb-0">总科目数</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card text-center">
                <div class="card-body">
                    <i class="bi bi-grid-3x3-gap text-info mb-2" style="font-size: 2rem;"></i>
                    <h4 class="fw-bold text-info">@Model.Sum(e => e.Modules.Count)</h4>
                    <p class="text-muted mb-0">总模块数</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card text-center">
                <div class="card-body">
                    <i class="bi bi-question-circle text-warning mb-2" style="font-size: 2rem;"></i>
                    <h4 class="fw-bold text-warning">@(Model.Sum(e => e.Subjects.Sum(s => s.QuestionCount)) + Model.Sum(e => e.Modules.Sum(m => m.Questions.Count)))</h4>
                    <p class="text-muted mb-0">总题目数</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 最近导入的考试 -->
<div class="glass-card mb-5">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-clock-history me-2"></i>最近导入的考试
        </h5>
    </div>
    <div class="card-body">
                    @if (Model.Any())
                    {
                        <div>
                            <table class="table glass-table" data-glass-table>
                                <thead>
                                    <tr>
                                        <th>考试名称</th>
                                        <th>考试类型</th>
                                        <th>状态</th>
                                        <th>总分</th>
                                        <th>时长</th>
                                        <th>科目数</th>
                                        <th>模块数</th>
                                        <th>导入时间</th>
                                        <th>操作</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var exam in Model.OrderByDescending(e => e.ImportedAt).Take(10))
                                    {
                                        <tr>
                                            <td>
                                                <strong>@exam.Name</strong>
                                                @if (!string.IsNullOrEmpty(exam.Description))
                                                {
                                                    <br><small class="text-muted">@exam.Description</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@exam.ExamType</span>
                                            </td>
                                            <td>
                                                @switch (exam.Status)
                                                {
                                                    case "Draft":
                                                        <span class="badge bg-warning">草稿</span>
                                                        break;
                                                    case "Published":
                                                        <span class="badge bg-success">已发布</span>
                                                        break;
                                                    case "Archived":
                                                        <span class="badge bg-secondary">已归档</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-light text-dark">@exam.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>@exam.TotalScore 分</td>
                                            <td>@exam.DurationMinutes 分钟</td>
                                            <td>@exam.Subjects.Count</td>
                                            <td>@exam.Modules.Count</td>
                                            <td>
                                                <small>@exam.ImportedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <a asp-action="ExamDetails" asp-route-id="@exam.Id"
                                                       class="glass-btn glass-btn-primary" title="查看详情">
                                                        <i class="bi bi-eye"></i>
                                                    </a>
                                                    <button type="button" class="glass-btn glass-btn-danger"
                                                            onclick="deleteExam(@exam.Id, '@exam.Name')" title="删除">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (Model.Count > 10)
                        {
                            <div class="text-center mt-3">
                                <a asp-action="ExamList" class="glass-btn glass-btn-primary">
                                    查看全部考试 (@Model.Count)
                                </a>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-inbox display-1 text-muted"></i>
                            <h4 class="mt-3 text-muted">暂无导入的考试</h4>
                            <p class="text-muted">点击上方"导入考试"按钮开始导入您的第一个考试</p>
                            <a asp-action="ImportExam" class="glass-btn glass-btn-primary">
                                <i class="bi bi-upload me-1"></i>立即导入
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 考试管理 -->
@if (Model.Any())
{
    <div class="container mb-5">
        <div class="row text-center mb-4">
            <div class="col-md-12">
                <h2 class="fw-bold mb-3">考试管理</h2>
                <p class="text-muted">设置考试时间和状态</p>
            </div>
        </div>

        <div class="glass-card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>考试名称</th>
                                <th>状态</th>
                                <th>类型</th>
                                <th>开始时间</th>
                                <th>结束时间</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var exam in Model)
                            {
                                <tr>
                                    <td>
                                        <strong>@exam.Name</strong>
                                        @if (!string.IsNullOrEmpty(exam.Description))
                                        {
                                            <br><small class="text-muted">@exam.Description</small>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-@(exam.Status switch {
                                            "Draft" => "secondary",
                                            "Scheduled" => "info",
                                            "Published" => "primary",
                                            "InProgress" => "success",
                                            "Completed" => "dark",
                                            "Cancelled" => "danger",
                                            _ => "secondary"
                                        })">
                                            @(exam.Status switch {
                                                "Draft" => "草稿",
                                                "Scheduled" => "已安排",
                                                "Published" => "已发布",
                                                "InProgress" => "进行中",
                                                "Completed" => "已结束",
                                                "Cancelled" => "已取消",
                                                _ => exam.Status
                                            })
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(exam.ExamCategory.ToString() == "Provincial" ? "warning" : "info")">
                                            @(exam.ExamCategory.ToString() == "Provincial" ? "全省统考" : "学校统考")
                                        </span>
                                    </td>
                                    <td>
                                        @if (exam.StartTime.HasValue)
                                        {
                                            @exam.StartTime.Value.ToString("yyyy-MM-dd HH:mm")
                                        }
                                        else
                                        {
                                            <span class="text-muted">未设置</span>
                                        }
                                    </td>
                                    <td>
                                        @if (exam.EndTime.HasValue)
                                        {
                                            @exam.EndTime.Value.ToString("yyyy-MM-dd HH:mm")
                                        }
                                        else
                                        {
                                            <span class="text-muted">未设置</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary"
                                                    onclick="setExamSchedule(@exam.Id, '@exam.Name')">
                                                设置时间
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                                    onclick="updateExamStatus(@exam.Id, '@exam.Name', '@exam.Status')">
                                                更改状态
                                            </button>
                                            @if (exam.Status == "Draft" || exam.Status == "Scheduled")
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-success"
                                                        onclick="publishExam(@exam.Id, '@exam.Name')">
                                                    发布
                                                </button>
                                            }
                                            @if (exam.Status == "Published")
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-warning"
                                                        onclick="startExam(@exam.Id, '@exam.Name')">
                                                    开始
                                                </button>
                                            }
                                            @if (exam.Status == "InProgress")
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-danger"
                                                        onclick="endExam(@exam.Id, '@exam.Name')">
                                                    结束
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

<!-- 快速操作 -->
<div class="glass-card py-5">
    <div class="container">
        <div class="row text-center mb-4">
            <div class="col-md-12">
                <h2 class="fw-bold mb-3">快速操作</h2>
                <p class="text-muted">常用功能快速入口</p>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="row g-3">
                    <div class="col-md-4">
                        <a asp-action="ImportExam" class="glass-btn glass-btn-primary btn-lg w-100">
                            <i class="bi bi-upload me-2"></i>导入考试
                        </a>
                    </div>
                    <div class="col-md-4">
                        <a asp-action="ExamList" class="glass-btn glass-btn-success btn-lg w-100">
                            <i class="bi bi-list-ul me-2"></i>考试列表
                        </a>
                    </div>
                    <div class="col-md-4">
                        <button onclick="refreshStatistics()" class="glass-btn glass-btn-secondary btn-lg w-100">
                            <i class="bi bi-arrow-clockwise me-2"></i>刷新统计
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 防伪令牌 -->
@Html.AntiForgeryToken()

@section Scripts {
    <script>
        function deleteExam(examId, examName) {
            if (confirm(`确定要删除考试"${examName}"吗？此操作不可撤销。`)) {
                $.ajax({
                    url: '@Url.Action("DeleteExam")',
                    type: 'POST',
                    data: {
                        id: examId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(result) {
                        if (result.success) {
                            location.reload();
                        } else {
                            alert('删除失败: ' + result.message);
                        }
                    },
                    error: function() {
                        alert('删除失败，请稍后重试');
                    }
                });
            }
        }

        function refreshStatistics() {
            location.reload();
        }

        // 考试管理功能
        function setExamSchedule(examId, examName) {
            const startTime = prompt(`设置考试 "${examName}" 的开始时间 (格式: YYYY-MM-DD HH:MM):`);
            if (!startTime) return;

            const endTime = prompt(`设置考试 "${examName}" 的结束时间 (格式: YYYY-MM-DD HH:MM):`);
            if (!endTime) return;

            $.ajax({
                url: `/ExamManagement/set-schedule/${examId}`,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    startTime: startTime,
                    endTime: endTime
                }),
                success: function(response) {
                    alert('考试时间设置成功');
                    location.reload();
                },
                error: function() {
                    alert('考试时间设置失败');
                }
            });
        }

        function updateExamStatus(examId, examName, currentStatus) {
            const statuses = ['Draft', 'Scheduled', 'Published', 'InProgress', 'Completed', 'Cancelled'];
            const statusNames = ['草稿', '已安排', '已发布', '进行中', '已结束', '已取消'];

            let options = '';
            for (let i = 0; i < statuses.length; i++) {
                const selected = statuses[i] === currentStatus ? 'selected' : '';
                options += `<option value="${statuses[i]}" ${selected}>${statusNames[i]}</option>`;
            }

            const newStatus = prompt(`选择考试 "${examName}" 的新状态:\n${statusNames.join(', ')}\n\n请输入状态英文名称:`);
            if (!newStatus || !statuses.includes(newStatus)) return;

            $.ajax({
                url: `/ExamManagement/update-status/${examId}`,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    status: newStatus
                }),
                success: function(response) {
                    alert('考试状态更新成功');
                    location.reload();
                },
                error: function() {
                    alert('考试状态更新失败');
                }
            });
        }

        function publishExam(examId, examName) {
            if (confirm(`确定要发布考试 "${examName}" 吗？`)) {
                $.ajax({
                    url: `/ExamManagement/publish/${examId}`,
                    type: 'POST',
                    success: function(response) {
                        alert('考试发布成功');
                        location.reload();
                    },
                    error: function() {
                        alert('考试发布失败');
                    }
                });
            }
        }

        function startExam(examId, examName) {
            if (confirm(`确定要开始考试 "${examName}" 吗？`)) {
                $.ajax({
                    url: `/ExamManagement/start/${examId}`,
                    type: 'POST',
                    success: function(response) {
                        alert('考试已开始');
                        location.reload();
                    },
                    error: function() {
                        alert('考试开始失败');
                    }
                });
            }
        }

        function endExam(examId, examName) {
            if (confirm(`确定要结束考试 "${examName}" 吗？`)) {
                $.ajax({
                    url: `/ExamManagement/end/${examId}`,
                    type: 'POST',
                    success: function(response) {
                        alert('考试已结束');
                        location.reload();
                    },
                    error: function() {
                        alert('考试结束失败');
                    }
                });
            }
        }
    </script>
}
