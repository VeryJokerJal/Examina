@model IEnumerable<ExaminaWebApplication.Models.Exam.ExamQuestion>
@{
    var subject = ViewBag.Subject as ExaminaWebApplication.Models.Exam.ExamSubject;
    ViewData["Title"] = ViewData["Title"]?.ToString() ?? "Windows题目管理";
}

<!-- 页面标题和操作按钮 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-windows me-2 text-primary"></i>Windows题目管理
        </h1>
        @if (subject != null)
        {
            <p class="text-muted mb-0">
                <i class="bi bi-folder me-1"></i>
                @subject.SubjectName - 管理Windows文件系统操作题目
            </p>
        }
    </div>
    <div>
        @if (subject != null)
        {
            <a href="@Url.Action("ExamDetails", "ExamManagement", new { id = subject.ExamId })" class="glass-btn me-2">
                <i class="bi bi-file-earmark-text"></i> 试卷详情
            </a>
            <button class="glass-btn glass-btn-primary" onclick="showCreateWindowsQuestionModal()">
                <i class="bi bi-plus"></i> 创建Windows题目
            </button>
        }
    </div>
</div>

<!-- 科目信息概览 -->
@if (subject != null)
{
    <div class="glass-card mb-4">
        <div class="card-header glass-card-header">
            <h5 class="mb-0">
                <i class="bi bi-info-circle me-2"></i>科目信息
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <strong>科目名称：</strong>@subject.SubjectName
                </div>
                <div class="col-md-2">
                    <strong>科目分值：</strong><span class="text-primary">@subject.Score 分</span>
                </div>
                <div class="col-md-2">
                    <strong>考试时长：</strong><span class="text-info">@subject.DurationMinutes 分钟</span>
                </div>

                <div class="col-md-3">
                    <strong>状态：</strong>
                    <span class="badge @(subject.IsEnabled ? "bg-success" : "bg-secondary") me-2">
                        @(subject.IsEnabled ? "启用" : "禁用")
                    </span>
                    @if (subject.IsRequired)
                    {
                        <span class="badge bg-warning">必考</span>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- 全局题目要求配置 -->
<div class="glass-card mb-4">
    <div class="card-header glass-card-header">
        <h5 class="mb-0">
            <i class="bi bi-file-text me-2"></i>题目要求配置
        </h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="markdown-editor-container">
                    <div class="markdown-toolbar glass-card-header">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('**', '**')" title="粗体">
                                <i class="bi bi-type-bold"></i>
                            </button>
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('*', '*')" title="斜体">
                                <i class="bi bi-type-italic"></i>
                            </button>
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('`', '`')" title="代码">
                                <i class="bi bi-code"></i>
                            </button>
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('```\n', '\n```')" title="代码块">
                                <i class="bi bi-code-square"></i>
                            </button>
                        </div>
                        <div class="btn-group ms-2" role="group">
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('# ', '')" title="标题1">
                                H1
                            </button>
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('## ', '')" title="标题2">
                                H2
                            </button>
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('### ', '')" title="标题3">
                                H3
                            </button>
                        </div>
                        <div class="btn-group ms-2" role="group">
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('- ', '')" title="无序列表">
                                <i class="bi bi-list-ul"></i>
                            </button>
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('1. ', '')" title="有序列表">
                                <i class="bi bi-list-ol"></i>
                            </button>
                            <button type="button" class="btn btn-sm glass-btn" onclick="insertWindowsMarkdown('[链接文本](', ')')" title="链接">
                                <i class="bi bi-link"></i>
                            </button>
                        </div>
                        <div class="btn-group ms-2" role="group">
                            <button type="button" class="btn btn-sm glass-btn" onclick="saveWindowsRequirements()" title="保存要求">
                                <i class="bi bi-floppy"></i> 保存
                            </button>
                        </div>
                    </div>
                    <textarea class="glass-input markdown-editor" id="windowsRequirements" rows="10"
                              placeholder="请输入Windows题目的通用要求，支持Markdown格式&#10;&#10;示例：&#10;# 操作要求&#10;## 基本要求&#10;- 按照指定步骤完成操作&#10;- 确保操作的准确性&#10;&#10;## 注意事项&#10;```&#10;请在操作前备份重要文件&#10;```&#10;&#10;## 评分标准&#10;1. 操作正确性 (60%)&#10;2. 操作效率 (30%)&#10;3. 文件整理 (10%)"></textarea>
                </div>
            </div>
            <div class="col-md-6">
                <div class="glass-card h-100">
                    <div class="card-header glass-card-header py-2 d-flex justify-content-between align-items-center">
                        <small class="text-muted">Markdown预览</small>
                        <button type="button" class="btn btn-sm glass-btn" onclick="toggleWindowsPreviewMode()" id="windowsPreviewToggle">
                            <i class="bi bi-eye"></i>
                        </button>
                    </div>
                    <div class="card-body markdown-preview" id="windowsRequirementsPreview"
                         style="min-height: 300px; max-height: 300px; overflow-y: auto;">
                        <small class="text-muted">在左侧输入Markdown内容，这里将显示预览</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 题目统计信息 -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-success mb-0">@Model.Count(q => q.IsEnabled)</h4>
                <small class="text-muted">启用题目</small>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-info mb-0">@Model.Sum(q => q.Score)</h4>
                <small class="text-muted">题目总分</small>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="glass-card text-center">
            <div class="card-body">
                <h4 class="text-warning mb-0">@(Model.Any() ? Model.Average(q => q.DifficultyLevel).ToString("F1") : "0")</h4>
                <small class="text-muted">平均难度</small>
            </div>
        </div>
    </div>
</div>

<!-- 题目列表 -->
<div class="glass-card">
    <div class="card-header glass-card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-list me-2"></i>Windows题目列表
        </h5>
        <div>



            <div class="btn-group">
                <button type="button" class="glass-btn glass-btn-info btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-download"></i> 导入导出
                </button>
                <ul class="dropdown-menu glass-dropdown">
                    <li><a class="dropdown-item" href="#" onclick="downloadTemplate()">
                        <i class="bi bi-file-earmark-excel text-success me-2"></i>下载模板
                    </a></li>
                    <li><a class="dropdown-item" href="#" onclick="importWindowsQuestions()">
                        <i class="bi bi-upload text-primary me-2"></i>导入题目
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" onclick="exportWindowsQuestions()">
                        <i class="bi bi-download text-warning me-2"></i>导出题目
                    </a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="card-body">
        @{
            var hasSimplifiedQuestions = ViewBag.SimplifiedQuestions != null && ((List<ExaminaWebApplication.Models.Exam.SimplifiedQuestionResponse>)ViewBag.SimplifiedQuestions).Any();
            var hasOldQuestions = Model != null && Model.Any();
            var hasAnyQuestions = hasSimplifiedQuestions || hasOldQuestions;
        }

        <!-- 题目列表管理卡片 -->
        <div class="glass-card mb-4">
            <div class="card-header glass-card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-list-ul me-2"></i>题目列表管理
                </h5>
                <div class="d-flex gap-2">
                    <button class="glass-btn glass-btn-primary" onclick="showCreateWindowsQuestionModal()">
                        <i class="bi bi-plus-circle me-1"></i>创建题目
                    </button>
                    <button class="glass-btn glass-btn-info" onclick="refreshQuestionList()">
                        <i class="bi bi-arrow-clockwise me-1"></i>刷新
                    </button>
                </div>
            </div>
            <div class="card-body">
                <!-- 题目搜索和筛选 -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <input type="text" class="glass-input" id="questionSearch" placeholder="搜索题目要求...">
                    </div>
                    <div class="col-md-2">
                        <select data-glass-select-native data-placeholder="全部状态" id="questionStatusFilter">
                            <option value="">全部状态</option>
                            <option value="enabled">启用</option>
                            <option value="disabled">禁用</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="glass-input" id="minScoreFilter" placeholder="最低分值" min="0" step="0.1">
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="glass-input" id="maxScoreFilter" placeholder="最高分值" min="0" step="0.1">
                    </div>
                    <div class="col-md-2">
                        <button class="glass-btn glass-btn-primary w-100" onclick="applyQuestionFilters()">
                            <i class="bi bi-funnel"></i> 筛选
                        </button>
                    </div>
                </div>



                <!-- 题目表格（使用glassmorphism样式） -->
                <div class="table-responsive">
                    <table class="glass-table" id="questionTable" data-glass-table>
                        <colgroup>
                            <col style="width:56px" />
                            <col />
                            <col style="width:10%" />
                            <col style="width:12%" />
                            <col style="width:10%" />
                            <col style="width:16%" />
                            <col style="width:160px" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th class="col-select">
                                    <div class="form-check table-checkbox">
                                        <input class="form-check-input" type="checkbox" id="selectAllQuestions">
                                        <label class="form-check-label visually-hidden" for="selectAllQuestions">全选</label>
                                    </div>
                                </th>
                                <th data-sortable="requirements">题目要求</th>
                                <th data-sortable="operationCount">操作点数</th>
                                <th data-sortable="totalScore">总分值</th>
                                <th data-sortable="status">状态</th>
                                <th data-sortable="createdAt">创建时间</th>
                                <th class="text-end">操作</th>
                            </tr>
                        </thead>
                        <tbody id="questionTableBody">
                            <!-- 题目数据将通过JavaScript动态加载 -->
                        </tbody>
                    </table>
                </div>

                <!-- 题目分页 -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="text-muted">
                        显示第 <span id="questionPageStart">1</span> - <span id="questionPageEnd">10</span> 条，
                        共 <span id="questionTotalCount">0</span> 条记录
                    </div>
                    <nav>
                        <ul class="pagination pagination-sm mb-0" id="questionPagination">
                            <!-- 分页按钮将通过JavaScript生成 -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>

        <!-- 操作点列表管理卡片 -->
        <div class="glass-card">
            <div class="card-header glass-card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-gear me-2"></i>操作点列表管理
                </h5>
                <div class="d-flex gap-2">
                    <!-- 快捷创建操作点下拉菜单 -->
                    <div class="btn-group">
                        <button type="button" class="glass-btn glass-btn-primary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-lightning"></i> 快捷创建
                        </button>
                        <ul class="dropdown-menu glass-dropdown">
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('Create')">
                                <i class="bi bi-file-plus text-success me-2"></i>创建操作
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('Delete')">
                                <i class="bi bi-file-x text-danger me-2"></i>删除操作
                            </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('Copy')">
                                <i class="bi bi-files text-primary me-2"></i>复制操作
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('Move')">
                                <i class="bi bi-arrow-right-square text-warning me-2"></i>移动操作
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('Rename')">
                                <i class="bi bi-pencil-square text-info me-2"></i>重命名操作
                            </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('CreateShortcut')">
                                <i class="bi bi-link text-secondary me-2"></i>快捷方式操作
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('ModifyProperties')">
                                <i class="bi bi-gear text-warning me-2"></i>属性修改操作
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="quickCreateOperationPoint('CopyAndRename')">
                                <i class="bi bi-copy text-info me-2"></i>复制重命名操作
                            </a></li>
                        </ul>
                    </div>

                    <button class="glass-btn glass-btn-primary" onclick="showCreateOperationPointModal()">
                        <i class="bi bi-plus-circle me-1"></i>创建操作点
                    </button>
                    <button class="glass-btn glass-btn-info" onclick="refreshOperationPointList()">
                        <i class="bi bi-arrow-clockwise me-1"></i>刷新
                    </button>
                </div>
            </div>
            <div class="card-body">
                <!-- 操作点搜索和筛选 -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <select data-glass-select-native data-placeholder="全部题目" id="operationQuestionFilter">
                            <option value="">全部题目</option>
                            <option value="unassigned">未分配题目</option>
                            <!-- 题目选项将通过JavaScript动态加载 -->
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select data-glass-select-native data-placeholder="全部类型" id="operationTypeFilter">
                            <option value="">全部类型</option>
                            <option value="Create">创建操作</option>
                            <option value="Copy">复制操作</option>
                            <option value="Move">移动操作</option>
                            <option value="Delete">删除操作</option>
                            <option value="Rename">重命名操作</option>
                            <option value="CreateShortcut">创建快捷方式</option>
                            <option value="ModifyProperties">属性修改</option>
                            <option value="CopyAndRename">复制并重命名</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select data-glass-select-native data-placeholder="全部状态" id="operationStatusFilter">
                            <option value="">全部状态</option>
                            <option value="enabled">启用</option>
                            <option value="disabled">禁用</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="glass-input" id="operationMinScore" placeholder="最低分值" min="0" step="0.1">
                    </div>
                    <div class="col-md-1">
                        <input type="number" class="glass-input" id="operationMaxScore" placeholder="最高分值" min="0" step="0.1">
                    </div>
                    <div class="col-md-2">
                        <button class="glass-btn glass-btn-primary w-100" onclick="applyOperationFilters()">
                            <i class="bi bi-funnel"></i> 筛选
                        </button>
                    </div>
                </div>



                <!-- 操作点表格（使用glassmorphism样式） -->
                <div class="table-responsive">
                    <table class="glass-table" id="operationTable" data-glass-table>
                        <colgroup>
                            <col style="width:56px" />
                            <col style="width:12%" />
                            <col />
                            <col style="width:16%" />
                            <col style="width:10%" />
                            <col style="width:10%" />
                            <col style="width:16%" />
                            <col style="width:200px" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th class="col-select">
                                    <div class="form-check table-checkbox">
                                        <input class="form-check-input" type="checkbox" id="selectAllOperations">
                                        <label class="form-check-label visually-hidden" for="selectAllOperations">全选</label>
                                    </div>
                                </th>
                                <th data-sortable="operationType">操作类型</th>
                                <th data-sortable="generatedTitle">操作描述</th>
                                <th data-sortable="questionTitle">关联题目</th>
                                <th data-sortable="questionScore">题目分值</th>
                                <th data-sortable="status">状态</th>
                                <th data-sortable="createdAt">创建时间</th>
                                <th class="text-end">操作</th>
                            </tr>
                        </thead>
                        <tbody id="operationTableBody">
                            <!-- 操作点数据将通过JavaScript动态加载 -->
                        </tbody>
                    </table>
                </div>

                <!-- 操作点分页 -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="text-muted">
                        显示第 <span id="operationPageStart">1</span> - <span id="operationPageEnd">10</span> 条，
                        共 <span id="operationTotalCount">0</span> 条记录
                    </div>
                    <nav>
                        <ul class="pagination pagination-sm mb-0" id="operationPagination">
                            <!-- 分页按钮将通过JavaScript生成 -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>



    </div>
</div>

<!-- 创建题目模态框 -->
<div class="modal fade" id="createQuestionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-circle me-2"></i>创建题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createQuestionForm">
                    <div class="row">
                        <div class="col-md-9">
                            <label for="newQuestionRequirements" class="form-label">题目要求 *</label>
                            <textarea class="glass-input" id="newQuestionRequirements" rows="6" placeholder="请输入题目要求内容..." required></textarea>
                            <div class="form-text text-muted mt-2">
                                <i class="bi bi-info-circle me-1"></i>
                                题目要求将作为学生看到的考试内容，请详细描述需要完成的操作。
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label for="newQuestionScore" class="form-label">题目分值 *</label>
                            <input type="number" class="glass-input" id="newQuestionScore" min="0.1" max="100" step="0.1" value="10" required>
                            <div class="form-text text-muted mt-2">
                                <i class="bi bi-info-circle me-1"></i>
                                题目的总分值，包含所有操作点
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn me-2" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="createQuestion()">
                    <i class="bi bi-check-circle me-1"></i>创建题目
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 编辑题目模态框 -->
<div class="modal fade" id="editQuestionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-pencil me-2"></i>编辑题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editQuestionForm">
                    <input type="hidden" id="editQuestionId">
                    <div class="row">
                        <div class="col-md-9">
                            <label for="editQuestionRequirements" class="form-label">题目要求 *</label>
                            <textarea class="glass-input" id="editQuestionRequirements" rows="6" placeholder="请输入题目要求内容..." required></textarea>
                            <div class="form-text text-muted mt-2">
                                <i class="bi bi-info-circle me-1"></i>
                                题目要求将作为学生看到的考试内容，请详细描述需要完成的操作。
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label for="editQuestionScore" class="form-label">题目分值 *</label>
                            <input type="number" class="glass-input" id="editQuestionScore" min="0.1" max="100" step="0.1" required>
                            <div class="form-text text-muted mt-2">
                                <i class="bi bi-info-circle me-1"></i>
                                题目的总分值，包含所有操作点
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn me-2" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="updateQuestion()">
                    <i class="bi bi-check-circle me-1"></i>保存修改
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 创建操作点模态框 -->
<div class="modal fade" id="createOperationPointModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-circle me-2"></i>创建操作点
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createOperationPointForm">
                    <!-- 基本信息 -->
                    <div class="row">
                        <div class="col-md-8">
                            <label for="newOperationQuestionId" class="form-label">关联题目 *</label>
                            <select data-glass-select-native data-placeholder="请选择题目" id="newOperationQuestionId" required>
                                <option value="">请选择题目</option>
                                <!-- 题目选项将通过JavaScript动态加载 -->
                            </select>
                            <div class="form-text text-muted mt-1">
                                <i class="bi bi-info-circle me-1"></i>
                                操作点必须关联到具体题目，分值由题目统一管理
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="newOperationType" class="form-label">操作类型 *</label>
                            <select data-glass-select-native data-placeholder="请选择操作类型" id="newOperationType" required>
                                <option value="">请选择操作类型</option>
                                <option value="Create">创建操作</option>
                                <option value="Copy">复制操作</option>
                                <option value="Move">移动操作</option>
                                <option value="Delete">删除操作</option>
                                <option value="Rename">重命名操作</option>
                                <option value="CreateShortcut">创建快捷方式</option>
                                <option value="ModifyProperties">属性修改</option>
                                <option value="CopyAndRename">复制并重命名</option>
                            </select>
                        </div>
                    </div>

                    <!-- 操作配置区域 -->
                    <div class="mt-3" id="newOperationConfigArea">
                        <!-- 动态配置内容将在这里显示 -->
                    </div>

                    <!-- 操作预览 -->
                    <div class="mt-3" id="newOperationPreview" style="display: none;">
                        <div class="glass-card glass-card-info">
                            <div class="card-body">
                                <h6 class="text-primary mb-2">
                                    <i class="bi bi-eye me-2"></i>操作预览
                                </h6>
                                <div class="mb-2">
                                    <strong>标题：</strong><span id="newOperationPreviewTitle">-</span>
                                </div>
                                <div>
                                    <strong>描述：</strong><span id="newOperationPreviewDesc">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn me-2" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="createOperationPoint()">
                    <i class="bi bi-check-circle me-1"></i>创建操作点
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 编辑操作点模态框 -->
<div class="modal fade" id="editOperationPointModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-pencil me-2"></i>编辑操作点
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editOperationPointForm">
                    <input type="hidden" id="editOperationPointId">
                    <!-- 基本信息 -->
                    <div class="row">
                        <div class="col-md-8">
                            <label for="editOperationQuestionId" class="form-label">关联题目 *</label>
                            <select data-glass-select-native data-placeholder="请选择题目" id="editOperationQuestionId" required>
                                <option value="">请选择题目</option>
                                <!-- 题目选项将通过JavaScript动态加载 -->
                            </select>
                            <div class="form-text text-muted mt-1">
                                <i class="bi bi-info-circle me-1"></i>
                                操作点必须关联到具体题目，分值由题目统一管理
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="editOperationType" class="form-label">操作类型 *</label>
                            <select data-glass-select-native data-placeholder="请选择操作类型" id="editOperationType" required>
                                <option value="">请选择操作类型</option>
                                <option value="Create">创建操作</option>
                                <option value="Copy">复制操作</option>
                                <option value="Move">移动操作</option>
                                <option value="Delete">删除操作</option>
                                <option value="Rename">重命名操作</option>
                                <option value="CreateShortcut">创建快捷方式</option>
                                <option value="ModifyProperties">属性修改</option>
                                <option value="CopyAndRename">复制并重命名</option>
                            </select>
                        </div>
                    </div>

                    <!-- 操作配置区域 -->
                    <div class="mt-3" id="editOperationConfigArea">
                        <!-- 动态配置内容将在这里显示 -->
                    </div>

                    <!-- 操作预览 -->
                    <div class="mt-3" id="editOperationPreview">
                        <div class="glass-card glass-card-info">
                            <div class="card-body">
                                <h6 class="text-primary mb-2">
                                    <i class="bi bi-eye me-2"></i>操作预览
                                </h6>
                                <div class="mb-2">
                                    <strong>标题：</strong><span id="editOperationPreviewTitle">-</span>
                                </div>
                                <div>
                                    <strong>描述：</strong><span id="editOperationPreviewDesc">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn me-2" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="updateOperationPoint()">
                    <i class="bi bi-check-circle me-1"></i>保存修改
                </button>
            </div>
        </div>
    </div>
</div>



<!-- 操作点详情查看模态框 -->
<div class="modal fade" id="operationDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-info-circle me-2"></i>操作点详情
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">操作点ID</label>
                            <div class="glass-input-readonly" id="detailOperationId">-</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">操作类型</label>
                            <div class="glass-input-readonly" id="detailOperationType">-</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">状态</label>
                            <div class="glass-input-readonly" id="detailOperationStatus">-</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">题目分值</label>
                            <div class="glass-input-readonly" id="detailQuestionScore">-</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label class="form-label text-muted">关联题目</label>
                            <div class="glass-input-readonly" id="detailOperationQuestion">-</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label class="form-label text-muted">操作标题</label>
                            <div class="glass-input-readonly" id="detailOperationTitle">-</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label class="form-label text-muted">操作描述</label>
                            <div class="glass-input-readonly" id="detailOperationDescription">-</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">创建时间</label>
                            <div class="glass-input-readonly" id="detailOperationCreated">-</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label text-muted">更新时间</label>
                            <div class="glass-input-readonly" id="detailOperationUpdated">-</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label class="form-label text-muted">操作配置</label>
                            <div class="glass-input-readonly" id="detailOperationConfig" style="min-height: 100px; white-space: pre-wrap;">-</div>
                        </div>
                    </div>
                </div>

                <!-- 详细配置参数 -->
                <div class="row" id="detailConfigParams" style="display: none;">
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label class="form-label text-muted">配置参数详情</label>
                            <div class="glass-card glass-card-info">
                                <div class="card-body" id="detailConfigParamsContent">
                                    <!-- 配置参数详情将在这里显示 -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn glass-btn-primary" onclick="editOperationFromDetails()">
                    <i class="bi bi-pencil me-1"></i>编辑操作点
                </button>
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>关闭
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 题目详情查看模态框 -->
<div class="modal fade" id="questionDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-eye me-2"></i>题目详情
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- 题目基本信息 -->
                <div class="glass-card mb-3">
                    <div class="card-header glass-card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>题目基本信息
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <strong>题目标题：</strong>
                                <span id="detailQuestionTitle">-</span>
                            </div>
                            <div class="col-md-6">
                                <strong>总分值：</strong>
                                <span id="detailQuestionScore" class="badge bg-primary">-</span>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-md-12">
                                <strong>题目描述：</strong>
                                <div id="detailQuestionDescription" class="mt-1">-</div>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-md-6">
                                <strong>状态：</strong>
                                <span id="detailQuestionStatus" class="badge">-</span>
                            </div>
                            <div class="col-md-6">
                                <strong>创建时间：</strong>
                                <span id="detailQuestionCreated">-</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 操作点列表 -->
                <div class="glass-card">
                    <div class="card-header glass-card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-list-task me-2"></i>包含的操作点
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="detailOperationPoints">
                            <!-- 操作点详情将在这里显示 -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>关闭
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 导入题目模态框 -->
<div class="modal fade" id="importQuestionsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-upload me-2"></i>导入Windows题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="glass-card mb-3">
                            <div class="card-body">
                                <h6 class="text-primary mb-3">
                                    <i class="bi bi-info-circle me-2"></i>导入说明
                                </h6>
                                <ul class="text-muted small">
                                    <li>支持.xlsx格式的Excel文件</li>
                                    <li>请使用标准模板格式，确保表头正确</li>
                                    <li>必填字段：操作类型、分值（支持小数，如：15.5、20.25）</li>
                                    <li>分值范围：0.1-100.0</li>
                                    <li>建议先下载模板，按格式填写数据</li>
                                </ul>
                            </div>
                        </div>

                        <form id="importForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="importFile" class="form-label">选择Excel文件 *</label>
                                <input type="file" class="form-control" id="importFile" accept=".xlsx" required>
                                <div class="form-text">仅支持.xlsx格式文件，最大10MB</div>
                            </div>

                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="validateOnly">
                                    <label class="form-check-label" for="validateOnly">
                                        仅验证数据（不实际导入）
                                    </label>
                                </div>
                            </div>
                        </form>

                        <!-- 导入进度 -->
                        <div id="importProgress" style="display: none;">
                            <div class="glass-card">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="spinner-border spinner-border-sm text-primary me-3" role="status">
                                            <span class="visually-hidden">导入中...</span>
                                        </div>
                                        <div>
                                            <div class="fw-bold">正在导入题目...</div>
                                            <div class="text-muted small">请稍候，正在处理Excel文件</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 导入结果 -->
                        <div id="importResult" style="display: none;">
                            <div class="glass-card">
                                <div class="card-body">
                                    <h6 class="text-success mb-3">
                                        <i class="bi bi-check-circle me-2"></i>导入完成
                                    </h6>
                                    <div id="importResultContent">
                                        <!-- 结果内容将在这里显示 -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn me-2" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-info me-2" onclick="downloadTemplate()">
                    <i class="bi bi-download me-1"></i>下载模板
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="startImport()">
                    <i class="bi bi-upload me-1"></i>开始导入
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 编辑Windows题目模态框 -->
<div class="modal fade" id="editWindowsQuestionModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content glass-card">
            <div class="modal-header glass-card-header">
                <h5 class="modal-title">
                    <i class="bi bi-pencil-square me-2"></i>编辑Windows题目
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- 题目基本信息 -->
                <div class="glass-card">
                    <div class="card-header glass-card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>题目配置
                        </h6>
                    </div>
                    <div class="card-body">
                        <form id="editWindowsQuestionForm">
                            <input type="hidden" id="editQuestionId" />
                            <div class="row">
                                <div class="col-md-8">
                                    <label for="editWindowsOperationType" class="form-label">操作类型 *</label>
                                    <select data-glass-select-native data-placeholder="请选择操作类型" id="editWindowsOperationType" required onchange="showEditWindowsOperationConfig(this.value)">
                                        <option value="">请选择操作类型</option>
                                        <option value="Create">创建操作</option>
                                        <option value="Copy">复制操作</option>
                                        <option value="Move">移动操作</option>
                                        <option value="Delete">删除操作</option>
                                        <option value="Rename">重命名操作</option>
                                        <option value="CreateShortcut">创建快捷方式</option>
                                        <option value="ModifyProperties">属性修改</option>
                                        <option value="CopyAndRename">复制并重命名</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label for="editQuestionScore" class="form-label">题目分值 *</label>
                                    <input type="number" class="glass-input" id="editQuestionScore" min="0.1" max="100" step="0.1" value="10" required>
                                </div>
                            </div>


                        </form>
                    </div>
                </div>

                <!-- 动态操作配置 -->
                <div class="glass-card mt-3" id="editWindowsOperationConfigCard" style="display: none;">
                    <div class="card-header glass-card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-gear me-2"></i>操作配置
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="editWindowsOperationConfigContent">
                            <!-- 动态配置内容将在这里显示 -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer glass-card-footer">
                <button type="button" class="glass-btn me-2" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="updateWindowsQuestion()">
                    <i class="bi bi-check-circle me-1"></i>保存修改
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- 引入增强的玻璃表格组件 -->
    <script src="~/js/glass-table.js"></script>
    <!-- glassmorphism-select组件已在_Layout.cshtml中全局引入，无需重复引入 -->

    <script>

        // 页面加载完成后的初始化
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Windows题目管理页面加载完成');

            // 清理可能存在的重复Glass-Select元素
            setTimeout(() => {
                if (typeof cleanupDuplicateGlassSelects === 'function') {
                    cleanupDuplicateGlassSelects();
                    console.log('已清理重复的Glass-Select元素');
                }
            }, 500);

            // 初始化操作类型选择器（新界面已通过事件监听器处理）
            setTimeout(() => {
                initializeOperationTypeSelector();
            }, 600);

            // 初始化Windows Markdown预览功能
            initializeWindowsMarkdownPreview();

            // 加载全局Windows题目要求
            loadGlobalWindowsRequirements();
        });



        // 操作类型改变处理函数
        function handleOperationTypeChange(e) {
            const selectedValue = e.target.value;
            console.log('操作类型改变:', selectedValue);

            // 保存选择的操作类型
            if (selectedValue) {
                localStorage.setItem('lastWindowsOperationType', selectedValue);
            }

            // 延迟执行以确保DOM已更新
            setTimeout(() => {
                showWindowsOperationConfig(selectedValue);
            }, 100);
        }

        // 初始化操作类型选择器（重构后的新界面版本）
        function initializeOperationTypeSelector() {
            console.log('初始化操作类型选择器 - 新界面版本');

            // 新界面使用不同的选择器ID，这个函数主要用于兼容性
            // 实际的操作类型选择器初始化在页面加载时通过事件监听器处理

            // 检查新界面的操作类型选择器是否存在
            const newOperationTypeSelect = document.getElementById('newOperationType');
            const editOperationTypeSelect = document.getElementById('editOperationType');

            console.log('新建操作点选择器存在:', !!newOperationTypeSelect);
            console.log('编辑操作点选择器存在:', !!editOperationTypeSelect);

            // 新界面的选择器通过事件监听器自动处理，无需额外初始化
            console.log('操作类型选择器初始化完成（新界面）');
        }

        // 显示Windows操作配置
        function showWindowsOperationConfig(operationType) {
            console.log('显示Windows操作配置:', operationType);

            const configCard = document.getElementById('windowsOperationConfigCard');
            const configContent = document.getElementById('windowsOperationConfigContent');

            console.log('配置卡片存在:', !!configCard);
            console.log('配置内容容器存在:', !!configContent);

            if (!configCard || !configContent) {
                console.error('未找到配置卡片或内容容器', {
                    configCard: !!configCard,
                    configContent: !!configContent,
                    modalVisible: document.getElementById('createQuestionModal')?.style.display !== 'none'
                });

                // 尝试多次重试，增加延迟时间
                let retryCount = 0;
                const maxRetries = 5;

                const retryFunction = () => {
                    retryCount++;
                    console.log(`重试第${retryCount}次...`);

                    const retryConfigCard = document.getElementById('windowsOperationConfigCard');
                    const retryConfigContent = document.getElementById('windowsOperationConfigContent');

                    if (retryConfigCard && retryConfigContent) {
                        console.log('重试成功，找到配置元素');
                        showWindowsOperationConfigInternal(operationType, retryConfigCard, retryConfigContent);
                    } else if (retryCount < maxRetries) {
                        console.log(`重试${retryCount}失败，继续重试...`);
                        setTimeout(retryFunction, 200 * retryCount); // 递增延迟
                    } else {
                        console.error('重试失败，已达到最大重试次数');
                    }
                };

                setTimeout(retryFunction, 200);
                return;
            }

            showWindowsOperationConfigInternal(operationType, configCard, configContent);
        }

        // 内部配置显示函数
        function showWindowsOperationConfigInternal(operationType, configCard, configContent) {
            if (!operationType) {
                configCard.style.display = 'none';
                return;
            }

            // 使用统一的配置生成函数
            const configHtml = generateOperationConfigHtml(operationType, '');
            configContent.innerHTML = configHtml;
            configCard.style.display = 'block';
        }

        // 收集Windows操作配置数据（统一函数）
        function collectWindowsOperationConfig(operationType, prefix = '') {
            const config = { operationType: operationType };
            const idPrefix = prefix ? `${prefix}` : '';

            switch(operationType) {
                case 'Create':
                    const createType = document.getElementById(`${idPrefix}createTargetType`)?.value;
                    const createName = document.getElementById(`${idPrefix}createTargetName`)?.value;
                    const createPath = document.getElementById(`${idPrefix}createTargetPath`)?.value;

                    if (!createType || !createName) return null;

                    config.targetType = createType;
                    config.isFile = createType === 'file';
                    config.targetName = createName;
                    config.targetPath = createPath || 'C:\\Users\\Desktop';
                    break;

                case 'Delete':
                    const deleteType = document.getElementById(`${idPrefix}deleteTargetType`)?.value;
                    const deleteName = document.getElementById(`${idPrefix}deleteTargetName`)?.value;
                    const deletePath = document.getElementById(`${idPrefix}deleteTargetPath`)?.value;

                    if (!deleteType || !deleteName) return null;

                    config.targetType = deleteType;
                    config.isFile = deleteType === 'file';
                    config.targetName = deleteName;
                    config.targetPath = deletePath || 'C:\\Users\\Desktop';
                    break;

                case 'Copy':
                    const copySourceType = document.getElementById(`${idPrefix}copySourceType`)?.value;
                    const copySource = document.getElementById(`${idPrefix}copySourcePath`)?.value;
                    const copyTarget = document.getElementById(`${idPrefix}copyTargetPath`)?.value;
                    const copyKeepOriginal = document.getElementById(`${idPrefix}copyKeepOriginal`)?.checked;

                    if (!copySourceType || !copySource || !copyTarget) return null;

                    config.sourceType = copySourceType;
                    config.sourcePath = copySource;
                    config.sourceIsFile = copySourceType === 'file';
                    config.targetPath = copyTarget;
                    config.keepOriginal = copyKeepOriginal;
                    break;

                case 'Move':
                    const moveSourceType = document.getElementById(`${idPrefix}moveSourceType`)?.value;
                    const moveSource = document.getElementById(`${idPrefix}moveSourcePath`)?.value;
                    const moveTarget = document.getElementById(`${idPrefix}moveTargetPath`)?.value;

                    if (!moveSourceType || !moveSource || !moveTarget) return null;

                    config.sourceType = moveSourceType;
                    config.sourcePath = moveSource;
                    config.sourceIsFile = moveSourceType === 'file';
                    config.targetPath = moveTarget;
                    break;

                case 'Rename':
                    const renameType = document.getElementById(`${idPrefix}renameTargetType`)?.value;
                    const renameOriginal = document.getElementById(`${idPrefix}renameOriginalName`)?.value;
                    const renameNew = document.getElementById(`${idPrefix}renameNewName`)?.value;
                    const renamePath = document.getElementById(`${idPrefix}renameTargetPath`)?.value;

                    if (!renameType || !renameOriginal || !renameNew) return null;

                    config.targetType = renameType;
                    config.originalName = renameOriginal;
                    config.isFile = renameType === 'file';
                    config.newName = renameNew;
                    config.targetPath = renamePath || 'C:\\Users\\Desktop';
                    break;

                case 'CreateShortcut':
                    const shortcutTarget = document.getElementById(`${idPrefix}shortcutTargetPath`)?.value;
                    const shortcutLocation = document.getElementById(`${idPrefix}shortcutLocation`)?.value;

                    if (!shortcutTarget || !shortcutLocation) return null;

                    config.targetPath = shortcutTarget;
                    config.shortcutLocation = shortcutLocation;
                    break;

                case 'ModifyProperties':
                    const propertyTarget = document.getElementById(`${idPrefix}propertyTargetPath`)?.value;
                    const propertyType = document.getElementById(`${idPrefix}propertyType`)?.value;

                    if (!propertyTarget || !propertyType) return null;

                    config.targetPath = propertyTarget;
                    config.propertyType = propertyType;
                    break;

                case 'CopyAndRename':
                    const copyRenameSourceType = document.getElementById(`${idPrefix}copyRenameSourceType`)?.value;
                    const copyRenameSource = document.getElementById(`${idPrefix}copyRenameSourcePath`)?.value;
                    const copyRenameTarget = document.getElementById(`${idPrefix}copyRenameTargetPath`)?.value;
                    const copyRenameNewName = document.getElementById(`${idPrefix}copyRenameNewName`)?.value;

                    if (!copyRenameSourceType || !copyRenameSource || !copyRenameTarget || !copyRenameNewName) return null;

                    config.sourceType = copyRenameSourceType;
                    config.sourcePath = copyRenameSource;
                    config.sourceIsFile = copyRenameSourceType === 'file';
                    config.targetPath = copyRenameTarget;
                    config.newName = copyRenameNewName;
                    break;
            }

            return config;
        }

        // 生成Windows题目标题
        function generateWindowsQuestionTitle(operationType, config) {
            const fileType = config.isFile ? '文件' : '文件夹';
            const sourceFileType = config.sourceIsFile ? '文件' : '文件夹';

            switch(operationType) {
                case 'Create':
                    return `创建${fileType}：${config.targetName}`;
                case 'Delete':
                    return `删除${fileType}：${config.targetName}`;
                case 'Copy':
                    return `复制${sourceFileType}到指定位置`;
                case 'Move':
                    return `移动${sourceFileType}到指定位置`;
                case 'Rename':
                    return `重命名${fileType}：${config.originalName} → ${config.newName}`;
                case 'CreateShortcut':
                    return `创建快捷方式到：${config.shortcutLocation}`;
                case 'ModifyProperties':
                    return `修改文件属性：${config.propertyType}`;
                case 'CopyAndRename':
                    return `复制并重命名${sourceFileType}：${config.newName}`;
                default:
                    return `Windows文件操作题目`;
            }
        }

        // 生成Windows题目描述
        function generateWindowsQuestionDescription(operationType, config) {
            const fileType = config.isFile ? '文件' : '文件夹';
            const sourceFileType = config.sourceIsFile ? '文件' : '文件夹';

            switch(operationType) {
                case 'Create':
                    return `请在 ${config.targetPath} 位置创建一个名为 "${config.targetName}" 的${fileType}。`;
                case 'Delete':
                    return `请删除位于 ${config.targetPath} 的${fileType} "${config.targetName}"。`;
                case 'Copy':
                    return `请将${sourceFileType} "${config.sourcePath}" 复制到 "${config.targetPath}" 位置${config.keepOriginal ? '，保留原文件' : ''}。`;
                case 'Move':
                    return `请将${sourceFileType} "${config.sourcePath}" 移动到 "${config.targetPath}" 位置。`;
                case 'Rename':
                    return `请将位于 ${config.targetPath} 的${fileType} "${config.originalName}" 重命名为 "${config.newName}"。`;
                case 'CreateShortcut':
                    return `请为 "${config.targetPath}" 创建快捷方式，保存到 "${config.shortcutLocation}"。`;
                case 'ModifyProperties':
                    return `请修改文件 "${config.targetPath}" 的 ${config.propertyType} 属性。`;
                case 'CopyAndRename':
                    return `请将${sourceFileType} "${config.sourcePath}" 复制到 "${config.targetPath}" 位置，并重命名为 "${config.newName}"。`;
                default:
                    return `请完成指定的Windows文件系统操作。`;
            }
        }

        // 简化题目相关函数

        // 编辑简化题目
        async function editSimplifiedQuestion(questionId) {
            try {
                console.log('编辑简化题目:', questionId);

                // 验证questionId
                if (!questionId) {
                    throw new Error('题目ID无效');
                }

                // 获取题目详细信息
                console.log('正在获取题目详细信息...');
                const response = await fetch(`/api/SimplifiedQuestion/${questionId}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`获取题目信息失败: ${response.status} ${errorText}`);
                }

                const questionData = await response.json();
                console.log('题目数据:', questionData);

                // 验证题目数据
                if (!questionData || !questionData.id) {
                    throw new Error('题目数据无效');
                }

                // 显示编辑模态框并填充数据
                console.log('正在显示编辑模态框...');
                showEditWindowsQuestionModal(questionData);

            } catch (error) {
                console.error('编辑题目失败:', error);
                alert(`编辑题目失败: ${error.message}\n\n请稍后重试或联系管理员。`);
            }
        }

        // 显示编辑Windows题目模态框
        function showEditWindowsQuestionModal(questionData) {
            try {
                console.log('显示编辑Windows题目模态框', questionData);

            // 重置表单
            const form = document.getElementById('editWindowsQuestionForm');
            if (form) {
                form.reset();
            }

            // 隐藏操作配置卡片
            const configCard = document.getElementById('editWindowsOperationConfigCard');
            if (configCard) {
                configCard.style.display = 'none';
                const configContent = document.getElementById('editWindowsOperationConfigContent');
                if (configContent) {
                    configContent.innerHTML = '';
                }
            }

            // 填充基本信息
            const editQuestionId = document.getElementById('editQuestionId');
            const editQuestionScore = document.getElementById('editQuestionScore');

            if (editQuestionId) editQuestionId.value = questionData.id;
            if (editQuestionScore) editQuestionScore.value = questionData.score;



            // 设置操作类型
            const operationTypeSelect = document.getElementById('editWindowsOperationType');
            if (operationTypeSelect && questionData.operationType) {
                operationTypeSelect.value = questionData.operationType;

                // 更新glass-select显示
                const glassContainer = operationTypeSelect.closest('.glass-select');
                if (glassContainer) {
                    const displayElement = glassContainer.querySelector('.glass-select-input');
                    if (displayElement) {
                        const selectedOption = operationTypeSelect.querySelector(`option[value="${questionData.operationType}"]`);
                        if (selectedOption) {
                            displayElement.textContent = selectedOption.textContent;
                            displayElement.classList.add('has-value');
                        }
                    }
                    glassContainer.classList.add('has-value');
                    glassContainer.classList.remove('is-placeholder');
                }

            }

            // 显示模态框
            const modal = new bootstrap.Modal(document.getElementById('editWindowsQuestionModal'));
            modal.show();

            // 等待模态框完全显示后初始化glass-select组件和操作配置
            setTimeout(() => {
                initializeEditGlassSelectInModal();

                // 显示操作配置
                if (questionData.operationType) {
                    showEditWindowsOperationConfig(questionData.operationType);

                    // 填充操作配置数据
                    setTimeout(() => {
                        try {
                            fillEditOperationConfig(questionData.operationType, questionData.operationConfig);
                        } catch (error) {
                            console.error('延迟填充配置失败:', error);
                        }
                    }, 200); // 在显示配置后再填充数据
                }
            }, 300);

            } catch (error) {
                console.error('显示编辑模态框失败:', error);
                alert(`显示编辑模态框失败: ${error.message}\n\n请刷新页面后重试。`);
            }
        }



        // 初始化编辑模态框中的glass-select组件
        function initializeEditGlassSelectInModal() {
            console.log('初始化编辑模态框中的glass-select组件');

            // 清理可能存在的重复元素
            if (typeof cleanupDuplicateGlassSelects === 'function') {
                cleanupDuplicateGlassSelects(document.getElementById('editWindowsQuestionModal'));
            }

            // 初始化未初始化的glass-select组件
            if (typeof initializeGlassSelectsNative === 'function') {
                initializeGlassSelectsNative(document.getElementById('editWindowsQuestionModal'));
            }

            const glassSelects = document.querySelectorAll('#editWindowsQuestionModal [data-glass-select-native]');
            console.log('找到glass-select组件:', glassSelects.length);

            glassSelects.forEach(select => {
                const glassContainer = select.closest('.glass-select');
                if (glassContainer) {
                    console.log(`glass-select组件 ${select.id} 已初始化`);
                } else {
                    console.log(`glass-select组件 ${select.id} 未初始化，等待自动初始化`);
                }
            });
        }

        // 显示编辑Windows操作配置
        function showEditWindowsOperationConfig(operationType) {
            console.log('显示编辑Windows操作配置:', operationType);

            const configCard = document.getElementById('editWindowsOperationConfigCard');
            const configContent = document.getElementById('editWindowsOperationConfigContent');

            if (!configCard || !configContent) {
                console.error('未找到编辑配置卡片或内容容器');
                return;
            }

            if (!operationType) {
                configCard.style.display = 'none';
                return;
            }

            try {
                // 使用与创建模态框相同的配置HTML生成逻辑
                let configHtml = generateOperationConfigHtml(operationType, 'edit');
                console.log('生成的配置HTML长度:', configHtml.length);

                configContent.innerHTML = configHtml;
                configCard.style.display = 'block';
                console.log('编辑配置界面显示成功');
            } catch (error) {
                console.error('显示编辑配置界面失败:', error);
            }
        }

        // 旧的生成操作配置HTML函数已删除，使用新版本




        // 所有旧的操作配置函数已删除，使用新版本





        // 切换简化题目状态


        async function toggleSimplifiedQuestionStatus(questionId, currentStatus) {
            try {
                const response = await fetch(`/api/SimplifiedQuestion/${questionId}/toggle-status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const errorData = await response.json();
                    alert(`状态切换失败: ${errorData.message || '未知错误'}`);
                }
            } catch (error) {
                console.error('切换题目状态失败:', error);
                alert('状态更新失败');
            }
        }

        // 动态更新占位符的辅助函数
        function updateCreatePlaceholder(prefix) {
            const typeSelect = document.getElementById(`${prefix}createTargetType`);
            const nameInput = document.getElementById(`${prefix}createTargetName`);
            if (typeSelect && nameInput) {
                const type = typeSelect.value;
                if (type === 'file') {
                    nameInput.placeholder = '例如：新建文档.txt';
                } else if (type === 'folder') {
                    nameInput.placeholder = '例如：新建文件夹';
                } else {
                    nameInput.placeholder = '请先选择类型';
                }
            }
        }

        function updateDeletePlaceholder(prefix) {
            const typeSelect = document.getElementById(`${prefix}deleteTargetType`);
            const nameInput = document.getElementById(`${prefix}deleteTargetName`);
            if (typeSelect && nameInput) {
                const type = typeSelect.value;
                if (type === 'file') {
                    nameInput.placeholder = '例如：要删除的文件.txt';
                } else if (type === 'folder') {
                    nameInput.placeholder = '例如：要删除的文件夹';
                } else {
                    nameInput.placeholder = '请先选择类型';
                }
            }
        }

        function updateMovePlaceholder(prefix) {
            const typeSelect = document.getElementById(`${prefix}moveSourceType`);
            const pathInput = document.getElementById(`${prefix}moveSourcePath`);
            if (typeSelect && pathInput) {
                const type = typeSelect.value;
                if (type === 'file') {
                    pathInput.placeholder = '例如：C:\\Users\\Desktop\\文件.txt';
                } else if (type === 'folder') {
                    pathInput.placeholder = '例如：C:\\Users\\Desktop\\文件夹';
                } else {
                    pathInput.placeholder = '请先选择类型';
                }
            }
        }

        function updateCopyPlaceholder(prefix) {
            const typeSelect = document.getElementById(`${prefix}copySourceType`);
            const pathInput = document.getElementById(`${prefix}copySourcePath`);
            if (typeSelect && pathInput) {
                const type = typeSelect.value;
                if (type === 'file') {
                    pathInput.placeholder = '例如：C:\\Users\\Desktop\\文件.txt';
                } else if (type === 'folder') {
                    pathInput.placeholder = '例如：C:\\Users\\Desktop\\文件夹';
                } else {
                    pathInput.placeholder = '请先选择类型';
                }
            }
        }

        function updateRenamePlaceholder(prefix) {
            const typeSelect = document.getElementById(`${prefix}renameTargetType`);
            const originalInput = document.getElementById(`${prefix}renameOriginalName`);
            const newInput = document.getElementById(`${prefix}renameNewName`);
            if (typeSelect && originalInput && newInput) {
                const type = typeSelect.value;
                if (type === 'file') {
                    originalInput.placeholder = '例如：旧文件名.txt';
                    newInput.placeholder = '例如：新文件名.txt';
                } else if (type === 'folder') {
                    originalInput.placeholder = '例如：旧文件夹名';
                    newInput.placeholder = '例如：新文件夹名';
                } else {
                    originalInput.placeholder = '请先选择类型';
                    newInput.placeholder = '请先选择类型';
                }
            }
        }

        function updateCopyRenamePlaceholder(prefix) {
            const typeSelect = document.getElementById(`${prefix}copyRenameSourceType`);
            const pathInput = document.getElementById(`${prefix}copyRenameSourcePath`);
            const nameInput = document.getElementById(`${prefix}copyRenameNewName`);
            if (typeSelect && pathInput && nameInput) {
                const type = typeSelect.value;
                if (type === 'file') {
                    pathInput.placeholder = '例如：C:\\Users\\Desktop\\源文件.txt';
                    nameInput.placeholder = '例如：新文件名.txt';
                } else if (type === 'folder') {
                    pathInput.placeholder = '例如：C:\\Users\\Desktop\\源文件夹';
                    nameInput.placeholder = '例如：新文件夹名';
                } else {
                    pathInput.placeholder = '请先选择类型';
                    nameInput.placeholder = '请先选择类型';
                }
            }
        }

        // 填充编辑操作配置数据
        function fillEditOperationConfig(operationType, operationConfig) {
            if (!operationConfig) {
                console.log('操作配置为空，跳过填充');
                return;
            }

            try {
                console.log('填充编辑操作配置:', operationType, operationConfig);

                switch(operationType) {
                case 'Create':
                    if (operationConfig.targetType) {
                        const targetTypeSelect = document.getElementById('editcreateTargetType');
                        if (targetTypeSelect) targetTypeSelect.value = operationConfig.targetType;
                    }
                    if (operationConfig.isFile !== undefined) {
                        const isFileSelect = document.getElementById('editcreateIsFile');
                        if (isFileSelect) isFileSelect.value = operationConfig.isFile.toString();
                    }
                    if (operationConfig.targetName) {
                        const targetNameInput = document.getElementById('editcreateTargetName');
                        if (targetNameInput) targetNameInput.value = operationConfig.targetName;
                    }
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editcreateTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    break;

                case 'Delete':
                    if (operationConfig.targetType) {
                        const targetTypeSelect = document.getElementById('editdeleteTargetType');
                        if (targetTypeSelect) targetTypeSelect.value = operationConfig.targetType;
                    }
                    if (operationConfig.isFile !== undefined) {
                        const isFileSelect = document.getElementById('editdeleteIsFile');
                        if (isFileSelect) isFileSelect.value = operationConfig.isFile.toString();
                    }
                    if (operationConfig.targetName) {
                        const targetNameInput = document.getElementById('editdeleteTargetName');
                        if (targetNameInput) targetNameInput.value = operationConfig.targetName;
                    }
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editdeleteTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    break;

                case 'Move':
                    if (operationConfig.sourcePath) {
                        const sourcePathInput = document.getElementById('editmoveSourcePath');
                        if (sourcePathInput) sourcePathInput.value = operationConfig.sourcePath;
                    }
                    if (operationConfig.sourceIsFile !== undefined) {
                        const sourceIsFileSelect = document.getElementById('editmoveSourceIsFile');
                        if (sourceIsFileSelect) sourceIsFileSelect.value = operationConfig.sourceIsFile.toString();
                    }
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editmoveTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    break;

                case 'Copy':
                    if (operationConfig.sourcePath) {
                        const sourcePathInput = document.getElementById('editcopySourcePath');
                        if (sourcePathInput) sourcePathInput.value = operationConfig.sourcePath;
                    }
                    if (operationConfig.sourceIsFile !== undefined) {
                        const sourceIsFileSelect = document.getElementById('editcopySourceIsFile');
                        if (sourceIsFileSelect) sourceIsFileSelect.value = operationConfig.sourceIsFile.toString();
                    }
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editcopyTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    if (operationConfig.keepOriginal !== undefined) {
                        const keepOriginalCheckbox = document.getElementById('editcopyKeepOriginal');
                        if (keepOriginalCheckbox) keepOriginalCheckbox.checked = operationConfig.keepOriginal;
                    }
                    break;

                case 'Rename':
                    if (operationConfig.originalName) {
                        const originalNameInput = document.getElementById('editrenameOriginalName');
                        if (originalNameInput) originalNameInput.value = operationConfig.originalName;
                    }
                    if (operationConfig.isFile !== undefined) {
                        const isFileSelect = document.getElementById('editrenameIsFile');
                        if (isFileSelect) isFileSelect.value = operationConfig.isFile.toString();
                    }
                    if (operationConfig.newName) {
                        const newNameInput = document.getElementById('editrenameNewName');
                        if (newNameInput) newNameInput.value = operationConfig.newName;
                    }
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editrenameTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    break;

                case 'CreateShortcut':
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editshortcutTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    if (operationConfig.shortcutLocation) {
                        const shortcutLocationInput = document.getElementById('editshortcutLocation');
                        if (shortcutLocationInput) shortcutLocationInput.value = operationConfig.shortcutLocation;
                    }
                    break;

                case 'ModifyProperties':
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editpropertyTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    if (operationConfig.propertyType) {
                        const propertyTypeSelect = document.getElementById('editpropertyType');
                        if (propertyTypeSelect) propertyTypeSelect.value = operationConfig.propertyType;
                    }
                    break;

                case 'CopyAndRename':
                    if (operationConfig.sourcePath) {
                        const sourcePathInput = document.getElementById('editcopyRenameSourcePath');
                        if (sourcePathInput) sourcePathInput.value = operationConfig.sourcePath;
                    }
                    if (operationConfig.sourceIsFile !== undefined) {
                        const sourceIsFileSelect = document.getElementById('editcopyRenameSourceIsFile');
                        if (sourceIsFileSelect) sourceIsFileSelect.value = operationConfig.sourceIsFile.toString();
                    }
                    if (operationConfig.targetPath) {
                        const targetPathInput = document.getElementById('editcopyRenameTargetPath');
                        if (targetPathInput) targetPathInput.value = operationConfig.targetPath;
                    }
                    if (operationConfig.newName) {
                        const newNameInput = document.getElementById('editcopyRenameNewName');
                        if (newNameInput) newNameInput.value = operationConfig.newName;
                    }
                    break;
                }
            } catch (error) {
                console.error('填充编辑操作配置失败:', error);
                alert(`填充配置数据失败: ${error.message}`);
            }
        }

        // 切换简化题目状态
        async function toggleSimplifiedQuestionStatus(questionId, currentStatus) {
            try {
                const response = await fetch(`/api/SimplifiedQuestion/${questionId}/toggle-status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const errorData = await response.json();
                    alert(`状态切换失败: ${errorData.message || '未知错误'}`);
                }
            } catch (error) {
                console.error('切换题目状态失败:', error);
                alert('状态更新失败');
            }
        }


        // 删除简化题目
        async function deleteSimplifiedQuestion(questionId, questionTitle) {
            // 使用更详细的确认对话框
            const confirmMessage = `确定要删除题目"${questionTitle}"吗？\n\n⚠️ 此操作不可撤销，题目将被永久删除。\n\n点击"确定"继续删除，点击"取消"返回。`;

            if (!confirm(confirmMessage)) {
                return;
            }

            try {
                console.log('正在删除简化题目:', questionId);

                const response = await fetch(`/api/SimplifiedQuestion/${questionId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // 显示成功消息
                    alert('✅ 题目删除成功！\n\n页面将自动刷新以显示最新的题目列表。');
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(`❌ 删除失败: ${error.message || '未知错误'}\n\n请稍后重试或联系管理员。`);
                }
            } catch (error) {
                console.error('删除题目失败:', error);
                alert('❌ 删除失败，请检查网络连接后重试。\n\n错误信息：' + error.message);
            }
        }

        // 快捷创建题目功能
        function quickCreateQuestion(operationType, targetType) {
            console.log('快捷创建题目:', operationType, targetType);

            // 显示创建模态框
            showCreateWindowsQuestionModal();

            // 等待模态框显示后设置值
            setTimeout(() => {
                setOperationTypeValue(operationType, targetType);
            }, 800); // 增加等待时间确保模态框完全加载
        }

        // 设置操作类型值的统一函数
        function setOperationTypeValue(operationType, targetType) {
            const operationTypeSelect = document.getElementById('windowsOperationType');
            console.log('设置操作类型值:', operationType, '找到选择器:', !!operationTypeSelect);

            if (!operationTypeSelect) {
                console.error('未找到操作类型选择器');
                return;
            }

            // 设置原生select的值
            operationTypeSelect.value = operationType;

            // 保存到localStorage
            localStorage.setItem('lastWindowsOperationType', operationType);

            // 更新glass-select显示
            updateGlassSelectDisplay(operationTypeSelect, operationType);

            // 触发change事件
            const changeEvent = new Event('change', { bubbles: true });
            operationTypeSelect.dispatchEvent(changeEvent);

            // 直接调用配置函数
            showWindowsOperationConfig(operationType);

            // 等待配置界面生成后设置预填充值
            if (targetType) {
                setTimeout(() => {
                    fillQuickCreateDefaults(operationType, targetType);
                }, 200);
            }
        }

        // 更新glass-select显示的函数
        function updateGlassSelectDisplay(selectElement, value) {
            const selectedOption = selectElement.querySelector(`option[value="${value}"]`);
            if (!selectedOption) {
                console.warn('未找到对应的选项:', value);
                return;
            }

            // 查找glass-select容器
            const glassContainer = selectElement.closest('.glass-select-container') ||
                                 selectElement.parentElement.querySelector('.glass-select-container');

            if (glassContainer) {
                const displayElement = glassContainer.querySelector('.glass-select-display');
                if (displayElement) {
                    displayElement.textContent = selectedOption.textContent;
                    displayElement.classList.add('has-value');
                    console.log('更新glass-select显示:', selectedOption.textContent);
                }

                glassContainer.classList.add('has-value');
                glassContainer.classList.remove('is-placeholder');
            } else {
                console.warn('未找到glass-select容器');
            }
        }

        // 重置glass-select显示的函数
        function resetGlassSelectDisplay(selectElement) {
            const placeholder = selectElement.getAttribute('data-placeholder') || '请选择';

            // 查找glass-select容器
            const glassContainer = selectElement.closest('.glass-select-container') ||
                                 selectElement.parentElement.querySelector('.glass-select-container');

            if (glassContainer) {
                const displayElement = glassContainer.querySelector('.glass-select-display');
                if (displayElement) {
                    displayElement.textContent = placeholder;
                    displayElement.classList.remove('has-value');
                }

                glassContainer.classList.remove('has-value');
                glassContainer.classList.add('is-placeholder');
                console.log('重置glass-select显示为:', placeholder);
            } else {
                console.warn('未找到glass-select容器进行重置');
            }
        }

        // 设置Glass Select组件的值
        function setGlassSelectValue(selectElement, value) {
            console.log('设置Glass Select值:', value);

            // 直接设置原生select的值
            selectElement.value = value;

            // 查找glass-select容器
            let glassSelectContainer = selectElement.closest('.glass-select');

            // 如果没有找到容器，可能还没有初始化，尝试查找父元素
            if (!glassSelectContainer) {
                const parentDiv = selectElement.parentElement;
                glassSelectContainer = parentDiv.querySelector('.glass-select');
            }

            // 如果仍然没有找到，说明glass-select还没有初始化，先初始化
            if (!glassSelectContainer && typeof GlassSelect !== 'undefined') {
                console.log('Glass Select未初始化，正在初始化...');
                const options = {
                    searchable: selectElement.hasAttribute('data-searchable'),
                    multiple: selectElement.hasAttribute('multiple'),
                    placeholder: selectElement.getAttribute('data-placeholder') || '请选择...'
                };
                new GlassSelect(selectElement, options);

                // 重新查找容器
                setTimeout(() => {
                    glassSelectContainer = selectElement.closest('.glass-select');
                    updateGlassSelectDisplay(glassSelectContainer, selectElement, value);
                }, 100);
            } else if (glassSelectContainer) {
                updateGlassSelectDisplay(glassSelectContainer, selectElement, value);
            }

            // 触发change事件
            const changeEvent = new Event('change', { bubbles: true });
            selectElement.dispatchEvent(changeEvent);
        }

        // 更新Glass Select的显示
        function updateGlassSelectDisplay(glassSelectContainer, selectElement, value) {
            if (!glassSelectContainer) return;

            // 更新显示的文本
            const displayElement = glassSelectContainer.querySelector('.glass-select-input');
            if (displayElement) {
                const selectedOption = selectElement.querySelector(`option[value="${value}"]`);
                if (selectedOption) {
                    displayElement.textContent = selectedOption.textContent;
                    displayElement.classList.add('has-value');
                    console.log('更新Glass Select显示文本:', selectedOption.textContent);
                }
            }

            // 标记为已选择
            glassSelectContainer.classList.add('has-value');

            // 移除placeholder状态
            glassSelectContainer.classList.remove('is-placeholder');
        }

        // 填充快捷创建的默认值
        function fillQuickCreateDefaults(operationType, targetType) {
            console.log('填充快捷创建默认值:', operationType, targetType);
            const isFile = targetType === 'File';

            switch(operationType) {
                case 'Create':
                    // 设置创建类型
                    const createTargetType = document.getElementById('createTargetType');
                    const createIsFile = document.getElementById('createIsFile');
                    const createTargetName = document.getElementById('createTargetName');
                    const createTargetPath = document.getElementById('createTargetPath');

                    console.log('创建操作元素:', { createTargetType, createIsFile, createTargetName, createTargetPath });

                    if (createTargetType) {
                        createTargetType.value = targetType;
                        console.log('设置创建类型:', targetType);
                    }
                    if (createIsFile) {
                        createIsFile.value = isFile.toString();
                        console.log('设置是否文件:', isFile.toString());
                    }
                    if (createTargetName) {
                        const defaultName = isFile ? '新建文档.txt' : '新建文件夹';
                        createTargetName.value = defaultName;
                        console.log('设置目标名称:', defaultName);
                    }
                    if (createTargetPath) {
                        createTargetPath.value = 'C:\\Users\\Desktop';
                        console.log('设置目标路径: C:\\Users\\Desktop');
                    }
                    break;

                case 'Delete':
                    // 设置删除类型
                    const deleteTargetType = document.getElementById('deleteTargetType');
                    const deleteIsFile = document.getElementById('deleteIsFile');
                    const deleteTargetName = document.getElementById('deleteTargetName');
                    const deleteTargetPath = document.getElementById('deleteTargetPath');

                    console.log('删除操作元素:', { deleteTargetType, deleteIsFile, deleteTargetName, deleteTargetPath });

                    if (deleteTargetType) {
                        deleteTargetType.value = targetType;
                        console.log('设置删除类型:', targetType);
                    }
                    if (deleteIsFile) {
                        deleteIsFile.value = isFile.toString();
                        console.log('设置是否文件:', isFile.toString());
                    }
                    if (deleteTargetName) {
                        const defaultName = isFile ? '要删除的文件.txt' : '要删除的文件夹';
                        deleteTargetName.value = defaultName;
                        console.log('设置目标名称:', defaultName);
                    }
                    if (deleteTargetPath) {
                        deleteTargetPath.value = 'C:\\Users\\Desktop';
                        console.log('设置目标路径: C:\\Users\\Desktop');
                    }
                    break;

                case 'Copy':
                    // 设置复制类型
                    const copySourcePath = document.getElementById('copySourcePath');
                    const copySourceIsFile = document.getElementById('copySourceIsFile');
                    const copyTargetPath = document.getElementById('copyTargetPath');
                    const copyKeepOriginal = document.getElementById('copyKeepOriginal');

                    console.log('复制操作元素:', { copySourcePath, copySourceIsFile, copyTargetPath, copyKeepOriginal });

                    if (copySourcePath) {
                        const defaultSourcePath = isFile ? 'C:\\Users\\Desktop\\源文件.txt' : 'C:\\Users\\Desktop\\源文件夹';
                        copySourcePath.value = defaultSourcePath;
                        console.log('设置源路径:', defaultSourcePath);
                    }
                    if (copySourceIsFile) {
                        copySourceIsFile.value = isFile.toString();
                        console.log('设置源是否文件:', isFile.toString());
                    }
                    if (copyTargetPath) {
                        copyTargetPath.value = 'C:\\Users\\Documents';
                        console.log('设置目标路径: C:\\Users\\Documents');
                    }
                    if (copyKeepOriginal) {
                        copyKeepOriginal.checked = true;
                        console.log('设置保留原文件: true');
                    }
                    break;

                case 'Move':
                    // 设置移动类型
                    const moveSourcePath = document.getElementById('moveSourcePath');
                    const moveSourceIsFile = document.getElementById('moveSourceIsFile');
                    const moveTargetPath = document.getElementById('moveTargetPath');

                    if (moveSourcePath) moveSourcePath.value = isFile ? 'C:\\Users\\Desktop\\要移动的文件.txt' : 'C:\\Users\\Desktop\\要移动的文件夹';
                    if (moveSourceIsFile) moveSourceIsFile.value = isFile.toString();
                    if (moveTargetPath) moveTargetPath.value = 'C:\\Users\\Documents';
                    break;

                case 'Rename':
                    // 设置重命名类型
                    const renameOriginalName = document.getElementById('renameOriginalName');
                    const renameIsFile = document.getElementById('renameIsFile');
                    const renameNewName = document.getElementById('renameNewName');
                    const renameTargetPath = document.getElementById('renameTargetPath');

                    if (renameOriginalName) renameOriginalName.value = isFile ? '旧文件名.txt' : '旧文件夹名';
                    if (renameIsFile) renameIsFile.value = isFile.toString();
                    if (renameNewName) renameNewName.value = isFile ? '新文件名.txt' : '新文件夹名';
                    if (renameTargetPath) renameTargetPath.value = 'C:\\Users\\Desktop';
                    break;

                case 'CreateShortcut':
                    // 设置快捷方式类型
                    const shortcutTargetPath = document.getElementById('shortcutTargetPath');
                    const shortcutLocation = document.getElementById('shortcutLocation');

                    if (shortcutTargetPath) shortcutTargetPath.value = 'C:\\Program Files\\应用程序\\程序.exe';
                    if (shortcutLocation) shortcutLocation.value = 'C:\\Users\\Desktop\\应用程序.lnk';
                    break;
            }
        }



        // 全选复选框变化处理函数
        function handleSelectAllChange() {
            const isChecked = this.checked;
            const questionCheckboxes = document.querySelectorAll('.question-checkbox');

            console.log('全选状态:', isChecked, '找到复选框数量:', questionCheckboxes.length);

            // 设置所有题目复选框的状态
            questionCheckboxes.forEach(checkbox => {
                checkbox.checked = isChecked;
                // 触发change事件以更新行样式
                const changeEvent = new Event('change', { bubbles: true });
                checkbox.dispatchEvent(changeEvent);
            });

            // 更新批量操作工具栏
            updateBulkOperationsToolbar();
        }

        // 题目复选框变化处理函数
        function handleQuestionCheckboxChange() {
            // 更新行的选中样式
            const row = this.closest('tr');
            if (row) {
                if (this.checked) {
                    row.classList.add('table-active');
                } else {
                    row.classList.remove('table-active');
                }
            }

            // 检查是否需要更新全选复选框状态
            updateSelectAllCheckboxState();

            // 更新批量操作工具栏
            updateBulkOperationsToolbar();
        }

        // 初始化全选功能
        function initializeSelectAllFunctionality() {
            const selectAllCheckbox = document.getElementById('selectAll');
            if (!selectAllCheckbox) {
                console.warn('未找到全选复选框');
                return;
            }

            // 移除现有的事件监听器（如果有的话）
            selectAllCheckbox.removeEventListener('change', handleSelectAllChange);

            // 添加全选复选框的事件监听器
            selectAllCheckbox.addEventListener('change', handleSelectAllChange);

            // 为每个题目复选框添加事件监听器
            const questionCheckboxes = document.querySelectorAll('.question-checkbox');
            questionCheckboxes.forEach(checkbox => {
                // 移除现有的事件监听器（如果有的话）
                checkbox.removeEventListener('change', handleQuestionCheckboxChange);
                // 添加新的事件监听器
                checkbox.addEventListener('change', handleQuestionCheckboxChange);
            });

            console.log('全选功能初始化完成，找到', questionCheckboxes.length, '个题目复选框');
        }

        // 更新全选复选框状态
        function updateSelectAllCheckboxState() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const questionCheckboxes = document.querySelectorAll('.question-checkbox');

            if (!selectAllCheckbox || questionCheckboxes.length === 0) return;

            const checkedCount = document.querySelectorAll('.question-checkbox:checked').length;
            const totalCount = questionCheckboxes.length;

            if (checkedCount === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            } else if (checkedCount === totalCount) {
                selectAllCheckbox.checked = true;
                selectAllCheckbox.indeterminate = false;
            } else {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = true;
            }
        }

        // 清除选择
        function clearSelection() {
            // 手动清除所有复选框
            const questionCheckboxes = document.querySelectorAll('.question-checkbox');
            questionCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
                // 触发change事件以更新样式
                const changeEvent = new Event('change', { bubbles: true });
                checkbox.dispatchEvent(changeEvent);
            });

            // 清除行的选中样式
            const selectedRows = document.querySelectorAll('tbody tr.table-active');
            selectedRows.forEach(row => {
                row.classList.remove('table-active');
            });

            // 更新全选复选框状态
            const selectAllCheckbox = document.getElementById('selectAll');
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            }

            // 更新批量操作工具栏
            updateBulkOperationsToolbar();
        }





        // 导入导出功能

        // 显示导入模态框
        function importWindowsQuestions() {
            const modal = new bootstrap.Modal(document.getElementById('importQuestionsModal'));
            modal.show();

            // 重置表单
            document.getElementById('importForm').reset();
            document.getElementById('importProgress').style.display = 'none';
            document.getElementById('importResult').style.display = 'none';
        }

        // 开始导入
        async function startImport() {
            const fileInput = document.getElementById('importFile');
            const validateOnly = document.getElementById('validateOnly').checked;

            if (!fileInput.files || fileInput.files.length === 0) {
                alert('请选择要导入的Excel文件');
                return;
            }

            const file = fileInput.files[0];

            // 验证文件类型
            if (!file.name.toLowerCase().endsWith('.xlsx')) {
                alert('仅支持.xlsx格式的Excel文件');
                return;
            }

            // 验证文件大小（10MB）
            if (file.size > 10 * 1024 * 1024) {
                alert('文件大小不能超过10MB');
                return;
            }

            // 显示进度
            document.getElementById('importProgress').style.display = 'block';
            document.getElementById('importResult').style.display = 'none';

            try {
                const formData = new FormData();
                formData.append('file', file);

                const response = await fetch(`/api/SimplifiedQuestion/import?subjectId=@(subject?.Id ?? 0)`, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                // 隐藏进度
                document.getElementById('importProgress').style.display = 'none';

                if (response.ok) {
                    // 显示成功结果
                    showImportResult(result);
                } else {
                    alert(`导入失败: ${result.message || '未知错误'}`);
                }

            } catch (error) {
                console.error('导入失败:', error);
                document.getElementById('importProgress').style.display = 'none';
                alert('导入失败，请稍后重试');
            }
        }

        // 显示导入结果
        function showImportResult(result) {
            const resultDiv = document.getElementById('importResult');
            const contentDiv = document.getElementById('importResultContent');

            if (!resultDiv || !contentDiv) {
                console.error('未找到导入结果显示容器');
                return;
            }

            let html = `
                <div class="row">
                    <div class="col-md-6">
                        <div class="text-center">
                            <div class="display-6 text-success">${result.successCount}</div>
                            <div class="text-muted">成功导入</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="text-center">
                            <div class="display-6 text-danger">${result.failCount}</div>
                            <div class="text-muted">导入失败</div>
                        </div>
                    </div>
                </div>
            `;

            if (result.errors && result.errors.length > 0) {
                html += `
                    <div class="mt-3">
                        <h6 class="text-warning">错误详情：</h6>
                        <div class="alert alert-warning">
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-info-circle me-1"></i>
                                    提示：分值支持小数格式（如：15.5、20.25），范围为0.1-100.0<br>
                                    属性类型支持：readonly（只读）、hidden（隐藏）、noindex（无内容索引）<br>
                                    注意：已移除快捷方式名称字段，旧的archive/system属性类型将自动转换
                                </small>
                            </div>
                            <ul class="mb-0">
                `;

                result.errors.slice(0, 10).forEach(error => {
                    html += `<li>${error}</li>`;
                });

                if (result.errors.length > 10) {
                    html += `<li>... 还有 ${result.errors.length - 10} 个错误</li>`;
                }

                html += `
                            </ul>
                        </div>
                    </div>
                `;
            }

            html += `
                <div class="mt-3 text-center">
                    <button class="glass-btn glass-btn-success" onclick="location.reload()">
                        <i class="bi bi-arrow-clockwise me-1"></i>刷新页面
                    </button>
                </div>
            `;

            contentDiv.innerHTML = html;
            resultDiv.style.display = 'block';
        }

        // 导出题目
        async function exportWindowsQuestions() {
            try {
                const enabledOnly = confirm('是否仅导出启用的题目？\n\n点击"确定"仅导出启用的题目\n点击"取消"导出所有题目');

                const url = `/api/SimplifiedQuestion/export?subjectId=@(subject?.Id ?? 0)&enabledOnly=${enabledOnly}`;

                // 创建隐藏的下载链接
                const link = document.createElement('a');
                link.href = url;
                link.download = '';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

            } catch (error) {
                console.error('导出失败:', error);
                alert('导出失败，请稍后重试');
            }
        }

        // 下载模板
        function downloadTemplate() {
            try {
                const url = '/api/SimplifiedQuestion/template';

                // 创建隐藏的下载链接
                const link = document.createElement('a');
                link.href = url;
                link.download = '';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

            } catch (error) {
                console.error('下载模板失败:', error);
                alert('下载模板失败，请稍后重试');
            }
        }

        // 显示创建Windows题目模态框
        function showCreateWindowsQuestionModal() {
            console.log('显示创建题目模态框');

            // 重置表单
            const form = document.getElementById('createQuestionForm');
            if (form) {
                form.reset();
            }

            // 显示模态框
            const modal = new bootstrap.Modal(document.getElementById('createQuestionModal'));
            modal.show();

            // 等待模态框完全显示后初始化glass-select组件
            setTimeout(() => {
                if (typeof initializeGlassSelectsNative === 'function') {
                    initializeGlassSelectsNative(document.getElementById('createQuestionModal'));
                }
            }, 300);
        }



        // 保存Windows题目
        async function saveWindowsQuestion() {
            try {
                const form = document.getElementById('windowsQuestionForm');
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }

                const operationType = document.getElementById('windowsOperationType').value;
                if (!operationType) {
                    alert('请选择操作类型');
                    return;
                }

                // 收集操作配置数据
                const operationConfig = collectWindowsOperationConfig(operationType);
                if (!operationConfig) {
                    alert('请完善操作配置信息');
                    return;
                }

                const questionData = {
                    subjectId: @(subject?.Id ?? 0),
                    operationType: operationType,
                    score: parseFloat(document.getElementById('questionScore').value),
                    operationConfig: operationConfig,
                    // 自动生成题目标题
                    title: generateWindowsQuestionTitle(operationType, operationConfig),
                    // 自动生成题目描述
                    description: generateWindowsQuestionDescription(operationType, operationConfig),
                    // 从全局配置中获取题目要求
                    requirements: document.getElementById('windowsRequirements')?.value || null
                };

                // 调用后端API保存题目
                console.log('保存Windows题目:', questionData);

                const response = await fetch('/api/SimplifiedQuestion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(questionData)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert('Windows题目创建成功！');

                    // 关闭模态框并刷新页面
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createQuestionModal'));
                    modal.hide();
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(`创建失败: ${error.message || '未知错误'}`);
                }

            } catch (error) {
                console.error('保存Windows题目失败:', error);
                alert('保存Windows题目失败：' + error.message);
            }
        }

        // 更新Windows题目
        async function updateWindowsQuestion() {
            try {
                const form = document.getElementById('editWindowsQuestionForm');
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }

                const questionId = document.getElementById('editQuestionId').value;
                const operationType = document.getElementById('editWindowsOperationType').value;
                if (!operationType) {
                    alert('请选择操作类型');
                    return;
                }

                // 收集操作配置数据
                const operationConfig = collectWindowsOperationConfig(operationType, 'edit');
                if (!operationConfig) {
                    alert('请完善操作配置信息');
                    return;
                }

                const questionData = {
                    id: parseInt(questionId),
                    subjectId: @(subject?.Id ?? 0),
                    operationType: operationType,
                    score: parseFloat(document.getElementById('editQuestionScore').value),
                    operationConfig: operationConfig,
                    // 自动生成题目标题和描述
                    title: generateWindowsQuestionTitle(operationType, operationConfig),
                    description: generateWindowsQuestionDescription(operationType, operationConfig),
                    // 从全局配置中获取题目要求
                    requirements: document.getElementById('windowsRequirements')?.value || null
                };

                // 调用后端API更新题目
                console.log('更新Windows题目:', questionData);

                const response = await fetch(`/api/SimplifiedQuestion/${questionId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(questionData)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert('Windows题目更新成功！');

                    // 关闭模态框并刷新页面
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editWindowsQuestionModal'));
                    modal.hide();
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(`更新失败: ${error.message || '未知错误'}`);
                }

            } catch (error) {
                console.error('更新Windows题目失败:', error);
                alert('更新Windows题目失败：' + error.message);
            }
        }




        // 其他通用函数（与Excel题目管理页面相同）
        function editQuestion(questionId) {
            window.location.href = `/ExamManagement/EditQuestion?id=${questionId}`;
        }



        async function toggleQuestionStatus(questionId, currentStatus) {
            try {
                const action = currentStatus ? '禁用' : '启用';
                if (!confirm(`确定要${action}这个题目吗？`)) {
                    return;
                }
                console.log(`${action}题目:`, questionId);
                location.reload();
            } catch (error) {
                console.error('切换题目状态失败:', error);
                alert('操作失败：' + error.message);
            }
        }

        async function deleteQuestion(questionId, questionTitle) {
            try {
                // 使用更详细的确认对话框
                const confirmMessage = `确定要删除题目"${questionTitle}"吗？\n\n⚠️ 此操作不可恢复，题目将被永久删除。\n\n点击"确定"继续删除，点击"取消"返回。`;

                if (!confirm(confirmMessage)) {
                    return;
                }

                console.log('正在删除题目:', questionId);

                const response = await fetch(`/ExamManagement/DeleteQuestion/${questionId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    // 显示成功消息
                    alert('✅ 题目删除成功！\n\n页面将自动刷新以显示最新的题目列表。');
                    location.reload();
                } else {
                    const error = await response.text();
                    alert(`❌ 删除失败: ${error || '未知错误'}\n\n请稍后重试或联系管理员。`);
                }
            } catch (error) {
                console.error('删除题目失败:', error);
                alert('❌ 删除失败，请检查网络连接后重试。\n\n错误信息：' + error.message);
            }
        }



        function applyFilters() {
            const searchTerm = document.getElementById('questionSearch').value.toLowerCase();
            const difficultyFilter = document.getElementById('difficultyFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;

            const rows = document.querySelectorAll('#questionTableBody tr');

            rows.forEach(row => {
                const title = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                const difficulty = row.getAttribute('data-difficulty');
                const status = row.getAttribute('data-status');
                const type = row.getAttribute('data-type');

                const matchesSearch = title.includes(searchTerm);
                const matchesDifficulty = !difficultyFilter || difficulty === difficultyFilter;
                const matchesStatus = !statusFilter || status === statusFilter;
                const matchesType = !typeFilter || type.includes(typeFilter.toLowerCase());

                if (matchesSearch && matchesDifficulty && matchesStatus && matchesType) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });

            // 筛选后重新初始化全选功能（为新显示的复选框绑定事件）
            setTimeout(() => {
                initializeSelectAllFunctionality();
            }, 100);
        }





        // 初始化页面
        $(document).ready(function() {
            // 全局初始化Glassmorphism Select组件
            if (typeof initializeGlassSelectsNative === 'function') {
                initializeGlassSelectsNative();
            }

            // 初始化搜索功能
            const questionSearchInput = document.getElementById('questionSearch');
            if (questionSearchInput) {
                questionSearchInput.addEventListener('input', applyFilters);
                questionSearchInput.addEventListener('keyup', applyFilters);
            }

            // 初始化全选功能
            initializeSelectAllFunctionality();

            // 初始化Glassmorphism Select组件
            setTimeout(function() {
                // 为动态生成的select元素重新初始化
                const selects = document.querySelectorAll('select[data-glass-select-native]:not([data-glass-native-initialized])');
                selects.forEach(select => {
                    const options = {
                        variant: select.getAttribute('data-variant') || 'default',
                        size: select.getAttribute('data-size') || 'default',
                        enhanced: select.hasAttribute('data-searchable') || select.hasAttribute('data-enhanced')
                    };
                    new GlassSelectNative(select, options);
                });
            }, 100);

            // Bootstrap表格不需要特殊的事件监听器
            // 全选功能已在initializeSelectAllFunctionality中处理
        });

        // 测试编辑功能的函数（用于调试）
        window.testEditFunction = function(questionId) {
            console.log('=== 开始测试编辑功能 ===');
            console.log('题目ID:', questionId);

            // 检查必要的DOM元素是否存在
            const editModal = document.getElementById('editWindowsQuestionModal');
            const editForm = document.getElementById('editWindowsQuestionForm');
            const editOperationType = document.getElementById('editWindowsOperationType');
            const editConfigCard = document.getElementById('editWindowsOperationConfigCard');

            console.log('编辑模态框存在:', !!editModal);
            console.log('编辑表单存在:', !!editForm);
            console.log('操作类型选择器存在:', !!editOperationType);
            console.log('配置卡片存在:', !!editConfigCard);

            // 检查必要的函数是否存在
            console.log('editSimplifiedQuestion函数存在:', typeof editSimplifiedQuestion === 'function');
            console.log('showEditWindowsQuestionModal函数存在:', typeof showEditWindowsQuestionModal === 'function');
            console.log('generateOperationConfigHtml函数存在:', typeof generateOperationConfigHtml === 'function');

            // 测试generateOperationConfigHtml函数
            try {
                const moveConfig = generateOperationConfigHtml('Move', 'edit');
                console.log('Move配置HTML生成成功，长度:', moveConfig.length);
            } catch (error) {
                console.error('Move配置HTML生成失败:', error);
            }

            console.log('=== 测试完成 ===');
        };

        // 验证修复的函数（用于调试）
        window.verifyFixes = function() {
            console.log('=== 验证修复结果 ===');

            // 检查操作点选择器是否已移除
            const createSelector = document.getElementById('windowsOperationPointSelector');
            const editSelector = document.getElementById('editWindowsOperationPointSelector');
            console.log('创建模态框操作点选择器已移除:', !createSelector);
            console.log('编辑模态框操作点选择器已移除:', !editSelector);

            // 检查操作类型下拉框是否唯一
            const createOperationType = document.getElementById('windowsOperationType');
            const editOperationType = document.getElementById('editWindowsOperationType');
            console.log('创建模态框操作类型选择器存在:', !!createOperationType);
            console.log('编辑模态框操作类型选择器存在:', !!editOperationType);

            // 检查是否有重复的操作类型选择器
            const allOperationTypes = document.querySelectorAll('[id*="OperationType"], [id*="operationType"]');
            console.log('页面中操作类型选择器总数:', allOperationTypes.length);
            console.log('操作类型选择器ID列表:', Array.from(allOperationTypes).map(el => el.id));

            // 检查相关函数是否存在
            console.log('showCreateWindowsQuestionModal函数存在:', typeof showCreateWindowsQuestionModal === 'function');
            console.log('showEditWindowsQuestionModal函数存在:', typeof showEditWindowsQuestionModal === 'function');
            console.log('quickCreateQuestion函数存在:', typeof quickCreateQuestion === 'function');

            // 检查是否还有操作点选择器相关的全局变量
            console.log('windowsOperationPointSelector变量存在:', typeof windowsOperationPointSelector !== 'undefined');
            console.log('editWindowsOperationPointSelector变量存在:', typeof editWindowsOperationPointSelector !== 'undefined');

            console.log('=== 验证完成 ===');
        };

        // Glassmorphism样式诊断
        function diagnoseGlassmorphismStyles() {
            console.log('=== Glassmorphism样式诊断 ===');

            // 检查CSS文件是否加载
            const cssFiles = Array.from(document.styleSheets).map(sheet => {
                try {
                    return sheet.href || 'inline';
                } catch (e) {
                    return 'cross-origin';
                }
            });
            console.log('已加载的CSS文件:', cssFiles);

            // 检查glassmorphism.css是否加载
            const hasGlassmorphismCSS = cssFiles.some(file => file.includes('glassmorphism.css'));
            console.log('glassmorphism.css已加载:', hasGlassmorphismCSS);

            // 检查body背景样式
            const bodyStyles = window.getComputedStyle(document.body);
            console.log('Body背景:', bodyStyles.background);
            console.log('Body背景图片:', bodyStyles.backgroundImage);

            // 检查glass-card元素
            const glassCards = document.querySelectorAll('.glass-card');
            console.log('找到glass-card元素数量:', glassCards.length);

            if (glassCards.length > 0) {
                const firstCard = glassCards[0];
                const cardStyles = window.getComputedStyle(firstCard);
                console.log('第一个glass-card的样式:');
                console.log('- background:', cardStyles.background);
                console.log('- backdrop-filter:', cardStyles.backdropFilter);
                console.log('- border:', cardStyles.border);
                console.log('- border-radius:', cardStyles.borderRadius);
            }

            // 检查glass-btn元素
            const glassBtns = document.querySelectorAll('.glass-btn');
            console.log('找到glass-btn元素数量:', glassBtns.length);

            // 检查select元素
            const glassSelects = document.querySelectorAll('select[data-glass-select-native]');
            console.log('找到glass-select-native元素数量:', glassSelects.length);

            glassSelects.forEach((select, index) => {
                const instance = select._glassSelectNativeInstance;
                console.log(`Select ${index + 1} (${select.id}):`, {
                    hasInstance: !!instance,
                    isInitialized: select.hasAttribute('data-glass-native-initialized'),
                    classes: select.className
                });
            });

            console.log('=== 诊断完成 ===');
        }

        // 修复表格列宽度对齐问题
        function fixTableColumnWidths() {
            const table = document.querySelector('.table[data-sortable]');
            if (!table) {
                console.log('未找到表格元素');
                return;
            }

            // 检查是否已经有colgroup
            let colgroup = table.querySelector('colgroup');
            if (!colgroup) {
                // 创建colgroup元素
                colgroup = document.createElement('colgroup');
                table.insertBefore(colgroup, table.firstChild);

                // 定义优化后的列宽度分配
                // 8% + 30% + 10% + 8% + 8% + 8% + 12% + 16% = 100%
                const widths = ['8%', '30%', '10%', '8%', '8%', '8%', '12%', '16%'];

                // 添加col元素
                widths.forEach(width => {
                    const col = document.createElement('col');
                    col.style.width = width;
                    colgroup.appendChild(col);
                });

                console.log('已为表格添加colgroup来修复列宽度对齐问题');
            } else {
                console.log('表格已经有colgroup，无需重复添加');
            }
        }

        // 页面加载完成后运行诊断和修复
        $(document).ready(function() {
            console.log('页面加载完成，准备执行修复');
            setTimeout(() => {
                console.log('开始执行表格修复');
                diagnoseGlassmorphismStyles();
                fixTableColumnWidths();
            }, 1000);
        });

        // Windows Markdown编辑器相关函数

        // 初始化Windows Markdown预览功能
        function initializeWindowsMarkdownPreview() {
            // 为Requirements字段添加预览
            const requirementsInput = document.getElementById('windowsRequirements');
            const requirementsPreview = document.getElementById('windowsRequirementsPreview');

            if (requirementsInput && requirementsPreview) {
                requirementsInput.addEventListener('input', function() {
                    updateWindowsMarkdownPreview(this.value, requirementsPreview);
                });
            }
        }

        // 插入Windows Markdown语法
        function insertWindowsMarkdown(before, after) {
            const textarea = document.getElementById('windowsRequirements');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);

            // 如果有选中文本，在选中文本前后添加标记
            const newText = before + selectedText + after;

            // 替换选中的文本
            textarea.value = textarea.value.substring(0, start) + newText + textarea.value.substring(end);

            // 设置新的光标位置
            const newCursorPos = start + before.length + selectedText.length + after.length;
            textarea.setSelectionRange(newCursorPos, newCursorPos);

            // 聚焦到textarea
            textarea.focus();

            // 触发input事件以更新预览
            textarea.dispatchEvent(new Event('input'));
        }

        // 切换Windows预览模式
        function toggleWindowsPreviewMode() {
            const previewElement = document.getElementById('windowsRequirementsPreview');
            const toggleButton = document.getElementById('windowsPreviewToggle');
            const editorContainer = document.querySelector('.markdown-editor-container');

            if (previewElement.style.display === 'none') {
                // 显示预览
                previewElement.style.display = 'block';
                editorContainer.style.display = 'block';
                toggleButton.innerHTML = '<i class="bi bi-eye"></i>';
                toggleButton.title = '隐藏预览';
            } else {
                // 隐藏预览，全屏编辑
                previewElement.style.display = 'none';
                editorContainer.style.width = '100%';
                toggleButton.innerHTML = '<i class="bi bi-eye-slash"></i>';
                toggleButton.title = '显示预览';
            }
        }

        // 更新Windows Markdown预览
        function updateWindowsMarkdownPreview(markdownText, previewElement) {
            if (!markdownText.trim()) {
                previewElement.innerHTML = '<small class="text-muted">在左侧输入Markdown内容，这里将显示预览</small>';
                return;
            }

            // 增强的Markdown转换
            let html = markdownText
                // 转义HTML特殊字符（除了我们要处理的Markdown语法）
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')

                // 代码块（必须在其他处理之前）
                .replace(/```(\w+)?\n([\s\S]*?)```/g, function(match, lang, code) {
                    const language = lang ? ` class="language-${lang}"` : '';
                    return `<pre><code${language}>${code.trim()}</code></pre>`;
                })

                // 行内代码
                .replace(/`([^`]+)`/g, '<code>$1</code>')

                // 标题
                .replace(/^### (.*$)/gim, '<h3>$1</h3>')
                .replace(/^## (.*$)/gim, '<h2>$1</h2>')
                .replace(/^# (.*$)/gim, '<h1>$1</h1>')

                // 粗体和斜体
                .replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')

                // 删除线
                .replace(/~~(.*?)~~/g, '<del>$1</del>')

                // 链接
                .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>')

                // 图片
                .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1" style="max-width: 100%; height: auto;">')

                // 引用
                .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')

                // 水平线
                .replace(/^---$/gim, '<hr>')
                .replace(/^\*\*\*$/gim, '<hr>')

                // 有序列表
                .replace(/^\d+\. (.*$)/gim, '<li class="ordered">$1</li>')

                // 无序列表
                .replace(/^[\*\-\+] (.*$)/gim, '<li class="unordered">$1</li>')

                // 换行处理
                .replace(/\n\n/g, '</p><p>')
                .replace(/\n/g, '<br>');

            // 包装段落
            if (html && !html.startsWith('<')) {
                html = '<p>' + html + '</p>';
            }

            // 包装列表项
            html = html.replace(/(<li class="ordered">.*?<\/li>)/gs, function(match) {
                return '<ol>' + match.replace(/ class="ordered"/g, '') + '</ol>';
            });

            html = html.replace(/(<li class="unordered">.*?<\/li>)/gs, function(match) {
                return '<ul>' + match.replace(/ class="unordered"/g, '') + '</ul>';
            });

            // 清理多余的段落标签
            html = html.replace(/<p><\/p>/g, '');
            html = html.replace(/<p>(<h[1-6]>)/g, '$1');
            html = html.replace(/(<\/h[1-6]>)<\/p>/g, '$1');
            html = html.replace(/<p>(<pre>)/g, '$1');
            html = html.replace(/(<\/pre>)<\/p>/g, '$1');
            html = html.replace(/<p>(<blockquote>)/g, '$1');
            html = html.replace(/(<\/blockquote>)<\/p>/g, '$1');
            html = html.replace(/<p>(<hr>)<\/p>/g, '$1');
            html = html.replace(/<p>(<ul>)/g, '$1');
            html = html.replace(/(<\/ul>)<\/p>/g, '$1');
            html = html.replace(/<p>(<ol>)/g, '$1');
            html = html.replace(/(<\/ol>)<\/p>/g, '$1');

            previewElement.innerHTML = html;
        }

        // 全局Windows题目要求管理函数

        // 加载全局Windows题目要求
        function loadGlobalWindowsRequirements() {
            const subjectId = @(subject?.Id ?? 0);
            if (subjectId === 0) return;

            // 从localStorage加载全局要求（作为缓存）
            const storageKey = `windowsRequirements_subject_${subjectId}`;
            const cachedRequirements = localStorage.getItem(storageKey);

            if (cachedRequirements) {
                const windowsRequirements = document.getElementById('windowsRequirements');
                const requirementsPreview = document.getElementById('windowsRequirementsPreview');

                if (windowsRequirements) {
                    windowsRequirements.value = cachedRequirements;
                    if (requirementsPreview) {
                        updateWindowsMarkdownPreview(cachedRequirements, requirementsPreview);
                    }
                }
            }
        }

        // 操作点管理功能
        let operationPointsData = [];
        let operationPointCounter = 0;

        // 添加操作点
        function addOperationPoint() {
            operationPointCounter++;
            const operationPoint = {
                id: `op_${operationPointCounter}`,
                operationType: '',
                score: 5.0,
                operationConfig: {},
                orderIndex: operationPointsData.length
            };

            operationPointsData.push(operationPoint);
            renderOperationPointsList();
        }

        // 删除操作点
        function removeOperationPoint(operationPointId) {
            const index = operationPointsData.findIndex(op => op.id === operationPointId);
            if (index > -1) {
                operationPointsData.splice(index, 1);
                renderOperationPointsList();
            }
        }

        // 渲染操作点列表
        function renderOperationPointsList() {
            const container = document.getElementById('operationPointsList');
            if (!container) return;

            if (operationPointsData.length === 0) {
                container.innerHTML = `
                    <div class="text-muted text-center py-3">
                        <i class="bi bi-info-circle me-2"></i>请点击"添加操作点"开始配置题目操作
                    </div>
                `;
                return;
            }

            let html = '';
            operationPointsData.forEach((op, index) => {
                html += generateOperationPointHtml(op, index);
            });

            container.innerHTML = html;

            // 重新初始化Glass Select组件
            setTimeout(() => {
                if (typeof initializeGlassSelectsNative === 'function') {
                    initializeGlassSelectsNative(container);
                }
            }, 100);
        }

        // 生成操作点HTML
        function generateOperationPointHtml(operationPoint, index) {
            const generatedTitle = operationPoint.operationType ?
                generateWindowsQuestionTitle(operationPoint.operationType, operationPoint.operationConfig) :
                '未配置操作';

            const generatedDescription = operationPoint.operationType ?
                generateWindowsQuestionDescription(operationPoint.operationType, operationPoint.operationConfig) :
                '请选择操作类型并配置参数';

            return `
                <div class="glass-card mb-3" data-operation-id="${operationPoint.id}">
                    <div class="card-header glass-card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="bi bi-gear me-2"></i>操作点 ${index + 1}
                        </h6>
                        <button type="button" class="glass-btn glass-btn-sm glass-btn-danger" onclick="removeOperationPoint('${operationPoint.id}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <label for="op_${operationPoint.id}_type" class="form-label">操作类型 *</label>
                                <select data-glass-select-native data-placeholder="请选择操作类型" id="op_${operationPoint.id}_type" onchange="updateOperationPointType('${operationPoint.id}', this.value)" required>
                                    <option value="">请选择操作类型</option>
                                    <option value="Create" ${operationPoint.operationType === 'Create' ? 'selected' : ''}>创建操作</option>
                                    <option value="Copy" ${operationPoint.operationType === 'Copy' ? 'selected' : ''}>复制操作</option>
                                    <option value="Move" ${operationPoint.operationType === 'Move' ? 'selected' : ''}>移动操作</option>
                                    <option value="Delete" ${operationPoint.operationType === 'Delete' ? 'selected' : ''}>删除操作</option>
                                    <option value="Rename" ${operationPoint.operationType === 'Rename' ? 'selected' : ''}>重命名操作</option>
                                    <option value="CreateShortcut" ${operationPoint.operationType === 'CreateShortcut' ? 'selected' : ''}>创建快捷方式</option>
                                    <option value="ModifyProperties" ${operationPoint.operationType === 'ModifyProperties' ? 'selected' : ''}>属性修改</option>
                                    <option value="CopyAndRename" ${operationPoint.operationType === 'CopyAndRename' ? 'selected' : ''}>复制并重命名</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="op_${operationPoint.id}_score" class="form-label">操作点分值 *</label>
                                <input type="number" class="glass-input" id="op_${operationPoint.id}_score" min="0.1" max="100" step="0.1" value="${operationPoint.score}" onchange="updateOperationPointScore('${operationPoint.id}', this.value)" required>
                            </div>
                        </div>

                        <!-- 操作配置区域 -->
                        <div class="mt-3" id="op_${operationPoint.id}_config">
                            ${operationPoint.operationType ? generateOperationConfigHtml(operationPoint.operationType, `op_${operationPoint.id}_`) : ''}
                        </div>

                        <!-- 自动生成的标题和描述预览 -->
                        <div class="mt-3">
                            <div class="glass-card glass-card-info">
                                <div class="card-body">
                                    <h6 class="text-primary mb-2">
                                        <i class="bi bi-eye me-2"></i>操作预览
                                    </h6>
                                    <div class="mb-2">
                                        <strong>标题：</strong><span id="op_${operationPoint.id}_preview_title">${generatedTitle}</span>
                                    </div>
                                    <div>
                                        <strong>描述：</strong><span id="op_${operationPoint.id}_preview_desc">${generatedDescription}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // 更新操作点类型
        function updateOperationPointType(operationPointId, operationType) {
            const operationPoint = operationPointsData.find(op => op.id === operationPointId);
            if (operationPoint) {
                operationPoint.operationType = operationType;
                operationPoint.operationConfig = {};

                // 更新配置区域
                const configContainer = document.getElementById(`op_${operationPointId}_config`);
                if (configContainer) {
                    configContainer.innerHTML = operationType ? generateOperationConfigHtml(operationType, `op_${operationPointId}_`) : '';
                }

                // 更新预览
                updateOperationPointPreview(operationPointId);
            }
        }

        // 更新操作点分值
        function updateOperationPointScore(operationPointId, score) {
            const operationPoint = operationPointsData.find(op => op.id === operationPointId);
            if (operationPoint) {
                operationPoint.score = parseFloat(score) || 0;
                updateQuestionTotalScore();
            }
        }

        // 更新题目总分
        function updateQuestionTotalScore() {
            const totalScore = operationPointsData.reduce((sum, op) => sum + (op.score || 0), 0);
            const totalScoreInput = document.getElementById('questionTotalScore');
            if (totalScoreInput) {
                totalScoreInput.value = totalScore.toFixed(1);
            }
        }

        // 更新操作点预览
        function updateOperationPointPreview(operationPointId) {
            const operationPoint = operationPointsData.find(op => op.id === operationPointId);
            if (!operationPoint || !operationPoint.operationType) return;

            // 获取当前配置
            const config = getOperationConfig(`op_${operationPointId}_`);
            if (config) {
                operationPoint.operationConfig = config;

                // 生成标题和描述
                const title = generateWindowsQuestionTitle(operationPoint.operationType, config);
                const description = generateWindowsQuestionDescription(operationPoint.operationType, config);

                // 更新预览显示
                const titleElement = document.getElementById(`op_${operationPointId}_preview_title`);
                const descElement = document.getElementById(`op_${operationPointId}_preview_desc`);

                if (titleElement) titleElement.textContent = title;
                if (descElement) descElement.textContent = description;
            }
        }

        // 验证操作点配置
        function validateOperationPoints() {
            if (operationPointsData.length === 0) {
                alert('请至少添加一个操作点');
                return false;
            }

            for (let i = 0; i < operationPointsData.length; i++) {
                const op = operationPointsData[i];
                if (!op.operationType) {
                    alert(`操作点 ${i + 1} 未选择操作类型`);
                    return false;
                }

                const config = getOperationConfig(`op_${op.id}_`);
                if (!config) {
                    alert(`操作点 ${i + 1} 配置不完整`);
                    return false;
                }

                op.operationConfig = config;
            }

            return true;
        }

        // 保存新的Windows题目（支持多操作点）
        async function saveNewWindowsQuestion() {
            try {
                // 验证题目基本信息
                const title = document.getElementById('questionTitle').value.trim();
                const description = document.getElementById('questionDescription').value.trim();
                const totalScore = parseFloat(document.getElementById('questionTotalScore').value);

                if (!title) {
                    alert('请输入题目标题');
                    return;
                }

                if (!totalScore || totalScore <= 0) {
                    alert('请输入有效的题目总分');
                    return;
                }

                // 验证操作点配置
                if (!validateOperationPoints()) {
                    return;
                }

                // 构建题目数据
                const questionData = {
                    subjectId: @(subject?.Id ?? 0),
                    title: title,
                    description: description || null,
                    totalScore: totalScore,
                    requirements: document.getElementById('windowsRequirements')?.value || null,
                    operationPoints: operationPointsData.map((op, index) => ({
                        operationType: op.operationType,
                        score: op.score,
                        operationConfig: op.operationConfig,
                        orderIndex: index
                    }))
                };

                console.log('保存Windows题目:', questionData);

                // 显示保存状态
                const saveButton = event.target;
                const originalContent = saveButton.innerHTML;
                saveButton.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>保存中...';
                saveButton.disabled = true;

                // 暂时使用现有API保存第一个操作点（兼容性处理）
                const firstOperationPoint = operationPointsData[0];
                const compatibilityData = {
                    subjectId: questionData.subjectId,
                    operationType: firstOperationPoint.operationType,
                    score: questionData.totalScore,
                    operationConfig: firstOperationPoint.operationConfig,
                    title: questionData.title,
                    description: questionData.description,
                    requirements: questionData.requirements
                };

                const response = await fetch('/api/SimplifiedQuestion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(compatibilityData)
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('题目创建成功:', result);

                    // 显示成功消息
                    saveButton.innerHTML = '<i class="bi bi-check-circle me-1"></i>创建成功';

                    setTimeout(() => {
                        // 关闭模态框
                        const modal = bootstrap.Modal.getInstance(document.getElementById('createQuestionModal'));
                        if (modal) modal.hide();

                        // 重置表单
                        resetNewQuestionForm();

                        // 刷新页面
                        location.reload();
                    }, 1500);
                } else {
                    const errorData = await response.json().catch(() => null);
                    const errorMessage = errorData?.message || `HTTP error! status: ${response.status}`;
                    throw new Error(errorMessage);
                }

            } catch (error) {
                console.error('保存题目失败:', error);
                alert('保存失败：' + error.message);

                // 恢复按钮状态
                const saveButton = event.target;
                saveButton.innerHTML = '<i class="bi bi-check-circle me-1"></i>创建题目';
                saveButton.disabled = false;
            }
        }

        // 重置新题目表单
        function resetNewQuestionForm() {
            document.getElementById('questionTitle').value = '';
            document.getElementById('questionDescription').value = '';
            document.getElementById('questionTotalScore').value = '10';
            operationPointsData = [];
            operationPointCounter = 0;
            renderOperationPointsList();
        }

        // 查看题目详情
        async function viewQuestionDetails(questionId) {
            try {
                console.log('查看题目详情:', questionId);

                // 获取题目详细信息
                const response = await fetch(`/api/SimplifiedQuestion/${questionId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const questionData = await response.json();
                console.log('题目详情数据:', questionData);

                // 填充基本信息
                document.getElementById('detailQuestionTitle').textContent = questionData.title || '-';
                document.getElementById('detailQuestionScore').textContent = `${questionData.score} 分`;
                document.getElementById('detailQuestionDescription').textContent = questionData.description || '无描述';

                const statusElement = document.getElementById('detailQuestionStatus');
                statusElement.textContent = questionData.isEnabled ? '启用' : '禁用';
                statusElement.className = `badge ${questionData.isEnabled ? 'bg-success' : 'bg-secondary'}`;

                document.getElementById('detailQuestionCreated').textContent = new Date(questionData.createdAt).toLocaleString();

                // 显示操作点信息（当前为单个操作点）
                const operationPointsContainer = document.getElementById('detailOperationPoints');
                const operationConfig = questionData.operationConfig || {};

                const operationTitle = generateWindowsQuestionTitle(questionData.operationType, operationConfig);
                const operationDescription = generateWindowsQuestionDescription(questionData.operationType, operationConfig);

                operationPointsContainer.innerHTML = `
                    <div class="glass-card glass-card-info">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h6 class="text-primary mb-0">
                                    <i class="bi bi-gear me-2"></i>操作点 1
                                </h6>
                                <span class="badge bg-primary">${questionData.score} 分</span>
                            </div>
                            <div class="mb-2">
                                <strong>操作类型：</strong>
                                <span class="badge bg-success">${questionData.operationType}</span>
                            </div>
                            <div class="mb-2">
                                <strong>操作标题：</strong>
                                <span>${operationTitle}</span>
                            </div>
                            <div class="mb-2">
                                <strong>操作描述：</strong>
                                <span>${operationDescription}</span>
                            </div>
                            <div>
                                <strong>配置参数：</strong>
                                <pre class="bg-dark text-light p-2 rounded mt-1"><code>${JSON.stringify(operationConfig, null, 2)}</code></pre>
                            </div>
                        </div>
                    </div>
                `;

                // 显示模态框
                const modal = new bootstrap.Modal(document.getElementById('questionDetailsModal'));
                modal.show();

            } catch (error) {
                console.error('查看题目详情失败:', error);
                alert('查看详情失败：' + error.message);
            }
        }

        // 保存全局Windows题目要求
        function saveWindowsRequirements() {
            const subjectId = @(subject?.Id ?? 0);
            if (subjectId === 0) {
                alert('无效的科目ID');
                return;
            }

            const windowsRequirements = document.getElementById('windowsRequirements');
            if (!windowsRequirements) {
                alert('找不到题目要求输入框');
                return;
            }

            const requirements = windowsRequirements.value.trim();

            // 保存到localStorage（作为缓存）
            const storageKey = `windowsRequirements_subject_${subjectId}`;
            localStorage.setItem(storageKey, requirements);

            // 显示保存成功消息
            const saveButton = event.target.closest('button');
            const originalContent = saveButton.innerHTML;
            saveButton.innerHTML = '<i class="bi bi-check"></i> 已保存';
            saveButton.disabled = true;

            setTimeout(() => {
                saveButton.innerHTML = originalContent;
                saveButton.disabled = false;
            }, 2000);

            console.log('全局Windows题目要求已保存:', requirements);
        }

        // ==================== 新的题目和操作点管理功能 ====================

        // 全局变量
        let currentQuestions = [];
        let currentOperationPoints = [];
        let questionCurrentPage = 1;
        let operationCurrentPage = 1;
        const pageSize = 10;

        // 分配题目模态框数据持久化
        let assignmentModalData = {
            lastSelectedQuestionId: null,
            operationHistory: new Map() // 存储操作点ID -> 最后选择的题目ID
        };

        // 页面初始化时加载数据
        document.addEventListener('DOMContentLoaded', function() {
            console.log('页面加载完成，开始初始化数据...');
            console.log('当前科目ID:', @(subject?.Id ?? 0));

            // 恢复分配模态框的持久化数据
            restoreAssignmentModalData();

            loadQuestionList();
            loadOperationPointList();
            loadQuestionOptions();

            // 延迟验证数据加载情况
            setTimeout(() => {
                console.log('页面加载完成后验证数据:');
                console.log('- 题目数量:', currentQuestions.length);
                console.log('- 操作点数量:', currentOperationPoints.length);

                if (currentQuestions.length === 0) {
                    console.warn('警告：题目数据为空，这可能会影响创建操作点功能');
                }
            }, 2000);
        });

        // 恢复分配模态框的持久化数据
        function restoreAssignmentModalData() {
            try {
                const savedData = localStorage.getItem('assignmentModalData');
                if (savedData) {
                    const parsedData = JSON.parse(savedData);
                    assignmentModalData.lastSelectedQuestionId = parsedData.lastSelectedQuestionId;

                    // 恢复操作历史
                    if (parsedData.operationHistory && Array.isArray(parsedData.operationHistory)) {
                        assignmentModalData.operationHistory = new Map(parsedData.operationHistory);
                    }

                    console.log('恢复分配模态框数据:', assignmentModalData);
                }
            } catch (error) {
                console.warn('恢复分配模态框数据失败:', error);
                // 重置为默认值
                assignmentModalData = {
                    lastSelectedQuestionId: null,
                    operationHistory: new Map()
                };
            }
        }

        // ==================== 题目管理功能 ====================

        // 显示创建题目模态框
        function showCreateQuestionModal() {
            document.getElementById('createQuestionForm').reset();
            const modal = new bootstrap.Modal(document.getElementById('createQuestionModal'));
            modal.show();
        }

        // 创建题目
        async function createQuestion() {
            try {
                const requirements = document.getElementById('newQuestionRequirements').value.trim();
                const score = parseFloat(document.getElementById('newQuestionScore').value);

                if (!requirements) {
                    alert('请输入题目要求');
                    return;
                }

                if (!score || score <= 0) {
                    alert('请输入有效的题目分值');
                    return;
                }

                // 生成题目标题（基于时间戳）
                const timestamp = Date.now();
                const title = `题目-${timestamp}`;
                const description = `题目要求：${requirements}`;

                const questionData = {
                    subjectId: @(subject?.Id ?? 0),
                    operationType: 'Question', // 标记为题目类型
                    score: score, // 使用用户设置的分值
                    operationConfig: {
                        type: 'question',
                        requirements: requirements,
                        totalScore: score,
                        createdAt: new Date().toISOString()
                    },
                    title: title,
                    description: description,
                    requirements: requirements
                };

                console.log('创建题目数据:', questionData);

                // 使用现有的SimplifiedQuestion API创建题目
                const response = await fetch('/api/SimplifiedQuestion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(questionData)
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('题目创建成功:', result);

                    // 关闭模态框
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createQuestionModal'));
                    if (modal) modal.hide();

                    // 清空表单
                    document.getElementById('createQuestionForm').reset();

                    // 刷新题目列表和选项
                    await loadQuestionList();
                    await loadQuestionOptions();

                    alert('题目创建成功！现在可以为此题目创建操作点。');
                } else {
                    const errorText = await response.text();
                    console.error('API错误响应:', errorText);

                    let errorMessage = `HTTP error! status: ${response.status}`;
                    try {
                        const errorData = JSON.parse(errorText);
                        if (errorData.message) {
                            errorMessage = errorData.message;
                        } else if (errorData.errors) {
                            // 处理模型验证错误
                            const errors = Object.values(errorData.errors).flat();
                            errorMessage = errors.join('; ');
                        }
                    } catch (e) {
                        // 如果不是JSON，使用原始文本
                        if (errorText) {
                            errorMessage = errorText;
                        }
                    }

                    throw new Error(errorMessage);
                }

            } catch (error) {
                console.error('创建题目失败:', error);
                alert('创建失败：' + error.message);
            }
        }

        // 确保题目数据可用
        async function ensureQuestionDataAvailable() {
            try {
                if (currentQuestions.length === 0) {
                    console.log('题目数据不可用，重新加载...');
                    await loadQuestionList();
                    await loadQuestionOptions();
                }

                if (currentQuestions.length === 0) {
                    console.warn('警告：仍然没有可用的题目数据');
                    return false;
                }

                console.log('题目数据可用，数量:', currentQuestions.length);
                return true;
            } catch (error) {
                console.error('确保题目数据可用失败:', error);
                return false;
            }
        }

        // 加载题目列表
        async function loadQuestionList() {
            try {
                console.log('加载题目列表...');

                // 使用现有的SimplifiedQuestion API
                const response = await fetch(`/api/SimplifiedQuestion/subject/@(subject?.Id ?? 0)`);
                if (!response.ok) {
                    if (response.status === 404) {
                        currentQuestions = [];
                        renderQuestionTable();
                        return;
                    }
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const questions = await response.json();
                console.log('获取到题目数据:', questions);

                // 筛选出题目类型的数据（operationType为'Question'的记录）
                const questionRecords = questions.filter(q => q.operationType === 'Question');

                // 转换数据格式以适应新的界面
                currentQuestions = questionRecords.map(q => ({
                    id: q.id,
                    title: q.title,
                    description: q.description,
                    requirements: q.requirements || q.description, // 使用requirements字段，如果没有则使用description
                    totalScore: q.score || 0, // 使用题目的实际分值
                    operationCount: questions.filter(op =>
                        op.operationType !== 'Question' &&
                        op.operationConfig &&
                        op.operationConfig.questionId == q.id
                    ).length, // 计算关联到此题目的操作点数量
                    isEnabled: q.isEnabled,
                    createdAt: q.createdAt,
                    operationType: q.operationType
                }));

                console.log('处理后的题目数据:', currentQuestions);

                renderQuestionTable();

            } catch (error) {
                console.error('加载题目列表失败:', error);
                currentQuestions = [];
                renderQuestionTable();
            }
        }

        // 渲染题目表格
        function renderQuestionTable() {
            const tbody = document.getElementById('questionTableBody');
            if (!tbody) return;

            if (currentQuestions.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center py-4">
                            <i class="bi bi-inbox text-muted" style="font-size: 2rem;"></i>
                            <div class="text-muted mt-2">暂无题目数据</div>
                        </td>
                    </tr>
                `;
                updateQuestionPagination(0);
                return;
            }

            // 分页处理
            const startIndex = (questionCurrentPage - 1) * pageSize;
            const endIndex = startIndex + pageSize;
            const pageQuestions = currentQuestions.slice(startIndex, endIndex);

            let html = '';
            pageQuestions.forEach(question => {
                html += `
                    <tr data-question-id="${question.id}">
                        <td>
                            <div class="form-check table-checkbox">
                                <input class="form-check-input question-checkbox" type="checkbox" value="${question.id}">
                            </div>
                        </td>
                        <td>
                            <div class="question-requirements">
                                ${question.requirements || question.description || '-'}
                            </div>
                        </td>
                        <td><span class="badge bg-info">${question.operationCount} 个</span></td>
                        <td><span class="badge bg-primary">${question.totalScore} 分</span></td>
                        <td>
                            <span class="badge ${question.isEnabled ? 'bg-success' : 'bg-secondary'}">
                                ${question.isEnabled ? '启用' : '禁用'}
                            </span>
                        </td>
                        <td><small>${new Date(question.createdAt).toLocaleString()}</small></td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-info btn-sm" onclick="viewQuestionDetails(${question.id})" title="查看详情">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-primary btn-sm" onclick="editQuestion(${question.id})" title="编辑">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-${question.isEnabled ? 'secondary' : 'success'} btn-sm"
                                        onclick="toggleQuestionStatus(${question.id}, ${question.isEnabled})"
                                        title="${question.isEnabled ? '禁用' : '启用'}">
                                    <i class="bi bi-${question.isEnabled ? 'x-circle' : 'check-circle'}"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="deleteQuestion(${question.id}, '题目ID: ${question.id}')" title="删除">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            tbody.innerHTML = html;
            updateQuestionPagination(currentQuestions.length);

            // 更新选择状态
            updateQuestionSelectionUI();
        }

        // 更新题目分页
        function updateQuestionPagination(totalCount) {
            const totalPages = Math.ceil(totalCount / pageSize);
            const startItem = totalCount > 0 ? (questionCurrentPage - 1) * pageSize + 1 : 0;
            const endItem = Math.min(questionCurrentPage * pageSize, totalCount);

            // 更新统计信息
            document.getElementById('questionPageStart').textContent = startItem;
            document.getElementById('questionPageEnd').textContent = endItem;
            document.getElementById('questionTotalCount').textContent = totalCount;

            // 生成分页按钮
            const pagination = document.getElementById('questionPagination');
            if (!pagination) return;

            let html = '';

            // 上一页
            html += `
                <li class="page-item ${questionCurrentPage <= 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changeQuestionPage(${questionCurrentPage - 1})">上一页</a>
                </li>
            `;

            // 页码
            for (let i = 1; i <= totalPages; i++) {
                if (i === questionCurrentPage) {
                    html += `<li class="page-item active"><a class="page-link" href="#">${i}</a></li>`;
                } else if (Math.abs(i - questionCurrentPage) <= 2 || i === 1 || i === totalPages) {
                    html += `<li class="page-item"><a class="page-link" href="#" onclick="changeQuestionPage(${i})">${i}</a></li>`;
                } else if (Math.abs(i - questionCurrentPage) === 3) {
                    html += `<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`;
                }
            }

            // 下一页
            html += `
                <li class="page-item ${questionCurrentPage >= totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changeQuestionPage(${questionCurrentPage + 1})">下一页</a>
                </li>
            `;

            pagination.innerHTML = html;
        }

        // 切换题目页面
        function changeQuestionPage(page) {
            const totalPages = Math.ceil(currentQuestions.length / pageSize);
            if (page < 1 || page > totalPages) return;

            questionCurrentPage = page;
            renderQuestionTable();
        }

        // 更新题目选择UI
        function updateQuestionSelectionUI() {
            // 由于已移除批量操作功能，这个函数现在只是一个空函数
            // 保留函数定义以避免其他地方的调用出错
            console.log('updateQuestionSelectionUI called - 批量操作功能已移除');
        }

        // 刷新题目列表
        function refreshQuestionList() {
            loadQuestionList();
        }

        // 应用题目筛选
        function applyQuestionFilters() {
            // 这里可以添加筛选逻辑
            console.log('应用题目筛选');
        }

        // 编辑题目
        async function editQuestion(questionId) {
            try {
                console.log('编辑题目:', questionId);

                // 获取题目详情
                const response = await fetch(`/api/SimplifiedQuestion/${questionId}`);
                if (!response.ok) {
                    throw new Error(`获取题目详情失败: ${response.status}`);
                }

                const questionData = await response.json();
                console.log('获取到题目数据:', questionData);

                // 预填充编辑表单
                document.getElementById('editQuestionId').value = questionData.id;
                document.getElementById('editQuestionRequirements').value = questionData.requirements || questionData.description || '';
                document.getElementById('editQuestionScore').value = questionData.score || 10;

                // 显示编辑模态框
                const modal = new bootstrap.Modal(document.getElementById('editQuestionModal'));
                modal.show();

            } catch (error) {
                console.error('编辑题目失败:', error);
                alert('获取题目信息失败：' + error.message);
            }
        }

        // 更新题目
        async function updateQuestion() {
            try {
                const questionId = document.getElementById('editQuestionId').value;
                const requirements = document.getElementById('editQuestionRequirements').value.trim();
                const score = parseFloat(document.getElementById('editQuestionScore').value);

                if (!requirements) {
                    alert('请输入题目要求');
                    return;
                }

                if (!score || score <= 0) {
                    alert('请输入有效的题目分值');
                    return;
                }

                // 生成更新的数据
                const title = `题目-${questionId}`;
                const description = `题目要求：${requirements}`;

                const updateData = {
                    subjectId: @(subject?.Id ?? 0),
                    operationType: 'Question',
                    score: score, // 使用用户设置的分值
                    operationConfig: {
                        type: 'question',
                        requirements: requirements,
                        totalScore: score,
                        updatedAt: new Date().toISOString()
                    },
                    title: title,
                    description: description,
                    requirements: requirements
                };

                console.log('更新题目数据:', updateData);

                const response = await fetch(`/api/SimplifiedQuestion/${questionId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('题目更新成功:', result);

                    // 关闭模态框
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editQuestionModal'));
                    if (modal) modal.hide();

                    // 刷新题目列表
                    await loadQuestionList();
                    await loadQuestionOptions();

                    alert('题目更新成功！');
                } else {
                    const errorText = await response.text();
                    console.error('API错误响应:', errorText);

                    let errorMessage = `HTTP error! status: ${response.status}`;
                    try {
                        const errorData = JSON.parse(errorText);
                        if (errorData.message) {
                            errorMessage = errorData.message;
                        } else if (errorData.errors) {
                            const errors = Object.values(errorData.errors).flat();
                            errorMessage = errors.join('; ');
                        }
                    } catch (e) {
                        if (errorText) {
                            errorMessage = errorText;
                        }
                    }

                    throw new Error(errorMessage);
                }

            } catch (error) {
                console.error('更新题目失败:', error);
                alert('更新失败：' + error.message);
            }
        }

        // 切换题目状态
        async function toggleQuestionStatus(questionId, currentStatus) {
            try {
                console.log('切换题目状态:', questionId, '当前状态:', currentStatus);

                const newStatus = !currentStatus;
                const statusText = newStatus ? '启用' : '禁用';

                if (!confirm(`确定要${statusText}这个题目吗？`)) {
                    return;
                }

                const response = await fetch(`/api/SimplifiedQuestion/${questionId}/toggle-status`, {
                    method: 'POST', // 根据API定义使用POST方法
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    console.log('题目状态切换成功');

                    // 刷新题目列表以显示新状态
                    await loadQuestionList();

                    alert(`题目已${statusText}！`);
                } else {
                    const errorText = await response.text();
                    console.error('API错误响应:', errorText);

                    let errorMessage = `HTTP error! status: ${response.status}`;
                    try {
                        const errorData = JSON.parse(errorText);
                        if (errorData.message) {
                            errorMessage = errorData.message;
                        }
                    } catch (e) {
                        if (errorText) {
                            errorMessage = errorText;
                        }
                    }

                    throw new Error(errorMessage);
                }

            } catch (error) {
                console.error('切换题目状态失败:', error);
                alert('状态切换失败：' + error.message);
            }
        }

        // 删除题目
        async function deleteQuestion(questionId, questionTitle) {
            if (!confirm(`确定要删除题目"${questionTitle}"吗？此操作不可撤销。`)) {
                return;
            }

            try {
                console.log('删除题目:', questionId);

                const response = await fetch(`/api/SimplifiedQuestion/${questionId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    await loadQuestionList();
                    await loadQuestionOptions();
                    console.log('题目删除成功');
                    alert('题目删除成功');
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

            } catch (error) {
                console.error('删除题目失败:', error);
                alert('删除失败：' + error.message);
            }
        }





        // ==================== 操作点管理功能 ====================

        // 快速创建操作点功能
        function quickCreateOperationPoint(operationType) {
            console.log('快速创建操作点:', operationType);

            // 显示创建操作点模态框
            showCreateOperationPointModal();

            // 等待模态框显示后设置操作类型
            setTimeout(() => {
                setOperationPointType(operationType);
            }, 800); // 增加等待时间确保模态框完全加载
        }

        // 设置操作点类型值的函数
        function setOperationPointType(operationType) {
            const operationTypeSelect = document.getElementById('newOperationType');
            console.log('设置操作点类型:', operationType, '找到选择器:', !!operationTypeSelect);

            if (!operationTypeSelect) {
                console.error('未找到操作点类型选择器');
                return;
            }

            // 设置选择器的值
            operationTypeSelect.value = operationType;

            // 触发change事件以更新配置界面
            const changeEvent = new Event('change', { bubbles: true });
            operationTypeSelect.dispatchEvent(changeEvent);

            // 更新glass-select显示
            const glassContainer = operationTypeSelect.closest('.glass-select');
            if (glassContainer) {
                const displayElement = glassContainer.querySelector('.glass-select-input');
                if (displayElement) {
                    const selectedOption = operationTypeSelect.querySelector(`option[value="${operationType}"]`);
                    if (selectedOption) {
                        displayElement.textContent = selectedOption.textContent;
                        displayElement.classList.add('has-value');
                        console.log('更新操作点类型显示:', selectedOption.textContent);
                    }
                }
            }

            console.log('操作点类型设置完成:', operationType);
        }

        // 显示创建操作点模态框
        async function showCreateOperationPointModal() {
            try {
                console.log('打开创建操作点模态框...');

                // 重置表单
                document.getElementById('createOperationPointForm').reset();
                document.getElementById('newOperationConfigArea').innerHTML = '';
                document.getElementById('newOperationPreview').style.display = 'none';

                // 确保题目数据已加载
                const dataAvailable = await ensureQuestionDataAvailable();
                if (!dataAvailable) {
                    alert('无法加载题目数据，请检查网络连接或刷新页面重试');
                    return;
                }

                console.log('当前题目数量:', currentQuestions.length);

                const modal = new bootstrap.Modal(document.getElementById('createOperationPointModal'));
                modal.show();

                // 重新初始化Glass Select组件
                setTimeout(() => {
                    if (typeof initializeGlassSelectsNative === 'function') {
                        initializeGlassSelectsNative(document.getElementById('createOperationPointModal'));
                    }

                    // 验证题目选项是否正确加载
                    const questionSelect = document.getElementById('newOperationQuestionId');
                    if (questionSelect) {
                        console.log('题目下拉框选项数量:', questionSelect.options.length);
                        if (questionSelect.options.length <= 1) {
                            console.warn('题目下拉框选项未正确加载，尝试重新加载...');
                            loadQuestionOptions();
                        }
                    }
                }, 200);

            } catch (error) {
                console.error('打开创建操作点模态框失败:', error);
                alert('打开创建操作点模态框失败，请刷新页面重试');
            }
        }

        // 创建操作点
        async function createOperationPoint() {
            try {
                // 确保题目数据可用
                const dataAvailable = await ensureQuestionDataAvailable();
                if (!dataAvailable) {
                    alert('题目数据不可用，无法创建操作点。请刷新页面重试。');
                    return;
                }

                const questionId = document.getElementById('newOperationQuestionId').value;
                const operationType = document.getElementById('newOperationType').value;

                if (!questionId) {
                    alert('请选择关联题目');
                    return;
                }

                if (!operationType) {
                    alert('请选择操作类型');
                    return;
                }

                // 验证选择的题目是否存在于当前题目列表中
                const selectedQuestion = currentQuestions.find(q => q.id == questionId);
                if (!selectedQuestion) {
                    alert('选择的题目无效，请重新选择');
                    await loadQuestionOptions(); // 重新加载选项
                    return;
                }

                // 获取详细的操作配置
                const operationConfig = getOperationConfig('newOperation');
                if (!operationConfig) {
                    alert('获取操作配置失败，请检查配置参数');
                    return;
                }

                // 验证配置完整性
                const validationResult = validateOperationConfig(operationConfig);
                if (!validationResult.isValid) {
                    alert('配置验证失败：\n' + validationResult.errors.join('\n'));
                    return;
                }

                // 添加题目关联信息
                operationConfig.questionId = parseInt(questionId);

                // 生成标题和描述
                const title = `${getOperationTypeText(operationType)}-${Date.now()}`;
                const description = `操作类型：${getOperationTypeText(operationType)}，关联题目：${questionId}`;

                const operationData = {
                    subjectId: @(subject?.Id ?? 0),
                    operationType: operationType,
                    score: 1, // 操作点使用固定分值1，实际分值由题目管理
                    operationConfig: operationConfig,
                    title: title,
                    description: description,
                    requirements: null // 操作点不需要requirements字段
                };

                console.log('创建操作点数据:', operationData);

                const response = await fetch('/api/SimplifiedQuestion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(operationData)
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('操作点创建成功:', result);

                    // 关闭模态框
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createOperationPointModal'));
                    if (modal) modal.hide();

                    // 清空表单
                    document.getElementById('createOperationPointForm').reset();

                    // 刷新列表
                    await loadOperationPointList();
                    await loadQuestionList();

                    alert('操作点创建成功！');
                } else {
                    const errorText = await response.text();
                    console.error('API错误响应:', errorText);

                    let errorMessage = `HTTP error! status: ${response.status}`;
                    try {
                        const errorData = JSON.parse(errorText);
                        if (errorData.message) {
                            errorMessage = errorData.message;
                        } else if (errorData.errors) {
                            // 处理模型验证错误
                            const errors = Object.values(errorData.errors).flat();
                            errorMessage = errors.join('; ');
                        }
                    } catch (e) {
                        // 如果不是JSON，使用原始文本
                        if (errorText) {
                            errorMessage = errorText;
                        }
                    }

                    throw new Error(errorMessage);
                }

            } catch (error) {
                console.error('创建操作点失败:', error);
                alert('创建失败：' + error.message);
            }
        }

        // 加载操作点列表
        async function loadOperationPointList() {
            try {
                console.log('加载操作点列表...');

                // 使用现有的SimplifiedQuestion API
                const response = await fetch(`/api/SimplifiedQuestion/subject/@(subject?.Id ?? 0)`);
                if (!response.ok) {
                    if (response.status === 404) {
                        currentOperationPoints = [];
                        renderOperationPointTable();
                        return;
                    }
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const questions = await response.json();
                console.log('获取到操作点数据:', questions);

                // 筛选出操作点类型的数据（operationType不为'Question'的记录）
                const operationRecords = questions.filter(q => q.operationType !== 'Question');

                // 转换数据格式以适应新的界面
                currentOperationPoints = operationRecords.map(q => {
                    // 检查操作配置中是否有关联的题目ID
                    let questionId = null;
                    let questionTitle = '独立操作点';
                    let questionScore = null;

                    if (q.operationConfig && q.operationConfig.questionId) {
                        questionId = q.operationConfig.questionId;
                        // 查找对应的题目
                        const relatedQuestion = currentQuestions.find(question => question.id == questionId);
                        if (relatedQuestion) {
                            questionTitle = `题目${questionId}`;
                            questionScore = relatedQuestion.totalScore;
                        } else {
                            questionTitle = `题目${questionId} (已删除)`;
                            questionScore = null;
                        }
                    }

                    return {
                        id: q.id,
                        operationType: q.operationType,
                        score: q.score,
                        operationConfig: q.operationConfig || {},
                        questionId: questionId,
                        questionTitle: questionTitle,
                        questionScore: questionScore,
                        generatedTitle: q.title,
                        generatedDescription: q.description,
                        isEnabled: q.isEnabled,
                        createdAt: q.createdAt
                    };
                });

                renderOperationPointTable();

            } catch (error) {
                console.error('加载操作点列表失败:', error);
                currentOperationPoints = [];
                renderOperationPointTable();
            }
        }

        // 渲染操作点表格
        function renderOperationPointTable() {
            const tbody = document.getElementById('operationTableBody');
            if (!tbody) return;

            if (currentOperationPoints.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center py-4">
                            <i class="bi bi-gear text-muted" style="font-size: 2rem;"></i>
                            <div class="text-muted mt-2">暂无操作点数据</div>
                        </td>
                    </tr>
                `;
                updateOperationPagination(0);
                return;
            }

            // 分页处理
            const startIndex = (operationCurrentPage - 1) * pageSize;
            const endIndex = startIndex + pageSize;
            const pageOperations = currentOperationPoints.slice(startIndex, endIndex);

            let html = '';
            pageOperations.forEach(operation => {
                const operationTypeText = getOperationTypeText(operation.operationType);

                html += `
                    <tr data-operation-id="${operation.id}">
                        <td>
                            <div class="form-check table-checkbox">
                                <input class="form-check-input operation-checkbox" type="checkbox" value="${operation.id}">
                            </div>
                        </td>
                        <td><span class="badge bg-success">${operationTypeText}</span></td>
                        <td><strong>${operation.generatedTitle}</strong></td>
                        <td>
                            <span class="badge bg-info">${operation.questionTitle}</span>
                        </td>
                        <td><span class="badge bg-primary">${operation.questionScore || '-'} 分</span></td>
                        <td>
                            <span class="badge ${operation.isEnabled ? 'bg-success' : 'bg-secondary'}">
                                ${operation.isEnabled ? '启用' : '禁用'}
                            </span>
                        </td>
                        <td><small>${new Date(operation.createdAt).toLocaleString()}</small></td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-info btn-sm" onclick="viewOperationDetails(${operation.id})" title="查看详情">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-primary btn-sm" onclick="editOperationPoint(${operation.id})" title="编辑">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-warning btn-sm" onclick="assignToQuestion(${operation.id})" title="分配题目">
                                    <i class="bi bi-link"></i>
                                </button>
                                <button class="btn btn-${operation.isEnabled ? 'secondary' : 'success'} btn-sm"
                                        onclick="toggleOperationStatus(${operation.id}, ${operation.isEnabled})"
                                        title="${operation.isEnabled ? '禁用' : '启用'}">
                                    <i class="bi bi-${operation.isEnabled ? 'x-circle' : 'check-circle'}"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="deleteOperationPoint(${operation.id}, '${operation.generatedTitle}')" title="删除">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            tbody.innerHTML = html;
            updateOperationPagination(currentOperationPoints.length);

            // 更新选择状态
            updateOperationSelectionUI();
        }

        // 获取操作类型文本
        function getOperationTypeText(operationType) {
            const typeMap = {
                'Create': '创建操作',
                'Copy': '复制操作',
                'Move': '移动操作',
                'Delete': '删除操作',
                'Rename': '重命名操作',
                'CreateShortcut': '创建快捷方式',
                'ModifyProperties': '属性修改',
                'CopyAndRename': '复制并重命名'
            };
            return typeMap[operationType] || operationType;
        }

        // 更新操作点分页
        function updateOperationPagination(totalCount) {
            const totalPages = Math.ceil(totalCount / pageSize);
            const startItem = totalCount > 0 ? (operationCurrentPage - 1) * pageSize + 1 : 0;
            const endItem = Math.min(operationCurrentPage * pageSize, totalCount);

            // 更新统计信息
            document.getElementById('operationPageStart').textContent = startItem;
            document.getElementById('operationPageEnd').textContent = endItem;
            document.getElementById('operationTotalCount').textContent = totalCount;

            // 生成分页按钮
            const pagination = document.getElementById('operationPagination');
            if (!pagination) return;

            let html = '';

            // 上一页
            html += `
                <li class="page-item ${operationCurrentPage <= 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changeOperationPage(${operationCurrentPage - 1})">上一页</a>
                </li>
            `;

            // 页码
            for (let i = 1; i <= totalPages; i++) {
                if (i === operationCurrentPage) {
                    html += `<li class="page-item active"><a class="page-link" href="#">${i}</a></li>`;
                } else if (Math.abs(i - operationCurrentPage) <= 2 || i === 1 || i === totalPages) {
                    html += `<li class="page-item"><a class="page-link" href="#" onclick="changeOperationPage(${i})">${i}</a></li>`;
                } else if (Math.abs(i - operationCurrentPage) === 3) {
                    html += `<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`;
                }
            }

            // 下一页
            html += `
                <li class="page-item ${operationCurrentPage >= totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changeOperationPage(${operationCurrentPage + 1})">下一页</a>
                </li>
            `;

            pagination.innerHTML = html;
        }

        // 切换操作点页面
        function changeOperationPage(page) {
            const totalPages = Math.ceil(currentOperationPoints.length / pageSize);
            if (page < 1 || page > totalPages) return;

            operationCurrentPage = page;
            renderOperationPointTable();
        }

        // 更新操作点选择UI
        function updateOperationSelectionUI() {
            // 由于已移除批量操作功能，这个函数现在只是一个空函数
            // 保留函数定义以避免其他地方的调用出错
            console.log('updateOperationSelectionUI called - 批量操作功能已移除');
        }

        // 刷新操作点列表
        function refreshOperationPointList() {
            loadOperationPointList();
        }

        // 应用操作点筛选
        function applyOperationFilters() {
            console.log('应用操作点筛选');
        }

        // 加载题目选项
        async function loadQuestionOptions(excludeQuestionId = null) {
            try {
                console.log('加载题目选项，当前题目数量:', currentQuestions.length);

                const selects = [
                    document.getElementById('newOperationQuestionId'),
                    document.getElementById('editOperationQuestionId'),
                    document.getElementById('operationQuestionFilter'),
                    document.getElementById('bulkAssignQuestionId')
                ];

                selects.forEach((select, index) => {
                    if (select) {
                        console.log(`处理下拉框 ${index + 1}:`, select.id);

                        // 清空现有选项（保留第一个默认选项）
                        const firstOption = select.firstElementChild;
                        const firstOptionText = firstOption ? firstOption.textContent : '请选择题目';
                        const firstOptionValue = firstOption ? firstOption.value : '';

                        select.innerHTML = '';

                        // 重新添加默认选项
                        const defaultOption = document.createElement('option');
                        defaultOption.value = firstOptionValue;
                        defaultOption.textContent = firstOptionText;
                        select.appendChild(defaultOption);

                        // 添加题目选项
                        if (currentQuestions.length > 0) {
                            let addedCount = 0;
                            currentQuestions.forEach(question => {
                                // 如果指定了要排除的题目ID，则跳过该题目
                                if (excludeQuestionId && question.id == excludeQuestionId) {
                                    console.log(`跳过当前编辑的题目: ${question.id}`);
                                    return;
                                }

                                const option = document.createElement('option');
                                option.value = question.id;

                                // 优先使用requirements，其次使用title，最后使用description
                                let displayText = '';
                                if (question.requirements && question.requirements.trim()) {
                                    displayText = question.requirements.length > 50
                                        ? question.requirements.substring(0, 50) + '...'
                                        : question.requirements;
                                } else if (question.title && question.title.trim()) {
                                    displayText = question.title.length > 50
                                        ? question.title.substring(0, 50) + '...'
                                        : question.title;
                                } else if (question.description && question.description.trim()) {
                                    displayText = question.description.length > 50
                                        ? question.description.substring(0, 50) + '...'
                                        : question.description;
                                } else {
                                    displayText = `${question.operationType}操作`;
                                }

                                option.textContent = `题目${question.id}: ${displayText}`;
                                select.appendChild(option);
                                addedCount++;
                            });
                            console.log(`下拉框 ${select.id} 添加了 ${addedCount} 个题目选项${excludeQuestionId ? `（排除题目${excludeQuestionId}）` : ''}`);
                        } else {
                            console.warn(`没有可用的题目数据来填充下拉框 ${select.id}`);
                        }

                        console.log(`下拉框 ${select.id} 最终选项数量:`, select.options.length);
                    } else {
                        console.warn(`下拉框元素 ${index + 1} 不存在`);
                    }
                });

            } catch (error) {
                console.error('加载题目选项失败:', error);
            }
        }

        // 更新glass-select组件的显示
        function updateGlassSelectDisplay(selectId, value) {
            try {
                const selectElement = document.getElementById(selectId);
                if (!selectElement) {
                    console.warn(`未找到选择器元素: ${selectId}`);
                    return;
                }

                // 设置选择器的值
                selectElement.value = value;

                // 查找对应的选项文本
                const selectedOption = selectElement.querySelector(`option[value="${value}"]`);
                if (!selectedOption) {
                    console.warn(`未找到对应的选项: ${value}`);
                    return;
                }

                // 更新glass-select的显示
                const glassContainer = selectElement.closest('.glass-select');
                if (glassContainer) {
                    const displayElement = glassContainer.querySelector('.glass-select-input');
                    if (displayElement) {
                        displayElement.textContent = selectedOption.textContent;
                        displayElement.classList.add('has-value');
                        console.log(`更新glass-select显示: ${selectId} = ${selectedOption.textContent}`);
                    }
                }

                // 如果是原生glass-select，查找对应的显示元素
                const nativeContainer = selectElement.closest('[data-glass-select-native]');
                if (nativeContainer) {
                    const displayInput = nativeContainer.querySelector('.glass-select-display');
                    if (displayInput) {
                        displayInput.value = selectedOption.textContent;
                        displayInput.classList.add('has-value');
                        console.log(`更新原生glass-select显示: ${selectId} = ${selectedOption.textContent}`);
                    }
                }
            } catch (error) {
                console.error('更新glass-select显示失败:', error);
            }
        }

        // 编辑操作点
        async function editOperationPoint(operationId) {
            try {
                console.log('编辑操作点:', operationId);

                // 获取操作点详情
                const response = await fetch(`/api/SimplifiedQuestion/${operationId}`);
                if (!response.ok) {
                    throw new Error(`获取操作点详情失败: ${response.status}`);
                }

                const operationData = await response.json();
                console.log('获取到操作点数据:', operationData);

                // 预填充编辑表单
                document.getElementById('editOperationPointId').value = operationData.id;
                document.getElementById('editOperationType').value = operationData.operationType;

                // 更新操作类型的glass-select显示
                setTimeout(() => {
                    updateGlassSelectDisplay('editOperationType', operationData.operationType);
                }, 100);



                // 设置关联题目 - 从操作配置中获取关联的题目ID
                const questionSelect = document.getElementById('editOperationQuestionId');
                if (questionSelect) {
                    let relatedQuestionId = '';

                    // 从操作配置中获取关联的题目ID
                    if (operationData.operationConfig && operationData.operationConfig.questionId) {
                        relatedQuestionId = operationData.operationConfig.questionId.toString();
                        console.log('设置关联题目ID:', relatedQuestionId);
                    } else {
                        console.log('操作点未关联任何题目');
                    }

                    questionSelect.value = relatedQuestionId;

                    // 更新glass-select显示
                    if (relatedQuestionId) {
                        setTimeout(() => {
                            updateGlassSelectDisplay('editOperationQuestionId', relatedQuestionId);
                        }, 300);
                    }
                }

                // 显示编辑模态框
                const modal = new bootstrap.Modal(document.getElementById('editOperationPointModal'));
                modal.show();

                // 等待模态框显示后再进行初始化和数据填充
                setTimeout(async () => {
                    // 重新初始化Glass Select组件
                    if (typeof initializeGlassSelectsNative === 'function') {
                        initializeGlassSelectsNative(document.getElementById('editOperationPointModal'));
                    }

                    // 确保当前编辑的操作点在题目列表中（用于其他功能，但在关联题目选择中会被排除）
                    const currentQuestion = currentQuestions.find(q => q.id === operationData.id);
                    if (!currentQuestion) {
                        console.log('当前编辑的操作点不在题目列表中，添加到列表');
                        currentQuestions.push(operationData);
                    }

                    // 加载题目选项，排除当前编辑的操作点
                    await loadQuestionOptions(operationData.id);

                    // 更新操作类型配置区域
                    updateOperationTypeConfig('editOperation');

                    // 等待配置区域生成后再填充配置字段
                    setTimeout(() => {
                        // 创建包含操作类型的配置对象
                        const configWithType = {
                            ...operationData.operationConfig,
                            type: operationData.operationType
                        };
                        console.log('延迟填充配置字段，配置数据:', configWithType);
                        // 使用正确的前缀：editOperationOperation
                        fillEditConfigFields(configWithType, 'editOperationOperation');
                    }, 300);

                    // 设置关联题目，确保题目选项已加载且glass-select组件已初始化
                    setTimeout(() => {
                        const questionSelect = document.getElementById('editOperationQuestionId');
                        if (questionSelect) {
                            let relatedQuestionId = '';

                            // 从操作配置中获取关联的题目ID
                            if (operationData.operationConfig && operationData.operationConfig.questionId) {
                                relatedQuestionId = operationData.operationConfig.questionId.toString();
                                console.log('最终设置关联题目:', relatedQuestionId);
                                updateGlassSelectDisplay('editOperationQuestionId', relatedQuestionId);
                            } else {
                                console.log('操作点未关联任何题目，保持空选择');
                            }
                        }
                    }, 400);
                }, 300);

            } catch (error) {
                console.error('编辑操作点失败:', error);
                alert('获取操作点信息失败：' + error.message);
            }
        }

        // 更新操作点
        async function updateOperationPoint() {
            try {
                const operationId = document.getElementById('editOperationPointId').value;
                const questionId = document.getElementById('editOperationQuestionId').value;
                const operationType = document.getElementById('editOperationType').value;

                if (!questionId) {
                    alert('请选择关联题目');
                    return;
                }

                if (!operationType) {
                    alert('请选择操作类型');
                    return;
                }

                // 获取详细的操作配置
                const operationConfig = getOperationConfig('editOperation');
                if (!operationConfig) {
                    alert('获取操作配置失败，请检查配置参数');
                    return;
                }

                // 验证配置完整性
                const validationResult = validateOperationConfig(operationConfig);
                if (!validationResult.isValid) {
                    alert('配置验证失败：\n' + validationResult.errors.join('\n'));
                    return;
                }

                // 添加更新信息
                operationConfig.questionId = parseInt(questionId);
                operationConfig.updatedAt = new Date().toISOString();

                // 生成标题和描述
                const title = `${getOperationTypeText(operationType)}-${operationId}`;
                const description = `操作类型：${getOperationTypeText(operationType)}，关联题目：${questionId}`;

                const updateData = {
                    subjectId: @(subject?.Id ?? 0),
                    operationType: operationType,
                    score: 1, // 操作点使用固定分值1
                    operationConfig: operationConfig,
                    title: title,
                    description: description,
                    requirements: null
                };

                console.log('更新操作点数据:', updateData);

                const response = await fetch(`/api/SimplifiedQuestion/${operationId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('操作点更新成功:', result);

                    // 关闭模态框
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editOperationPointModal'));
                    if (modal) modal.hide();

                    // 刷新列表
                    await loadOperationPointList();
                    await loadQuestionList();

                    alert('操作点更新成功！');
                } else {
                    const errorText = await response.text();
                    console.error('API错误响应:', errorText);

                    let errorMessage = `HTTP error! status: ${response.status}`;
                    try {
                        const errorData = JSON.parse(errorText);
                        if (errorData.message) {
                            errorMessage = errorData.message;
                        } else if (errorData.errors) {
                            const errors = Object.values(errorData.errors).flat();
                            errorMessage = errors.join('; ');
                        }
                    } catch (e) {
                        if (errorText) {
                            errorMessage = errorText;
                        }
                    }

                    throw new Error(errorMessage);
                }

            } catch (error) {
                console.error('更新操作点失败:', error);
                alert('更新失败：' + error.message);
            }
        }

        // 查看操作点详情
        async function viewOperationDetails(operationId) {
            try {
                console.log('查看操作点详情:', operationId);

                // 获取操作点详情
                const response = await fetch(`/api/SimplifiedQuestion/${operationId}`);
                if (!response.ok) {
                    throw new Error(`获取操作点详情失败: ${response.status}`);
                }

                const operationData = await response.json();
                console.log('操作点详情数据:', operationData);

                // 填充详情模态框
                document.getElementById('detailOperationId').textContent = operationData.id;
                document.getElementById('detailOperationType').textContent = getOperationTypeText(operationData.operationType);
                document.getElementById('detailOperationStatus').innerHTML = `
                    <span class="badge ${operationData.isEnabled ? 'bg-success' : 'bg-secondary'}">
                        ${operationData.isEnabled ? '启用' : '禁用'}
                    </span>
                `;
                document.getElementById('detailOperationTitle').textContent = operationData.title || '-';
                document.getElementById('detailOperationDescription').textContent = operationData.description || '-';
                document.getElementById('detailOperationCreated').textContent = new Date(operationData.createdAt).toLocaleString();
                document.getElementById('detailOperationUpdated').textContent = operationData.updatedAt ? new Date(operationData.updatedAt).toLocaleString() : '-';

                // 显示操作配置
                const configText = operationData.operationConfig ? JSON.stringify(operationData.operationConfig, null, 2) : '{}';
                document.getElementById('detailOperationConfig').textContent = configText;

                // 生成详细的配置参数显示
                let hasDetailedConfig = false;
                if (operationData.operationConfig) {
                    const detailConfigHtml = generateDetailConfigDisplay(operationData.operationConfig);
                    if (detailConfigHtml) {
                        document.getElementById('detailConfigParamsContent').innerHTML = detailConfigHtml;
                        document.getElementById('detailConfigParams').style.display = 'block';
                        hasDetailedConfig = true;
                    }
                }

                if (!hasDetailedConfig) {
                    document.getElementById('detailConfigParams').style.display = 'none';
                }

                // 查找关联的题目
                let questionText = '未分配题目';
                let questionScore = '-';
                if (operationData.operationConfig && operationData.operationConfig.questionId) {
                    const questionId = operationData.operationConfig.questionId;
                    const relatedQuestion = currentQuestions.find(q => q.id == questionId);
                    if (relatedQuestion) {
                        questionText = `题目${questionId}: ${relatedQuestion.requirements.length > 50 ? relatedQuestion.requirements.substring(0, 50) + '...' : relatedQuestion.requirements}`;
                        questionScore = `${relatedQuestion.totalScore} 分`;
                    } else {
                        questionText = `题目${questionId} (题目可能已删除)`;
                        questionScore = '题目已删除';
                    }
                }
                document.getElementById('detailOperationQuestion').textContent = questionText;
                document.getElementById('detailQuestionScore').textContent = questionScore;

                // 存储当前操作点ID用于编辑
                window.currentDetailOperationId = operationId;

                // 显示详情模态框
                const modal = new bootstrap.Modal(document.getElementById('operationDetailsModal'));
                modal.show();

            } catch (error) {
                console.error('查看操作点详情失败:', error);
                alert('获取操作点详情失败：' + error.message);
            }
        }

        // 从详情页面编辑操作点
        function editOperationFromDetails() {
            if (window.currentDetailOperationId) {
                // 关闭详情模态框
                const detailModal = bootstrap.Modal.getInstance(document.getElementById('operationDetailsModal'));
                if (detailModal) detailModal.hide();

                // 打开编辑模态框
                setTimeout(() => {
                    editOperationPoint(window.currentDetailOperationId);
                }, 300);
            }
        }

        // 分配操作点到题目
        async function assignToQuestion(operationId) {
            try {
                console.log('分配操作点到题目:', operationId);

                // 检查是否有可用的题目
                if (currentQuestions.length === 0) {
                    alert('没有可用的题目，请先创建题目。');
                    return;
                }

                // 获取操作点详情
                const response = await fetch(`/api/SimplifiedQuestion/${operationId}`);
                if (!response.ok) {
                    throw new Error(`获取操作点详情失败: ${response.status}`);
                }

                const operationData = await response.json();
                console.log('操作点数据:', operationData);

                // 获取上次选择的题目ID（数据持久化）
                const lastSelectedQuestionId = assignmentModalData.operationHistory.get(operationId) ||
                                             assignmentModalData.lastSelectedQuestionId ||
                                             (operationData.operationConfig && operationData.operationConfig.questionId) ||
                                             '';

                console.log('上次选择的题目ID:', lastSelectedQuestionId);

                // 创建分配题目的模态框内容
                const modalHtml = `
                    <div class="modal fade" id="assignQuestionModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content glass-card">
                                <div class="modal-header glass-card-header">
                                    <h5 class="modal-title">
                                        <i class="bi bi-link me-2"></i>分配题目
                                    </h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <p class="text-muted mb-3">
                                        为操作点"${operationData.title}"选择要分配的题目：
                                    </p>
                                    <div class="mb-3">
                                        <label for="assignQuestionSelect" class="form-label">选择题目 *</label>
                                        <select class="form-select" id="assignQuestionSelect" required style="background-color: rgba(255, 255, 255, 0.9) !important; color: #333 !important; border: 1px solid rgba(0, 0, 0, 0.2) !important;">
                                            <option value="">请选择题目</option>
                                            ${currentQuestions.map(q => `
                                                <option value="${q.id}" ${q.id == lastSelectedQuestionId ? 'selected' : ''} style="background-color: white !important; color: #333 !important;">
                                                    题目${q.id}: ${q.requirements.length > 50 ? q.requirements.substring(0, 50) + '...' : q.requirements}
                                                </option>
                                            `).join('')}
                                        </select>
                                        ${lastSelectedQuestionId ? `
                                            <div class="form-text text-muted mt-2">
                                                <i class="bi bi-info-circle me-1"></i>
                                                已自动选择上次使用的题目
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                                <div class="modal-footer glass-card-footer">
                                    <button type="button" class="glass-btn me-2" data-bs-dismiss="modal">
                                        <i class="bi bi-x-circle me-1"></i>取消
                                    </button>
                                    <button type="button" class="glass-btn glass-btn-primary" onclick="confirmAssignToQuestion(${operationId})">
                                        <i class="bi bi-check-circle me-1"></i>确认分配
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // 移除已存在的模态框
                const existingModal = document.getElementById('assignQuestionModal');
                if (existingModal) {
                    existingModal.remove();
                }

                // 添加新的模态框到页面
                document.body.insertAdjacentHTML('beforeend', modalHtml);

                // 显示模态框
                const modal = new bootstrap.Modal(document.getElementById('assignQuestionModal'));
                modal.show();

            } catch (error) {
                console.error('分配操作点失败:', error);
                alert('分配失败：' + error.message);
            }
        }

        // 确认分配操作点到题目
        async function confirmAssignToQuestion(operationId) {
            try {
                const questionId = document.getElementById('assignQuestionSelect').value;
                if (!questionId) {
                    alert('请选择题目');
                    return;
                }

                console.log('确认分配操作点', operationId, '到题目', questionId);

                // 保存选择到持久化数据（在API调用之前保存，确保即使失败也能记住选择）
                assignmentModalData.lastSelectedQuestionId = questionId;
                assignmentModalData.operationHistory.set(operationId, questionId);

                // 保存到localStorage以实现跨会话持久化
                try {
                    localStorage.setItem('assignmentModalData', JSON.stringify({
                        lastSelectedQuestionId: assignmentModalData.lastSelectedQuestionId,
                        operationHistory: Array.from(assignmentModalData.operationHistory.entries())
                    }));
                } catch (e) {
                    console.warn('无法保存到localStorage:', e);
                }

                // 获取当前操作点数据
                const response = await fetch(`/api/SimplifiedQuestion/${operationId}`);
                if (!response.ok) {
                    throw new Error(`获取操作点详情失败: ${response.status}`);
                }

                const operationData = await response.json();

                // 更新操作配置，添加题目关联
                const updatedConfig = {
                    ...operationData.operationConfig,
                    questionId: parseInt(questionId),
                    assignedAt: new Date().toISOString()
                };

                const updateData = {
                    subjectId: operationData.subjectId,
                    operationType: operationData.operationType,
                    score: operationData.score,
                    operationConfig: updatedConfig,
                    title: operationData.title,
                    description: operationData.description,
                    requirements: operationData.requirements
                };

                console.log('更新操作点关联数据:', updateData);

                const updateResponse = await fetch(`/api/SimplifiedQuestion/${operationId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                });

                if (updateResponse.ok) {
                    console.log('操作点分配成功');

                    // 关闭模态框
                    const modal = bootstrap.Modal.getInstance(document.getElementById('assignQuestionModal'));
                    if (modal) modal.hide();

                    // 刷新列表
                    await loadOperationPointList();
                    await loadQuestionList();

                    alert('操作点分配成功！');
                } else {
                    throw new Error(`分配失败: ${updateResponse.status}`);
                }

            } catch (error) {
                console.error('确认分配失败:', error);
                alert('分配失败：' + error.message);
            }
        }

        // 切换操作点状态
        async function toggleOperationStatus(operationId, currentStatus) {
            try {
                console.log('切换操作点状态:', operationId, currentStatus);

                const response = await fetch(`/api/SimplifiedQuestion/${operationId}/toggle-status`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ isEnabled: !currentStatus })
                });

                if (response.ok) {
                    await loadOperationPointList();
                    console.log('操作点状态切换成功');
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

            } catch (error) {
                console.error('切换操作点状态失败:', error);
                alert('操作失败：' + error.message);
            }
        }

        // 删除操作点
        async function deleteOperationPoint(operationId, operationTitle) {
            if (!confirm(`确定要删除操作点"${operationTitle}"吗？此操作不可撤销。`)) {
                return;
            }

            try {
                console.log('删除操作点:', operationId);

                const response = await fetch(`/api/SimplifiedQuestion/${operationId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    await loadOperationPointList();
                    await loadQuestionList();
                    console.log('操作点删除成功');
                    alert('操作点删除成功');
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

            } catch (error) {
                console.error('删除操作点失败:', error);
                alert('删除失败：' + error.message);
            }
        }







        // 操作类型变化时更新配置区域
        function updateOperationTypeConfig(prefix) {
            try {
                console.log('更新操作类型配置，前缀:', prefix);

                // 根据前缀确定正确的操作类型元素ID
                let operationTypeElementId;
                if (prefix === 'newOperation') {
                    operationTypeElementId = 'newOperationType';
                } else if (prefix === 'editOperation') {
                    operationTypeElementId = 'editOperationType';
                } else {
                    operationTypeElementId = `${prefix}OperationType`;
                }

                const operationTypeElement = document.getElementById(operationTypeElementId);

                // 根据前缀确定正确的配置区域和预览元素ID
                let configAreaId, previewId;
                if (prefix === 'newOperation') {
                    configAreaId = 'newOperationConfigArea';
                    previewId = 'newOperationPreview';
                } else if (prefix === 'editOperation') {
                    configAreaId = 'editOperationConfigArea';
                    previewId = 'editOperationPreview';
                } else {
                    configAreaId = `${prefix}OperationConfigArea`;
                    previewId = `${prefix}OperationPreview`;
                }

                const configArea = document.getElementById(configAreaId);
                const preview = document.getElementById(previewId);

                if (!operationTypeElement) {
                    console.warn(`未找到操作类型元素: ${operationTypeElementId}`);
                    return;
                }

                if (!configArea) {
                    console.warn(`未找到配置区域元素: ${configAreaId}`);
                    return;
                }

                const operationType = operationTypeElement.value;
                if (!operationType) {
                    console.log('操作类型为空，清空配置区域');
                    configArea.innerHTML = '';
                    if (preview) preview.style.display = 'none';
                    return;
                }

                console.log('操作类型:', operationType);

                // 生成配置HTML
                const configHtml = generateOperationConfigHtml(operationType, `${prefix}Operation`);
                configArea.innerHTML = configHtml;

                // 显示预览
                if (preview) {
                    preview.style.display = 'block';
                    updateOperationPreview(prefix);
                } else {
                    console.warn(`未找到预览元素: ${prefix}OperationPreview`);
                }

                // 重新初始化Glass Select组件
                setTimeout(() => {
                    if (typeof initializeGlassSelectsNative === 'function') {
                        initializeGlassSelectsNative(configArea);
                    }
                }, 100);
            } catch (error) {
                console.error('更新操作类型配置失败:', error);
            }
        }

        // 获取操作配置
        function getOperationConfig(prefix) {
            try {
                console.log('获取操作配置，前缀:', prefix);

                // 修复DOM元素查询，添加空值检查
                // 根据前缀确定正确的操作类型元素ID
                let operationTypeElementId;
                if (prefix === 'newOperation') {
                    operationTypeElementId = 'newOperationType';
                } else if (prefix === 'editOperation') {
                    operationTypeElementId = 'editOperationType';
                } else {
                    operationTypeElementId = `${prefix}OperationType`;
                }

                const operationTypeElement = document.getElementById(operationTypeElementId);
                if (!operationTypeElement) {
                    console.warn(`未找到操作类型元素: ${operationTypeElementId}`);
                    return null;
                }

                const operationType = operationTypeElement.value;
                if (!operationType) {
                    console.warn('操作类型为空');
                    return null;
                }

                console.log('获取到操作类型:', operationType);

                // 基本配置对象
                const config = {
                    type: operationType,
                    createdAt: new Date().toISOString()
                };

                // 根据操作类型收集具体的配置参数
                switch (operationType) {
                    case 'Copy':
                        const copyFileType = document.getElementById(`${prefix}FileType`);
                        const copySourcePath = document.getElementById(`${prefix}SourcePath`);
                        const copyTargetPath = document.getElementById(`${prefix}TargetPath`);
                        if (copyFileType && copySourcePath && copyTargetPath) {
                            config.fileType = copyFileType.value;
                            config.sourcePath = copySourcePath.value.trim();
                            config.targetPath = copyTargetPath.value.trim();
                            config.action = 'copy';
                            config.description = `复制${config.fileType === 'file' ? '文件' : '文件夹'} ${config.sourcePath} 到 ${config.targetPath}`;
                        }
                        break;

                    case 'Move':
                        const moveFileType = document.getElementById(`${prefix}FileType`);
                        const moveSourcePath = document.getElementById(`${prefix}SourcePath`);
                        const moveTargetPath = document.getElementById(`${prefix}TargetPath`);
                        if (moveFileType && moveSourcePath && moveTargetPath) {
                            config.fileType = moveFileType.value;
                            config.sourcePath = moveSourcePath.value.trim();
                            config.targetPath = moveTargetPath.value.trim();
                            config.action = 'move';
                            config.description = `移动${config.fileType === 'file' ? '文件' : '文件夹'} ${config.sourcePath} 到 ${config.targetPath}`;
                        }
                        break;

                    case 'Create':
                        const createFileType = document.getElementById(`${prefix}FileType`);
                        const itemName = document.getElementById(`${prefix}ItemName`);
                        const createPath = document.getElementById(`${prefix}CreatePath`);
                        if (createFileType && itemName && createPath) {
                            config.fileType = createFileType.value;
                            config.itemName = itemName.value.trim();
                            config.createPath = createPath.value.trim();
                            config.action = 'create';
                            config.description = `创建${config.fileType === 'file' ? '文件' : '文件夹'} ${config.itemName} 在 ${config.createPath}`;
                        }
                        break;

                    case 'Delete':
                        const deleteFileType = document.getElementById(`${prefix}FileType`);
                        const deletePath = document.getElementById(`${prefix}DeletePath`);
                        if (deleteFileType && deletePath) {
                            config.fileType = deleteFileType.value;
                            config.deletePath = deletePath.value.trim();
                            config.action = 'delete';
                            config.description = `删除${config.fileType === 'file' ? '文件' : '文件夹'} ${config.deletePath}`;
                        }
                        break;

                    case 'Rename':
                        const renameFileType = document.getElementById(`${prefix}FileType`);
                        const filePath = document.getElementById(`${prefix}FilePath`);
                        const oldName = document.getElementById(`${prefix}OldName`);
                        const newName = document.getElementById(`${prefix}NewName`);
                        if (renameFileType && filePath && oldName && newName) {
                            config.fileType = renameFileType.value;
                            config.filePath = filePath.value.trim();
                            config.oldName = oldName.value.trim();
                            config.newName = newName.value.trim();
                            config.action = 'rename';
                            config.description = `重命名${config.fileType === 'file' ? '文件' : '文件夹'} ${config.oldName} 为 ${config.newName}`;
                        }
                        break;

                    case 'CreateShortcut':
                        const shortcutFileType = document.getElementById(`${prefix}FileType`);
                        const targetPath = document.getElementById(`${prefix}TargetPath`);
                        const shortcutPath = document.getElementById(`${prefix}ShortcutPath`);
                        if (shortcutFileType && targetPath && shortcutPath) {
                            config.fileType = shortcutFileType.value;
                            config.targetPath = targetPath.value.trim();
                            config.shortcutPath = shortcutPath.value.trim();
                            config.action = 'createShortcut';
                            config.description = `为${config.fileType === 'file' ? '文件' : '文件夹'} ${config.targetPath} 创建快捷方式到 ${config.shortcutPath}`;
                        }
                        break;

                    case 'ModifyProperties':
                        const propFileType = document.getElementById(`${prefix}FileType`);
                        const propFilePath = document.getElementById(`${prefix}FilePath`);
                        const propertyType = document.getElementById(`${prefix}PropertyType`);
                        if (propFileType && propFilePath && propertyType) {
                            config.fileType = propFileType.value;
                            config.filePath = propFilePath.value.trim();
                            config.propertyType = propertyType.value;
                            config.action = 'modifyProperties';
                            const propertyTypeText = config.propertyType === 'readonly' ? '只读' :
                                                   config.propertyType === 'hidden' ? '隐藏' :
                                                   config.propertyType === 'noindex' ? '无内容索引' : config.propertyType;
                            config.description = `修改${config.fileType === 'file' ? '文件' : '文件夹'} ${config.filePath} 的${propertyTypeText}属性`;
                        }
                        break;

                    case 'CopyAndRename':
                        const carFileType = document.getElementById(`${prefix}FileType`);
                        const carSourcePath = document.getElementById(`${prefix}SourcePath`);
                        const carTargetPath = document.getElementById(`${prefix}TargetPath`);
                        const carNewName = document.getElementById(`${prefix}NewName`);
                        if (carFileType && carSourcePath && carTargetPath && carNewName) {
                            config.fileType = carFileType.value;
                            config.sourcePath = carSourcePath.value.trim();
                            config.targetPath = carTargetPath.value.trim();
                            config.newName = carNewName.value.trim();
                            config.action = 'copyAndRename';
                            config.description = `复制${config.fileType === 'file' ? '文件' : '文件夹'} ${config.sourcePath} 到 ${config.targetPath} 并重命名为 ${config.newName}`;
                        }
                        break;

                    default:
                        const customConfig = document.getElementById(`${prefix}CustomConfig`);
                        if (customConfig) {
                            config.customConfig = customConfig.value.trim();
                            config.action = 'custom';
                            config.description = config.customConfig || '自定义操作';
                        } else {
                            config.action = 'unknown';
                            config.description = '未知操作';
                        }
                }

                console.log('生成的配置:', config);
                return config;
            } catch (error) {
                console.error('获取操作配置失败:', error);
                return null;
            }
        }

        // 生成Windows题目标题
        function generateWindowsQuestionTitle(operationType, config) {
            const typeText = getOperationTypeText(operationType);
            return `${typeText}操作`;
        }

        // 生成Windows题目描述
        function generateWindowsQuestionDescription(operationType, config) {
            const typeText = getOperationTypeText(operationType);
            return `执行${typeText}操作，${config.description || '完成指定任务'}`;
        }

        // 更新操作预览
        function updateOperationPreview(prefix) {
            try {
                console.log('更新操作预览，前缀:', prefix);

                // 根据前缀确定正确的操作类型元素ID
                let operationTypeElementId;
                if (prefix === 'newOperation') {
                    operationTypeElementId = 'newOperationType';
                } else if (prefix === 'editOperation') {
                    operationTypeElementId = 'editOperationType';
                } else {
                    operationTypeElementId = `${prefix}OperationType`;
                }

                const operationTypeElement = document.getElementById(operationTypeElementId);
                if (!operationTypeElement) {
                    console.warn(`未找到操作类型元素: ${operationTypeElementId}`);
                    return;
                }

                const operationType = operationTypeElement.value;
                if (!operationType) {
                    console.warn('操作类型为空，跳过预览更新');
                    return;
                }

                const config = getOperationConfig(prefix);
                if (config) {
                    // 验证配置完整性
                    const validationResult = validateOperationConfig(config);
                    if (!validationResult.isValid) {
                        console.warn('配置验证失败:', validationResult.errors);
                    }

                    const title = generateWindowsQuestionTitle(operationType, config);
                    const description = generateWindowsQuestionDescription(operationType, config);

                    // 根据前缀确定正确的预览元素ID
                    let titleElementId, descElementId;
                    if (prefix === 'newOperation') {
                        titleElementId = 'newOperationPreviewTitle';
                        descElementId = 'newOperationPreviewDesc';
                    } else if (prefix === 'editOperation') {
                        titleElementId = 'editOperationPreviewTitle';
                        descElementId = 'editOperationPreviewDesc';
                    } else {
                        titleElementId = `${prefix}OperationPreviewTitle`;
                        descElementId = `${prefix}OperationPreviewDesc`;
                    }

                    const titleElement = document.getElementById(titleElementId);
                    const descElement = document.getElementById(descElementId);

                    if (titleElement) {
                        titleElement.textContent = title;
                        console.log('更新预览标题:', title);
                    } else {
                        console.warn(`未找到预览标题元素: ${titleElementId}`);
                    }

                    if (descElement) {
                        descElement.textContent = description;
                        console.log('更新预览描述:', description);
                    } else {
                        console.warn(`未找到预览描述元素: ${descElementId}`);
                    }
                } else {
                    console.warn('获取操作配置失败，无法更新预览');
                }
            } catch (error) {
                console.error('更新操作预览失败:', error);
            }
        }

        // 生成操作配置HTML
        function generateOperationConfigHtml(operationType, prefix) {
            if (!operationType) return '';

            const typeText = getOperationTypeText(operationType);
            let configFieldsHtml = '';

            // 根据操作类型生成相应的配置字段
            switch (operationType) {
                case 'Copy':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-4">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择要复制的对象类型</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}SourcePath" class="form-label">源路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}SourcePath" placeholder="例如: C:\\源文件夹\\文件.txt" required>
                                <div class="form-text text-muted">要复制的文件或文件夹的完整路径</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}TargetPath" class="form-label">目标路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}TargetPath" placeholder="例如: C:\\目标文件夹\\文件.txt" required>
                                <div class="form-text text-muted">复制到的目标位置完整路径</div>
                            </div>
                        </div>
                    `;
                    break;

                case 'Move':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-4">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择要移动的对象类型</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}SourcePath" class="form-label">源路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}SourcePath" placeholder="例如: C:\\源文件夹\\文件.txt" required>
                                <div class="form-text text-muted">要移动的文件或文件夹的完整路径</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}TargetPath" class="form-label">目标路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}TargetPath" placeholder="例如: C:\\目标文件夹\\文件.txt" required>
                                <div class="form-text text-muted">移动到的目标位置完整路径</div>
                            </div>
                        </div>
                    `;
                    break;

                case 'Create':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-4">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择要创建的对象类型</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}ItemName" class="form-label">名称 *</label>
                                <input type="text" class="glass-input" id="${prefix}ItemName" placeholder="例如: 新文件.txt" required>
                                <div class="form-text text-muted">要创建的文件或文件夹名称</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}CreatePath" class="form-label">创建路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}CreatePath" placeholder="例如: C:\\目标文件夹" required>
                                <div class="form-text text-muted">创建位置的文件夹路径</div>
                            </div>
                        </div>
                    `;
                    break;

                case 'Delete':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-4">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择要删除的对象类型</div>
                            </div>
                            <div class="col-md-8">
                                <label for="${prefix}DeletePath" class="form-label">删除路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}DeletePath" placeholder="例如: C:\\要删除的文件夹\\文件.txt" required>
                                <div class="form-text text-muted">要删除的文件或文件夹的完整路径</div>
                            </div>
                        </div>
                    `;
                    break;

                case 'Rename':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-3">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择要重命名的对象类型</div>
                            </div>
                            <div class="col-md-3">
                                <label for="${prefix}FilePath" class="form-label">文件路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}FilePath" placeholder="例如: C:\\文件夹" required>
                                <div class="form-text text-muted">要重命名的文件或文件夹所在路径</div>
                            </div>
                            <div class="col-md-3">
                                <label for="${prefix}OldName" class="form-label">原名称 *</label>
                                <input type="text" class="glass-input" id="${prefix}OldName" placeholder="例如: 旧文件名.txt" required>
                                <div class="form-text text-muted">当前的文件或文件夹名称</div>
                            </div>
                            <div class="col-md-3">
                                <label for="${prefix}NewName" class="form-label">新名称 *</label>
                                <input type="text" class="glass-input" id="${prefix}NewName" placeholder="例如: 新文件名.txt" required>
                                <div class="form-text text-muted">重命名后的名称</div>
                            </div>
                        </div>
                    `;
                    break;

                case 'CreateShortcut':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-4">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择快捷方式指向的对象类型</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}TargetPath" class="form-label">目标路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}TargetPath" placeholder="例如: C:\\Program Files\\应用程序.exe" required>
                                <div class="form-text text-muted">快捷方式指向的目标文件路径</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}ShortcutPath" class="form-label">快捷方式路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}ShortcutPath" placeholder="例如: C:\\Desktop\\应用程序.lnk" required>
                                <div class="form-text text-muted">快捷方式文件的保存路径</div>
                            </div>
                        </div>
                    `;
                    break;

                case 'ModifyProperties':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-4">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择要修改属性的对象类型</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}FilePath" class="form-label">文件路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}FilePath" placeholder="例如: C:\\文件夹\\文件.txt" required>
                                <div class="form-text text-muted">要修改属性的文件或文件夹路径</div>
                            </div>
                            <div class="col-md-4">
                                <label for="${prefix}PropertyType" class="form-label">属性类型 *</label>
                                <select class="glass-select-native" id="${prefix}PropertyType" required>
                                    <option value="">请选择</option>
                                    <option value="readonly">只读属性</option>
                                    <option value="hidden">隐藏属性</option>
                                    <option value="noindex">无内容索引属性</option>
                                </select>
                                <div class="form-text text-muted">选择要修改的属性类型</div>
                            </div>
                        </div>
                    `;
                    break;

                case 'CopyAndRename':
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-3">
                                <label for="${prefix}FileType" class="form-label">文件类型 *</label>
                                <select class="glass-select-native" id="${prefix}FileType" required>
                                    <option value="">请选择</option>
                                    <option value="file">文件</option>
                                    <option value="folder">文件夹</option>
                                </select>
                                <div class="form-text text-muted">选择要复制的对象类型</div>
                            </div>
                            <div class="col-md-3">
                                <label for="${prefix}SourcePath" class="form-label">源路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}SourcePath" placeholder="例如: C:\\源文件夹\\文件.txt" required>
                                <div class="form-text text-muted">要复制的文件或文件夹路径</div>
                            </div>
                            <div class="col-md-3">
                                <label for="${prefix}TargetPath" class="form-label">目标路径 *</label>
                                <input type="text" class="glass-input" id="${prefix}TargetPath" placeholder="例如: C:\\目标文件夹" required>
                                <div class="form-text text-muted">复制到的目标文件夹路径</div>
                            </div>
                            <div class="col-md-3">
                                <label for="${prefix}NewName" class="form-label">新名称 *</label>
                                <input type="text" class="glass-input" id="${prefix}NewName" placeholder="例如: 新文件名.txt" required>
                                <div class="form-text text-muted">复制后的新文件名</div>
                            </div>
                        </div>
                    `;
                    break;

                default:
                    configFieldsHtml = `
                        <div class="row">
                            <div class="col-md-12">
                                <label for="${prefix}CustomConfig" class="form-label">自定义配置</label>
                                <textarea class="glass-input" id="${prefix}CustomConfig" rows="3" placeholder="请输入操作的具体配置参数..."></textarea>
                                <div class="form-text text-muted">请描述此操作的具体配置要求</div>
                            </div>
                        </div>
                    `;
            }

            return `
                <div class="glass-card glass-card-info">
                    <div class="card-body">
                        <h6 class="text-primary mb-3">
                            <i class="bi bi-gear me-2"></i>${typeText}配置
                        </h6>
                        <div class="mb-3">
                            <label class="form-label">操作说明</label>
                            <div class="glass-input-readonly">
                                ${getOperationDescription(operationType)}
                            </div>
                        </div>
                        ${configFieldsHtml}
                    </div>
                </div>
            `;
        }

        // 获取操作描述
        function getOperationDescription(operationType) {
            const descriptions = {
                'Create': '创建新的文件或文件夹',
                'Copy': '复制现有的文件或文件夹到指定位置',
                'Move': '移动文件或文件夹到新位置',
                'Delete': '删除指定的文件或文件夹',
                'Rename': '重命名文件或文件夹',
                'CreateShortcut': '为文件或文件夹创建快捷方式',
                'ModifyProperties': '修改文件或文件夹的属性',
                'CopyAndRename': '复制文件或文件夹并重命名'
            };
            return descriptions[operationType] || '执行指定的操作';
        }

        // 生成详细配置参数显示
        function generateDetailConfigDisplay(config) {
            if (!config || !config.type) return null;

            let detailHtml = '';

            switch (config.type) {
                case 'Copy':
                    if (config.sourcePath && config.targetPath) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>源路径：</strong><br>
                                    <code class="text-info">${config.sourcePath}</code>
                                </div>
                                <div class="col-md-6">
                                    <strong>目标路径：</strong><br>
                                    <code class="text-success">${config.targetPath}</code>
                                </div>
                            </div>
                        `;
                    }
                    break;

                case 'Move':
                    if (config.sourcePath && config.targetPath) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>源路径：</strong><br>
                                    <code class="text-info">${config.sourcePath}</code>
                                </div>
                                <div class="col-md-6">
                                    <strong>目标路径：</strong><br>
                                    <code class="text-success">${config.targetPath}</code>
                                </div>
                            </div>
                        `;
                    }
                    break;

                case 'Create':
                    if (config.createType && config.itemName && config.createPath) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-4">
                                    <strong>创建类型：</strong><br>
                                    <span class="badge bg-primary">${config.createType === 'file' ? '文件' : '文件夹'}</span>
                                </div>
                                <div class="col-md-4">
                                    <strong>名称：</strong><br>
                                    <code class="text-warning">${config.itemName}</code>
                                </div>
                                <div class="col-md-4">
                                    <strong>创建路径：</strong><br>
                                    <code class="text-info">${config.createPath}</code>
                                </div>
                            </div>
                        `;
                    }
                    break;

                case 'Delete':
                    if (config.deletePath) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-8">
                                    <strong>删除路径：</strong><br>
                                    <code class="text-danger">${config.deletePath}</code>
                                </div>
                                <div class="col-md-4">
                                    <strong>确认状态：</strong><br>
                                    <span class="badge ${config.confirmed ? 'bg-success' : 'bg-warning'}">
                                        ${config.confirmed ? '已确认' : '未确认'}
                                    </span>
                                </div>
                            </div>
                        `;
                    }
                    break;

                case 'Rename':
                    if (config.filePath && config.oldName && config.newName) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-4">
                                    <strong>文件路径：</strong><br>
                                    <code class="text-info">${config.filePath}</code>
                                </div>
                                <div class="col-md-4">
                                    <strong>原名称：</strong><br>
                                    <code class="text-warning">${config.oldName}</code>
                                </div>
                                <div class="col-md-4">
                                    <strong>新名称：</strong><br>
                                    <code class="text-success">${config.newName}</code>
                                </div>
                            </div>
                        `;
                    }
                    break;

                case 'CreateShortcut':
                    if (config.targetPath && config.shortcutPath) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>目标路径：</strong><br>
                                    <code class="text-info">${config.targetPath}</code>
                                </div>
                                <div class="col-md-6">
                                    <strong>快捷方式路径：</strong><br>
                                    <code class="text-success">${config.shortcutPath}</code>
                                </div>
                            </div>

                        `;
                    }
                    break;

                case 'ModifyProperties':
                    if (config.filePath && config.propertyType) {
                        const propertyTypeText = {
                            'readonly': '只读属性',
                            'hidden': '隐藏属性',
                            'noindex': '无内容索引属性'
                        };

                        detailHtml = `
                            <div class="row">
                                <div class="col-md-8">
                                    <strong>文件路径：</strong><br>
                                    <code class="text-info">${config.filePath}</code>
                                </div>
                                <div class="col-md-4">
                                    <strong>属性类型：</strong><br>
                                    <span class="badge bg-primary">${propertyTypeText[config.propertyType] || config.propertyType}</span>
                                </div>
                            </div>
                        `;
                    }
                    break;

                case 'CopyAndRename':
                    if (config.sourcePath && config.targetPath && config.newName) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-4">
                                    <strong>源路径：</strong><br>
                                    <code class="text-info">${config.sourcePath}</code>
                                </div>
                                <div class="col-md-4">
                                    <strong>目标路径：</strong><br>
                                    <code class="text-success">${config.targetPath}</code>
                                </div>
                                <div class="col-md-4">
                                    <strong>新名称：</strong><br>
                                    <code class="text-warning">${config.newName}</code>
                                </div>
                            </div>
                        `;
                    }
                    break;

                default:
                    if (config.customConfig) {
                        detailHtml = `
                            <div class="row">
                                <div class="col-md-12">
                                    <strong>自定义配置：</strong><br>
                                    <div class="glass-input-readonly" style="white-space: pre-wrap;">${config.customConfig}</div>
                                </div>
                            </div>
                        `;
                    }
            }

            return detailHtml;
        }

        // 填充编辑配置字段
        function fillEditConfigFields(config, prefix) {
            if (!config) {
                console.warn('配置数据为空，无法填充字段');
                return;
            }

            try {
                console.log('填充配置字段，操作类型:', config.type, '配置数据:', config);

                switch (config.type) {
                    case 'Copy':
                    case 'Move':
                        // 使用正确的字段名：SourcePath, TargetPath
                        const sourcePathElement = document.getElementById(`${prefix}SourcePath`);
                        const targetPathElement = document.getElementById(`${prefix}TargetPath`);
                        if (sourcePathElement && config.SourcePath) {
                            sourcePathElement.value = config.SourcePath;
                            console.log('设置源路径:', config.SourcePath);
                        }
                        if (targetPathElement && config.TargetPath) {
                            targetPathElement.value = config.TargetPath;
                            console.log('设置目标路径:', config.TargetPath);
                        }
                        break;

                    case 'Create':
                        // 使用正确的字段名：TargetType, TargetName, TargetPath
                        const fileTypeElement = document.getElementById(`${prefix}FileType`);
                        const targetNameElement = document.getElementById(`${prefix}TargetName`);
                        const targetPathElement2 = document.getElementById(`${prefix}TargetPath`);
                        if (fileTypeElement && config.TargetType) {
                            fileTypeElement.value = config.TargetType.toLowerCase();
                            console.log('设置文件类型:', config.TargetType);
                        }
                        if (targetNameElement && config.TargetName) {
                            targetNameElement.value = config.TargetName;
                            console.log('设置目标名称:', config.TargetName);
                        }
                        if (targetPathElement2 && config.TargetPath) {
                            targetPathElement2.value = config.TargetPath;
                            console.log('设置目标路径:', config.TargetPath);
                        }
                        break;

                    case 'Delete':
                        // 使用正确的字段名：TargetPath
                        const deletePathElement = document.getElementById(`${prefix}TargetPath`);
                        if (deletePathElement && config.TargetPath) {
                            deletePathElement.value = config.TargetPath;
                            console.log('设置删除路径:', config.TargetPath);
                        }
                        break;

                    case 'Rename':
                        // 使用正确的字段名：TargetPath, OriginalName, NewName
                        const renamePathElement = document.getElementById(`${prefix}TargetPath`);
                        const originalNameElement = document.getElementById(`${prefix}OriginalName`);
                        const newNameElement = document.getElementById(`${prefix}NewName`);
                        if (renamePathElement && config.TargetPath) {
                            renamePathElement.value = config.TargetPath;
                            console.log('设置重命名路径:', config.TargetPath);
                        }
                        if (originalNameElement && config.OriginalName) {
                            originalNameElement.value = config.OriginalName;
                            console.log('设置原名称:', config.OriginalName);
                        }
                        if (newNameElement && config.NewName) {
                            newNameElement.value = config.NewName;
                            console.log('设置新名称:', config.NewName);
                        }
                        break;

                    case 'CreateShortcut':
                        // 使用正确的字段名：TargetPath, ShortcutLocation
                        const shortcutTargetElement = document.getElementById(`${prefix}TargetPath`);
                        const shortcutLocationElement = document.getElementById(`${prefix}ShortcutLocation`);
                        if (shortcutTargetElement && config.TargetPath) {
                            shortcutTargetElement.value = config.TargetPath;
                            console.log('设置快捷方式目标:', config.TargetPath);
                        }
                        if (shortcutLocationElement && config.ShortcutLocation) {
                            shortcutLocationElement.value = config.ShortcutLocation;
                            console.log('设置快捷方式位置:', config.ShortcutLocation);
                        }
                        break;

                    case 'ModifyProperties':
                        // 使用正确的字段名：TargetPath, PropertyType
                        const propTargetPathElement = document.getElementById(`${prefix}TargetPath`);
                        const propertyTypeElement = document.getElementById(`${prefix}PropertyType`);
                        if (propTargetPathElement && config.TargetPath) {
                            propTargetPathElement.value = config.TargetPath;
                            console.log('设置属性修改路径:', config.TargetPath);
                        }
                        if (propertyTypeElement && config.PropertyType) {
                            propertyTypeElement.value = config.PropertyType;
                            console.log('设置属性类型:', config.PropertyType);
                        }
                        break;

                    case 'CopyAndRename':
                        // 使用正确的字段名：SourcePath, TargetPath, NewName
                        const carSourceElement = document.getElementById(`${prefix}SourcePath`);
                        const carTargetElement = document.getElementById(`${prefix}TargetPath`);
                        const carNewNameElement = document.getElementById(`${prefix}NewName`);
                        if (carSourceElement && config.SourcePath) {
                            carSourceElement.value = config.SourcePath;
                            console.log('设置复制重命名源路径:', config.SourcePath);
                        }
                        if (carTargetElement && config.TargetPath) {
                            carTargetElement.value = config.TargetPath;
                            console.log('设置复制重命名目标路径:', config.TargetPath);
                        }
                        if (carNewNameElement && config.NewName) {
                            carNewNameElement.value = config.NewName;
                            console.log('设置复制重命名新名称:', config.NewName);
                        }
                        break;

                    default:
                        console.warn('未知的操作类型:', config.type);
                        break;
                }

                console.log('配置字段填充完成');
            } catch (error) {
                console.error('填充编辑配置字段失败:', error, '配置数据:', config);
            }
        }

        // 验证操作配置
        function validateOperationConfig(config) {
            const result = {
                isValid: true,
                errors: []
            };

            if (!config || !config.type) {
                result.isValid = false;
                result.errors.push('操作类型不能为空');
                return result;
            }

            switch (config.type) {
                case 'Copy':
                case 'Move':
                    if (!config.fileType) {
                        result.isValid = false;
                        result.errors.push('文件类型不能为空');
                    }
                    if (!config.sourcePath || !config.sourcePath.trim()) {
                        result.isValid = false;
                        result.errors.push('源路径不能为空');
                    }
                    if (!config.targetPath || !config.targetPath.trim()) {
                        result.isValid = false;
                        result.errors.push('目标路径不能为空');
                    }
                    break;

                case 'Create':
                    if (!config.fileType) {
                        result.isValid = false;
                        result.errors.push('文件类型不能为空');
                    }
                    if (!config.itemName || !config.itemName.trim()) {
                        result.isValid = false;
                        result.errors.push('项目名称不能为空');
                    }
                    if (!config.createPath || !config.createPath.trim()) {
                        result.isValid = false;
                        result.errors.push('创建路径不能为空');
                    }
                    break;

                case 'Delete':
                    if (!config.fileType) {
                        result.isValid = false;
                        result.errors.push('文件类型不能为空');
                    }
                    if (!config.deletePath || !config.deletePath.trim()) {
                        result.isValid = false;
                        result.errors.push('删除路径不能为空');
                    }
                    break;

                case 'Rename':
                    if (!config.fileType) {
                        result.isValid = false;
                        result.errors.push('文件类型不能为空');
                    }
                    if (!config.filePath || !config.filePath.trim()) {
                        result.isValid = false;
                        result.errors.push('文件路径不能为空');
                    }
                    if (!config.oldName || !config.oldName.trim()) {
                        result.isValid = false;
                        result.errors.push('原名称不能为空');
                    }
                    if (!config.newName || !config.newName.trim()) {
                        result.isValid = false;
                        result.errors.push('新名称不能为空');
                    }
                    break;

                case 'CreateShortcut':
                    if (!config.fileType) {
                        result.isValid = false;
                        result.errors.push('文件类型不能为空');
                    }
                    if (!config.targetPath || !config.targetPath.trim()) {
                        result.isValid = false;
                        result.errors.push('目标路径不能为空');
                    }
                    if (!config.shortcutPath || !config.shortcutPath.trim()) {
                        result.isValid = false;
                        result.errors.push('快捷方式路径不能为空');
                    }
                    break;

                case 'ModifyProperties':
                    if (!config.fileType) {
                        result.isValid = false;
                        result.errors.push('文件类型不能为空');
                    }
                    if (!config.filePath || !config.filePath.trim()) {
                        result.isValid = false;
                        result.errors.push('文件路径不能为空');
                    }
                    if (!config.propertyType) {
                        result.isValid = false;
                        result.errors.push('属性类型不能为空');
                    }
                    break;

                case 'CopyAndRename':
                    if (!config.fileType) {
                        result.isValid = false;
                        result.errors.push('文件类型不能为空');
                    }
                    if (!config.sourcePath || !config.sourcePath.trim()) {
                        result.isValid = false;
                        result.errors.push('源路径不能为空');
                    }
                    if (!config.targetPath || !config.targetPath.trim()) {
                        result.isValid = false;
                        result.errors.push('目标路径不能为空');
                    }
                    if (!config.newName || !config.newName.trim()) {
                        result.isValid = false;
                        result.errors.push('新名称不能为空');
                    }
                    break;
            }

            return result;
        }





        // 事件监听器
        document.addEventListener('change', function(e) {
            // 操作类型变化
            if (e.target.id === 'newOperationType') {
                updateOperationTypeConfig('new');
            }
            if (e.target.id === 'editOperationType') {
                updateOperationTypeConfig('edit');
            }
        });

        // 输入变化时更新预览
        document.addEventListener('input', function(e) {
            if (e.target.id && e.target.id.includes('Operation')) {
                const prefix = e.target.id.includes('newOperation') ? 'new' : 'edit';
                updateOperationPreview(prefix);
            }
        });

        // 验证关键函数是否正确定义
        console.log('函数验证:');
        console.log('showCreateOperationPointModal:', typeof showCreateOperationPointModal);
        console.log('quickCreateQuestion:', typeof quickCreateQuestion);
        console.log('quickCreateOperationPoint:', typeof quickCreateOperationPoint);
        console.log('toggleSimplifiedQuestionStatus:', typeof toggleSimplifiedQuestionStatus);
    </script>

    <style>
        /* Markdown编辑器样式 */
        .markdown-editor-container {
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            overflow: hidden;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .markdown-toolbar {
            padding: 8px 12px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(255, 255, 255, 0.05);
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 4px;
        }

        .markdown-toolbar .btn {
            padding: 4px 8px;
            font-size: 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.8);
            transition: all 0.3s ease;
        }

        .markdown-toolbar .btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            transform: translateY(-1px);
        }

        .markdown-editor {
            border: none !important;
            border-radius: 0 !important;
            background: transparent !important;
            resize: vertical;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            min-height: 200px;
        }

        .markdown-editor:focus {
            box-shadow: none !important;
            outline: none !important;
        }

        .markdown-preview {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: rgba(255, 255, 255, 0.9);
        }

        .markdown-preview h1, .markdown-preview h2, .markdown-preview h3 {
            color: #4fc3f7;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
        }

        .markdown-preview h1 {
            font-size: 1.5rem;
            border-bottom: 2px solid rgba(79, 195, 247, 0.3);
            padding-bottom: 0.3rem;
        }

        .markdown-preview h2 {
            font-size: 1.3rem;
            border-bottom: 1px solid rgba(79, 195, 247, 0.2);
            padding-bottom: 0.2rem;
        }

        .markdown-preview h3 {
            font-size: 1.1rem;
        }

        .markdown-preview code {
            background: rgba(0, 0, 0, 0.3);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            color: #81c784;
        }

        .markdown-preview pre {
            background: rgba(0, 0, 0, 0.4);
            padding: 12px;
            border-radius: 8px;
            overflow-x: auto;
            border-left: 4px solid #4fc3f7;
        }

        .markdown-preview pre code {
            background: transparent;
            padding: 0;
            color: #a5d6a7;
        }

        .markdown-preview ul, .markdown-preview ol {
            padding-left: 1.5rem;
        }

        .markdown-preview li {
            margin-bottom: 0.3rem;
        }

        .markdown-preview a {
            color: #4fc3f7;
            text-decoration: none;
        }

        .markdown-preview a:hover {
            text-decoration: underline;
        }

        .markdown-preview strong {
            color: #fff;
            font-weight: 600;
        }

        .markdown-preview em {
            color: #ffcc80;
            font-style: italic;
        }

        .markdown-preview blockquote {
            border-left: 4px solid #4fc3f7;
            padding-left: 1rem;
            margin: 1rem 0;
            color: rgba(255, 255, 255, 0.7);
            font-style: italic;
        }

        /* 响应式设计 */
        @@media (max-width: 768px) {
            .markdown-toolbar {
                flex-direction: column;
                align-items: stretch;
            }

            .markdown-toolbar .btn-group {
                margin-bottom: 4px;
            }
        }

        /* 表格字体颜色修复 */
        .table {
            color: #333 !important;
        }

        .table th {
            color: #333 !important;
            background-color: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .table td {
            color: #333 !important;
            border-color: rgba(255, 255, 255, 0.1);
        }

        .table-striped > tbody > tr:nth-of-type(odd) > td {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .table-hover > tbody > tr:hover > td {
            background-color: rgba(255, 255, 255, 0.1);
            color: #000 !important;
        }

        /* 确保badge和按钮的颜色正确 */
        .badge {
            color: white !important;
        }

        .btn-group .btn {
            color: white !important;
        }

        .btn-info {
            background-color: #17a2b8 !important;
            border-color: #17a2b8 !important;
        }

        .btn-primary {
            background-color: #007bff !important;
            border-color: #007bff !important;
        }

        .btn-success {
            background-color: #28a745 !important;
            border-color: #28a745 !important;
        }

        .btn-secondary {
            background-color: #6c757d !important;
            border-color: #6c757d !important;
        }

        .btn-danger {
            background-color: #dc3545 !important;
            border-color: #dc3545 !important;
        }

        .btn-warning {
            background-color: #ffc107 !important;
            border-color: #ffc107 !important;
            color: #000 !important;
        }

        /* 表格内的文本颜色 */
        .table .text-muted {
            color: #666 !important;
        }

        .table strong {
            color: #000 !important;
        }

        .table small {
            color: #666 !important;
        }

        /* 题目要求显示样式 */
        .question-requirements {
            max-width: 300px;
            max-height: 60px;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            line-height: 1.4;
            color: #333 !important;
        }

        .question-requirements:hover {
            max-height: none;
            overflow: visible;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 8px;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 10;
        }

        /* 只读输入框样式 */
        .glass-input-readonly {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 8px 12px;
            color: #333 !important;
            min-height: 38px;
            display: flex;
            align-items: center;
        }

        .glass-input-readonly .badge {
            color: white !important;
        }

        /* 分配题目下拉框字体颜色修复 */
        #assignQuestionSelect {
            background-color: rgba(255, 255, 255, 0.9) !important;
            color: #333 !important;
            border: 1px solid rgba(0, 0, 0, 0.2) !important;
        }

        #assignQuestionSelect option {
            background-color: white !important;
            color: #333 !important;
        }

        #assignQuestionSelect:focus {
            background-color: white !important;
            color: #333 !important;
            border-color: #007bff !important;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
        }

        /* 批量分配模态框中的下拉框 */
        #bulkAssignQuestionId {
            background-color: rgba(255, 255, 255, 0.9) !important;
            color: #333 !important;
            border: 1px solid rgba(0, 0, 0, 0.2) !important;
        }

        #bulkAssignQuestionId option {
            background-color: white !important;
            color: #333 !important;
        }

        #bulkAssignQuestionId:focus {
            background-color: white !important;
            color: #333 !important;
            border-color: #007bff !important;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
        }


    </style>
}
