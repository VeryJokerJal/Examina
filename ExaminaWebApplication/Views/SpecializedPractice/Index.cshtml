@model IEnumerable<ExaminaWebApplication.Models.Practice.SpecializedPractice>
@{
    ViewData["Title"] = "专项练习管理";
}

<!-- 页面标题和操作按钮 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-lightning me-2 text-warning"></i>专项练习管理
        </h1>
        <p class="text-muted mb-0">单科目专项练习管理</p>
    </div>
    <div>
        <a href="@Url.Action("Create")" class="glass-btn glass-btn-primary">
            <i class="bi bi-plus-circle"></i> 创建专项练习
        </a>
    </div>
</div>

<!-- 筛选和搜索 -->
<div class="glass-card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-3">
                <label for="subjectFilter" class="form-label">科目筛选</label>
                <select data-glass-select-native data-placeholder="全部科目" id="subjectFilter" onchange="filterPractices()">
                    <option value="">全部科目</option>
                    <option value="4">Windows操作</option>
                    <option value="5">C#编程</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="statusFilter" class="form-label">状态筛选</label>
                <select data-glass-select-native data-placeholder="全部状态" id="statusFilter" onchange="filterPractices()">
                    <option value="">全部状态</option>
                    <option value="1">草稿</option>
                    <option value="2">已发布</option>
                    <option value="3">已暂停</option>
                    <option value="4">已归档</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="searchInput" class="form-label">搜索练习</label>
                <input type="text" class="glass-input" id="searchInput" placeholder="输入练习名称或描述..." onkeyup="filterPractices()">
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <div>
                    <button class="glass-btn w-100" onclick="resetFilters()">
                        <i class="bi bi-arrow-clockwise"></i> 重置
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 统计信息 -->
<div class="row g-4 mb-4">
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-lightning text-warning mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-warning">@Model.Count()</h4>
                <p class="text-muted mb-0">总练习数</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-check-circle text-success mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-success">@Model.Count(p => p.Status == ExaminaWebApplication.Models.Practice.PracticeStatus.Published)</h4>
                <p class="text-muted mb-0">已发布</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-pencil text-info mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-info">@Model.Count(p => p.Status == ExaminaWebApplication.Models.Practice.PracticeStatus.Draft)</h4>
                <p class="text-muted mb-0">草稿</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="glass-card text-center">
            <div class="card-body">
                <i class="bi bi-question-circle text-primary mb-2" style="font-size: 2rem;"></i>
                <h4 class="fw-bold text-primary">@Model.Sum(p => p.Questions.Count)</h4>
                <p class="text-muted mb-0">总题目数</p>
            </div>
        </div>
    </div>
</div>

<!-- 专项练习列表 -->
<div class="glass-card">
    <div class="card-header glass-card-header">
        <h5 class="mb-0">
            <i class="bi bi-list-ul me-2"></i>专项练习列表
        </h5>
    </div>
    <div class="card-body">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="glass-table" id="practicesTable" data-glass-table>
                    <colgroup>
                        <col style="width:50px" />
                        <col />
                        <col style="width:100px" />
                        <col style="width:80px" />
                        <col style="width:80px" />
                        <col style="width:80px" />
                        <col style="width:100px" />
                        <col style="width:120px" />
                        <col style="width:150px" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th>序号</th>
                            <th>练习名称</th>
                            <th>科目</th>
                            <th>状态</th>
                            <th>题目数</th>
                            <th>总分</th>
                            <th>时长</th>
                            <th>创建时间</th>
                            <th class="text-end">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{int index = 1;}
                        @foreach (var practice in Model)
                        {
                            <tr data-subject="@((int)practice.SubjectType)" data-status="@((int)practice.Status)" data-name="@practice.Name.ToLower()" data-description="@(practice.Description?.ToLower() ?? "")">
                                <td>@index</td>
                                <td>
                                    <div class="fw-bold">@practice.Name</div>
                                    @if (!string.IsNullOrEmpty(practice.Description))
                                    {
                                        <div class="text-muted small">@(practice.Description.Length > 50 ? practice.Description.Substring(0, 50) + "..." : practice.Description)</div>
                                    }
                                </td>
                                <td>
                                    <span class="badge @GetSubjectBadgeClass(practice.SubjectType)">
                                        @GetSubjectText(practice.SubjectType)
                                    </span>
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(practice.Status)">
                                        @GetStatusText(practice.Status)
                                    </span>
                                </td>
                                <td class="text-center">
                                    <strong class="text-primary">@practice.Questions.Count</strong>
                                </td>
                                <td class="text-center">
                                    <strong class="text-success">@practice.TotalScore</strong>
                                </td>
                                <td class="text-center">@practice.DurationMinutes 分</td>
                                <td class="text-center">
                                    <small class="text-muted">@practice.CreatedAt.ToString("yyyy-MM-dd")</small>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="@Url.Action("Details", new { id = practice.Id })" class="glass-btn glass-btn-primary btn-sm">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        @if (practice.Status == ExaminaWebApplication.Models.Practice.PracticeStatus.Draft)
                                        {
                                            <a href="@Url.Action("Edit", new { id = practice.Id })" class="glass-btn glass-btn-warning btn-sm">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <button class="glass-btn glass-btn-success btn-sm" onclick="publishPractice(@practice.Id)">
                                                <i class="bi bi-check-circle"></i>
                                            </button>
                                            <button class="glass-btn glass-btn-danger btn-sm" onclick="deletePractice(@practice.Id)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                            index++;
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-lightning text-muted" style="font-size: 4rem;"></i>
                <h5 class="text-muted mt-3">暂无专项练习</h5>
                <p class="text-muted">点击上方按钮创建第一个专项练习</p>
                <a href="@Url.Action("Create")" class="glass-btn glass-btn-primary">
                    <i class="bi bi-plus-circle"></i> 创建专项练习
                </a>
            </div>
        }
    </div>
</div>

@functions {
    private string GetSubjectBadgeClass(ExaminaWebApplication.Models.Exam.SubjectType type)
    {
        return type switch
        {
            ExaminaWebApplication.Models.Exam.SubjectType.Windows => "bg-primary",
            ExaminaWebApplication.Models.Exam.SubjectType.CSharp => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetSubjectText(ExaminaWebApplication.Models.Exam.SubjectType type)
    {
        return type switch
        {
            ExaminaWebApplication.Models.Exam.SubjectType.Windows => "Windows",
            ExaminaWebApplication.Models.Exam.SubjectType.CSharp => "C#",
            _ => "未知"
        };
    }

    private string GetStatusBadgeClass(ExaminaWebApplication.Models.Practice.PracticeStatus status)
    {
        return status switch
        {
            ExaminaWebApplication.Models.Practice.PracticeStatus.Draft => "bg-secondary",
            ExaminaWebApplication.Models.Practice.PracticeStatus.Published => "bg-success",
            ExaminaWebApplication.Models.Practice.PracticeStatus.Suspended => "bg-warning",
            ExaminaWebApplication.Models.Practice.PracticeStatus.Archived => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(ExaminaWebApplication.Models.Practice.PracticeStatus status)
    {
        return status switch
        {
            ExaminaWebApplication.Models.Practice.PracticeStatus.Draft => "草稿",
            ExaminaWebApplication.Models.Practice.PracticeStatus.Published => "已发布",
            ExaminaWebApplication.Models.Practice.PracticeStatus.Suspended => "已暂停",
            ExaminaWebApplication.Models.Practice.PracticeStatus.Archived => "已归档",
            _ => "未知"
        };
    }
}

@section Scripts {
    <script>
        // 筛选专项练习
        function filterPractices() {
            const subjectFilter = document.getElementById('subjectFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const searchInput = document.getElementById('searchInput').value.toLowerCase();
            
            const rows = document.querySelectorAll('#practicesTable tbody tr');
            
            rows.forEach(row => {
                const subject = row.getAttribute('data-subject');
                const status = row.getAttribute('data-status');
                const name = row.getAttribute('data-name');
                const description = row.getAttribute('data-description');
                
                let showRow = true;
                
                // 科目筛选
                if (subjectFilter && subject !== subjectFilter) {
                    showRow = false;
                }
                
                // 状态筛选
                if (statusFilter && status !== statusFilter) {
                    showRow = false;
                }
                
                // 搜索筛选
                if (searchInput && !name.includes(searchInput) && !description.includes(searchInput)) {
                    showRow = false;
                }
                
                row.style.display = showRow ? '' : 'none';
            });
        }

        // 重置筛选
        function resetFilters() {
            document.getElementById('subjectFilter').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('searchInput').value = '';
            filterPractices();
        }

        // 发布专项练习
        async function publishPractice(id) {
            if (!confirm('确定要发布这个专项练习吗？发布后将无法修改基本信息。')) {
                return;
            }

            try {
                const response = await fetch(`@Url.Action("Publish")/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                });

                const result = await response.json();
                
                if (result.success) {
                    showNotification(result.message, 'success');
                    location.reload();
                } else {
                    showNotification(result.message, 'error');
                }
            } catch (error) {
                console.error('发布专项练习失败:', error);
                showNotification('发布失败，请重试。', 'error');
            }
        }

        // 删除专项练习
        async function deletePractice(id) {
            if (!confirm('确定要删除这个专项练习吗？此操作不可撤销。')) {
                return;
            }

            try {
                const response = await fetch(`@Url.Action("Delete")/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                });

                const result = await response.json();
                
                if (result.success) {
                    showNotification(result.message, 'success');
                    location.reload();
                } else {
                    showNotification(result.message, 'error');
                }
            } catch (error) {
                console.error('删除专项练习失败:', error);
                showNotification('删除失败，请重试。', 'error');
            }
        }
    </script>
}
