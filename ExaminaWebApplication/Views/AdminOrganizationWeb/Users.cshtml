@model UsersViewModel
@{
    ViewData["Title"] = "用户管理";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="glass-title">
                        <i class="bi bi-people me-2"></i>用户管理
                    </h2>
                    <p class="text-muted">管理系统中的所有注册用户</p>
                </div>
                <div>
                    <a href="@Url.Action("Index", "AdminOrganizationWeb")" class="glass-btn">
                        <i class="bi bi-arrow-left me-2"></i>返回组织管理
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- 用户统计信息 -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-people-fill text-primary" style="font-size: 2rem;"></i>
                    <h4 class="mt-2">@Model.Users.Count</h4>
                    <p class="text-muted mb-0">总用户数</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-person-check-fill text-success" style="font-size: 2rem;"></i>
                    <h4 class="mt-2">@Model.Users.Count(u => u.IsActive)</h4>
                    <p class="text-muted mb-0">活跃用户</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-person-x-fill text-danger" style="font-size: 2rem;"></i>
                    <h4 class="mt-2">@Model.Users.Count(u => !u.IsActive)</h4>
                    <p class="text-muted mb-0">非活跃用户</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="glass-card">
                <div class="card-body text-center">
                    <i class="bi bi-telephone-fill text-info" style="font-size: 2rem;"></i>
                    <h4 class="mt-2">@Model.Users.Count(u => !string.IsNullOrEmpty(u.PhoneNumber))</h4>
                    <p class="text-muted mb-0">已设置手机号</p>
                </div>
            </div>
        </div>
    </div>

    <!-- 用户列表 -->
    <div class="glass-card">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-list-ul me-2"></i>用户列表
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Users.Any())
            {
                <div class="table-responsive">
                    <table class="table glass-table">
                        <thead>
                            <tr>
                                <th>用户名</th>
                                <th>真实姓名</th>
                                <th>手机号</th>
                                <th>邮箱</th>
                                <th>注册时间</th>
                                <th>状态</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model.Users.OrderByDescending(u => u.CreatedAt))
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-person-circle me-2"></i>
                                            <span>@user.Username</span>
                                        </div>
                                    </td>
                                    <td>
                                        <span>@(user.RealName ?? "未设置")</span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                        {
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-telephone me-1"></i>
                                                <span>@user.PhoneNumber</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">未设置</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(user.Email))
                                        {
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-envelope me-1"></i>
                                                <span>@user.Email</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">未设置</span>
                                        }
                                    </td>
                                    <td>
                                        <small>@user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                    </td>
                                    <td>
                                        @if (user.IsActive)
                                        {
                                            <span class="badge bg-success">
                                                <i class="bi bi-check-circle me-1"></i>活跃
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">
                                                <i class="bi bi-x-circle me-1"></i>非活跃
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-outline-primary"
                                                onclick="showEditUserModal(@user.Id, '@(user.RealName ?? "")', '@(user.PhoneNumber ?? "")')"
                                                title="编辑用户信息">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                    <h6 class="text-muted mt-3">暂无用户</h6>
                    <p class="text-muted">系统中还没有注册用户</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- 编辑用户信息模态框 -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content glass-modal">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-person-gear me-2"></i>编辑用户信息
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <div class="mb-3">
                        <label for="editUserRealName" class="form-label">
                            <i class="bi bi-person me-1"></i>真实姓名
                        </label>
                        <input type="text" 
                               id="editUserRealName" 
                               class="form-control glass-input" 
                               placeholder="请输入真实姓名"
                               maxlength="50">
                    </div>
                    
                    <div class="mb-3">
                        <label for="editUserPhoneNumber" class="form-label">
                            <i class="bi bi-telephone me-1"></i>手机号
                        </label>
                        <input type="tel" 
                               id="editUserPhoneNumber" 
                               class="form-control glass-input" 
                               placeholder="请输入手机号"
                               maxlength="11">
                        <div class="form-text">请输入11位手机号码</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-2"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="saveUserInfo()">
                    <i class="bi bi-check-circle me-2"></i>保存
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // 用户信息编辑功能
        let currentEditingUserId = null;

        function showEditUserModal(userId, realName, phoneNumber) {
            currentEditingUserId = userId;
            
            // 填充表单数据
            document.getElementById('editUserRealName').value = realName || '';
            document.getElementById('editUserPhoneNumber').value = phoneNumber || '';
            
            // 显示模态框
            const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
            modal.show();
        }

        async function saveUserInfo() {
            if (!currentEditingUserId) {
                showNotification('编辑会话已失效，请重新打开编辑窗口', 'warning');
                return;
            }

            const realName = document.getElementById('editUserRealName').value.trim();
            const phoneNumber = document.getElementById('editUserPhoneNumber').value.trim();

            // 验证真实姓名
            if (!realName) {
                showNotification('请输入真实姓名', 'warning');
                return;
            }

            // 验证手机号格式（如果填写了）
            if (phoneNumber && !/^1[3-9]\d{9}$/.test(phoneNumber)) {
                showNotification('请输入正确的手机号格式', 'warning');
                return;
            }

            try {
                const response = await fetch('/Admin/Users/UpdateUserInfo', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        userId: currentEditingUserId,
                        realName: realName,
                        phoneNumber: phoneNumber || null
                    })
                });

                if (response.ok) {
                    showNotification('用户信息更新成功', 'success');
                    
                    // 关闭模态框
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
                    modal.hide();
                    
                    // 刷新页面以显示更新后的数据
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    const errorData = await response.json();
                    showNotification(errorData.message || '更新失败，请稍后重试', 'danger');
                }
            } catch (error) {
                console.error('更新用户信息失败:', error);
                showNotification('更新失败，请稍后重试', 'danger');
            }
        }

        // 通知显示函数
        function showNotification(message, type) {
            // 这里可以使用 Bootstrap Toast 或其他通知组件
            alert(message);
        }
    </script>
}
