@model OrganizationDetailsViewModel
@using ExaminaWebApplication.Controllers
@using ExaminaWebApplication.Models.Organization
@using ExaminaWebApplication.Models.Organization.Dto
@{
    ViewData["Title"] = $"组织详情 - {Model.Organization.Name}";
    Layout = "_Layout";
}

<!-- 页面标题 -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2>
            <i class="bi bi-building me-2"></i>
            @Model.Organization.Name
        </h2>
        <p class="text-muted mb-0">
            创建于 @Model.Organization.CreatedAt.ToString("yyyy年MM月dd日")
        </p>
    </div>
    <div>
        <a href="/Admin/Organization/Edit/@Model.Organization.Id" class="glass-btn glass-btn-primary me-2">
            <i class="bi bi-pencil me-2"></i>编辑
        </a>
        <a href="/Admin/Organization" class="glass-btn">
            <i class="bi bi-arrow-left me-2"></i>返回列表
        </a>
    </div>
</div>

<!-- 成功/错误消息 -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success glass-alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger glass-alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- 组织信息概览 -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="glass-card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-info-circle me-2"></i>基本信息
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">组织名称：</dt>
                            <dd class="col-sm-8">@Model.Organization.Name</dd>
                            

                            
                            <dt class="col-sm-4">创建者：</dt>
                            <dd class="col-sm-8">@Model.Organization.CreatorUsername</dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">创建时间：</dt>
                            <dd class="col-sm-8">@Model.Organization.CreatedAt.ToString("yyyy-MM-dd HH:mm")</dd>
                            
                            <dt class="col-sm-4">状态：</dt>
                            <dd class="col-sm-8">
                                @if (Model.Organization.IsActive)
                                {
                                    <span class="badge bg-success">
                                        <i class="bi bi-check-circle me-1"></i>激活
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">
                                        <i class="bi bi-x-circle me-1"></i>停用
                                    </span>
                                }
                            </dd>
                            
                            <dt class="col-sm-4">成员数量：</dt>
                            <dd class="col-sm-8">
                                <span class="badge bg-primary">@Model.Members.Count</span>
                            </dd>
                        </dl>
                    </div>
                </div>
                

            </div>
        </div>
    </div>
    
    <!-- 统计信息 -->
    <div class="col-md-4">
        <div class="glass-card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-graph-up me-2"></i>统计信息
                </h6>
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-4">
                        <i class="bi bi-people text-primary" style="font-size: 1.5rem;"></i>
                        <h5 class="mt-1 mb-0">@(Model.Members?.Count ?? 0)</h5>
                        <small class="text-muted">总成员</small>
                    </div>
                    <div class="col-4">
                        <i class="bi bi-key text-success" style="font-size: 1.5rem;"></i>
                        <h5 class="mt-1 mb-0">@Model.InvitationCodes.Count</h5>
                        <small class="text-muted">邀请码</small>
                    </div>
                    <div class="col-4">
                        <i class="bi bi-check-circle text-info" style="font-size: 1.5rem;"></i>
                        <h5 class="mt-1 mb-0">@Model.InvitationCodes.Count(ic => ic.IsAvailable)</h5>
                        <small class="text-muted">可用码</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 邀请码管理 -->
<div class="glass-card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-key me-2"></i>邀请码管理
        </h5>
        <button type="button" class="glass-btn glass-btn-primary btn-sm" onclick="showCreateInvitationCodeModal()">
            <i class="bi bi-plus-circle me-1"></i>生成邀请码
        </button>
    </div>
    <div class="card-body">
        @if (Model.InvitationCodes.Any())
        {
            <div>
                <table class="table glass-table">
                    <thead>
                        <tr>
                            <th>邀请码</th>
                            <th>创建时间</th>
                            <th>过期时间</th>
                            <th>使用情况</th>
                            <th>状态</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var code in Model.InvitationCodes.OrderByDescending(ic => ic.CreatedAt))
                        {
                            <tr>
                                <td>
                                    <code class="text-primary">@code.Code</code>
                                </td>
                                <td>
                                    <small>@code.CreatedAt.ToString("MM-dd HH:mm")</small>
                                </td>
                                <td>
                                    @if (code.ExpiresAt.HasValue)
                                    {
                                        <small>@code.ExpiresAt.Value.ToString("MM-dd HH:mm")</small>
                                    }
                                    else
                                    {
                                        <small class="text-muted">永不过期</small>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-secondary">
                                        @code.UsageCount@(code.MaxUsage.HasValue ? $"/{code.MaxUsage}" : "")
                                    </span>
                                </td>
                                <td>
                                    @if (code.IsAvailable)
                                    {
                                        <span class="badge bg-success">可用</span>
                                    }
                                    else if (!code.IsActive)
                                    {
                                        <span class="badge bg-danger">已停用</span>
                                    }
                                    else if (code.IsExpired)
                                    {
                                        <span class="badge bg-warning">已过期</span>
                                    }
                                    else if (code.IsMaxUsageReached)
                                    {
                                        <span class="badge bg-info">已用完</span>
                                    }
                                </td>
                                <td>
                                    @if (code.IsActive)
                                    {
                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                onclick="deactivateInvitationCode(@code.Id, '@code.Code')">
                                            <i class="bi bi-x-circle"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-3">
                <i class="bi bi-key text-muted" style="font-size: 2rem;"></i>
                <p class="text-muted mt-2 mb-0">暂无邀请码</p>
                <button type="button" class="glass-btn glass-btn-primary btn-sm mt-2" onclick="showCreateInvitationCodeModal()">
                    <i class="bi bi-plus-circle me-1"></i>生成第一个邀请码
                </button>
            </div>
        }
    </div>
</div>

<!-- 成员列表 -->
<div class="glass-card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-people me-2"></i>成员列表
        </h5>
        <button type="button" class="glass-btn glass-btn-primary btn-sm" onclick="showBatchAddPhoneModal()">
            <i class="bi bi-telephone-plus me-1"></i>批量添加手机号
        </button>
    </div>
    <div class="card-body">

        @if (Model.Members != null && Model.Members.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>用户名</th>
                            <th>真实姓名</th>
                            <th>学号</th>
                            <th>手机号</th>
                            <th>加入时间</th>
                            <th>邀请码</th>
                            <th>状态</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var member in Model.Members.OrderByDescending(m => m.JoinedAt))
                        {
                            <tr>
                                <td>
                                    <i class="bi bi-person me-1"></i>@member.StudentUsername
                                </td>
                                <td>@(member.StudentRealName ?? "-")</td>
                                <td>@(member.StudentId_Number ?? "-")</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <span id="phone-display-@member.StudentId" class="me-2">
                                            @if (!string.IsNullOrEmpty(member.StudentPhoneNumber))
                                            {
                                                <i class="bi bi-telephone me-1"></i>@member.StudentPhoneNumber
                                            }
                                            else
                                            {
                                                <span class="text-muted">未设置</span>
                                            }
                                        </span>
                                        <div id="phone-edit-@member.StudentId" style="display: none;" class="d-flex align-items-center">
                                            <input type="text" class="form-control form-control-sm me-2"
                                                   id="phone-input-@member.StudentId"
                                                   value="@(member.StudentPhoneNumber ?? "")"
                                                   placeholder="请输入手机号"
                                                   maxlength="20" style="width: 150px;" />
                                            <button type="button" class="btn btn-sm btn-success me-1"
                                                    onclick="savePhoneNumber(@member.StudentId)">
                                                <i class="bi bi-check"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-secondary"
                                                    onclick="cancelEditPhone(@member.StudentId)">
                                                <i class="bi bi-x"></i>
                                            </button>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <small>@member.JoinedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                </td>
                                <td>
                                    <code class="text-muted">@member.InvitationCode</code>
                                </td>
                                <td>
                                    @if (member.IsActive)
                                    {
                                        <span class="badge bg-success">
                                            <i class="bi bi-check-circle me-1"></i>激活
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">
                                            <i class="bi bi-x-circle me-1"></i>已退出
                                        </span>
                                    }
                                </td>
                                <td>
                                    @if (member.IsActive)
                                    {
                                        <button type="button" class="btn btn-sm btn-outline-primary"
                                                onclick="editPhoneNumber(@member.StudentId)"
                                                title="编辑手机号">
                                            <i class="bi bi-telephone"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                <h6 class="text-muted mt-3">暂无成员</h6>
                <p class="text-muted">分享邀请码给用户，让他们加入组织</p>
            </div>
        }
    </div>
</div>

<!-- 生成邀请码模态框 -->
<div class="modal fade" id="createInvitationCodeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content glass-card">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-key me-2"></i>生成邀请码
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createInvitationCodeForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="expiresAt" class="form-label">
                            <i class="bi bi-calendar me-1"></i>过期时间
                        </label>
                        <input type="datetime-local" id="expiresAt" name="expiresAt" class="form-control glass-input" />
                        <div class="form-text">留空表示永不过期</div>
                    </div>

                    <div class="mb-3">
                        <label for="maxUsage" class="form-label">
                            <i class="bi bi-people me-1"></i>最大使用次数
                        </label>
                        <input type="number" id="maxUsage" name="maxUsage" class="form-control glass-input" min="1" />
                        <div class="form-text">留空表示无限制</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="glass-btn" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>取消
                    </button>
                    <button type="submit" class="glass-btn glass-btn-primary">
                        <i class="bi bi-check-circle me-2"></i>生成
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- 批量添加手机号模态框 -->
<div class="modal fade" id="batchAddPhoneModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-modal">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-telephone-plus me-2"></i>批量添加手机号
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    为没有手机号的成员批量添加手机号码。每行一个，格式：用户名,手机号
                </div>

                <div class="mb-3">
                    <label for="phoneData" class="form-label">
                        <i class="bi bi-list me-1"></i>手机号数据
                    </label>
                    <textarea id="phoneData" class="form-control glass-input" rows="8"
                              placeholder="示例：&#10;张三,13800138000&#10;李四,13900139000&#10;王五,13700137000"></textarea>
                    <div class="form-text">格式：用户名,手机号（每行一个）</div>
                </div>

                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="overwriteExisting">
                        <label class="form-check-label" for="overwriteExisting">
                            覆盖已有手机号
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="glass-btn" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-2"></i>取消
                </button>
                <button type="button" class="glass-btn glass-btn-primary" onclick="processBatchAddPhone()">
                    <i class="bi bi-check-circle me-2"></i>批量添加
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // 显示生成邀请码模态框
        function showCreateInvitationCodeModal() {
            const modal = new bootstrap.Modal(document.getElementById('createInvitationCodeModal'));
            modal.show();
        }

        // 处理生成邀请码表单提交
        document.getElementById('createInvitationCodeForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;

            try {
                submitBtn.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>生成中...';
                submitBtn.disabled = true;

                const response = await fetch('/Admin/Organization/@Model.Organization.Id/CreateInvitationCode', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    showNotification('邀请码生成成功', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showNotification('生成失败，请稍后重试', 'danger');
                }
            } catch (error) {
                console.error('生成邀请码失败:', error);
                showNotification('生成失败，请稍后重试', 'danger');
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // 停用邀请码
        async function deactivateInvitationCode(invitationCodeId, code) {
            if (confirm(`确定要停用邀请码"${code}"吗？\n\n停用后该邀请码将无法使用。`)) {
                try {
                    const response = await fetch(`/Admin/Organization/DeactivateInvitationCode/${invitationCodeId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify({ organizationId: @Model.Organization.Id })
                    });

                    if (response.ok) {
                        showNotification('邀请码已停用', 'success');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        showNotification('停用失败，请稍后重试', 'danger');
                    }
                } catch (error) {
                    console.error('停用邀请码失败:', error);
                    showNotification('停用失败，请稍后重试', 'danger');
                }
            }
        }

        // 手机号编辑功能
        function editPhoneNumber(studentId) {
            document.getElementById(`phone-display-${studentId}`).style.display = 'none';
            document.getElementById(`phone-edit-${studentId}`).style.display = 'flex';
            document.getElementById(`phone-input-${studentId}`).focus();
        }

        function cancelEditPhone(studentId) {
            document.getElementById(`phone-display-${studentId}`).style.display = 'block';
            document.getElementById(`phone-edit-${studentId}`).style.display = 'none';
        }

        async function savePhoneNumber(studentId) {
            const phoneInput = document.getElementById(`phone-input-${studentId}`);
            const phoneNumber = phoneInput.value.trim();

            // 简单的手机号验证
            if (phoneNumber && !/^1[3-9]\d{9}$/.test(phoneNumber)) {
                showNotification('请输入正确的手机号格式', 'warning');
                return;
            }

            try {
                const response = await fetch('/Admin/Organization/UpdateMemberPhone', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        studentId: studentId,
                        phoneNumber: phoneNumber
                    })
                });

                if (response.ok) {
                    showNotification('手机号更新成功', 'success');
                    // 更新显示
                    const displayElement = document.getElementById(`phone-display-${studentId}`);
                    if (phoneNumber) {
                        displayElement.innerHTML = `<i class="bi bi-telephone me-1"></i>${phoneNumber}`;
                    } else {
                        displayElement.innerHTML = '<span class="text-muted">未设置</span>';
                    }
                    cancelEditPhone(studentId);
                } else {
                    const errorData = await response.json();
                    showNotification(errorData.message || '更新失败，请稍后重试', 'danger');
                }
            } catch (error) {
                console.error('更新手机号失败:', error);
                showNotification('更新失败，请稍后重试', 'danger');
            }
        }

        // 显示批量添加手机号模态框
        function showBatchAddPhoneModal() {
            const modal = new bootstrap.Modal(document.getElementById('batchAddPhoneModal'));
            modal.show();
        }

        // 处理批量添加手机号
        async function processBatchAddPhone() {
            const phoneData = document.getElementById('phoneData').value.trim();
            const overwriteExisting = document.getElementById('overwriteExisting').checked;

            if (!phoneData) {
                showNotification('请输入手机号数据', 'warning');
                return;
            }

            // 解析数据
            const lines = phoneData.split('\n').filter(line => line.trim());
            const phoneEntries = [];
            const errors = [];

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                const parts = line.split(',');

                if (parts.length !== 2) {
                    errors.push(`第${i + 1}行格式错误：${line}`);
                    continue;
                }

                const username = parts[0].trim();
                const phone = parts[1].trim();

                if (!username || !phone) {
                    errors.push(`第${i + 1}行数据不完整：${line}`);
                    continue;
                }

                // 简单的手机号验证
                if (!/^1[3-9]\d{9}$/.test(phone)) {
                    errors.push(`第${i + 1}行手机号格式错误：${phone}`);
                    continue;
                }

                phoneEntries.push({ username, phone });
            }

            if (errors.length > 0) {
                showNotification(`数据格式错误：\n${errors.join('\n')}`, 'danger');
                return;
            }

            if (phoneEntries.length === 0) {
                showNotification('没有有效的数据', 'warning');
                return;
            }

            try {
                const response = await fetch('/Admin/Organization/BatchUpdateMemberPhone', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        phoneEntries: phoneEntries,
                        overwriteExisting: overwriteExisting
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    showNotification(`批量更新完成！成功：${result.successCount}，失败：${result.failureCount}`, 'success');

                    // 关闭模态框并刷新页面
                    const modal = bootstrap.Modal.getInstance(document.getElementById('batchAddPhoneModal'));
                    modal.hide();

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    const errorData = await response.json();
                    showNotification(errorData.message || '批量更新失败，请稍后重试', 'danger');
                }
            } catch (error) {
                console.error('批量更新手机号失败:', error);
                showNotification('批量更新失败，请稍后重试', 'danger');
            }
        }
    </script>
}

@Html.AntiForgeryToken()
